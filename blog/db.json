{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"source/images/11_1.jpg","path":"images/11_1.jpg","modified":0,"renderable":0},{"_id":"source/images/12_1.jpg","path":"images/12_1.jpg","modified":0,"renderable":0},{"_id":"source/images/15_1.jpg","path":"images/15_1.jpg","modified":0,"renderable":0},{"_id":"source/images/1_1.jpg","path":"images/1_1.jpg","modified":0,"renderable":0},{"_id":"source/images/1_2.jpg","path":"images/1_2.jpg","modified":0,"renderable":0},{"_id":"source/images/1_3.jpg","path":"images/1_3.jpg","modified":0,"renderable":0},{"_id":"source/images/4_1.jpg","path":"images/4_1.jpg","modified":0,"renderable":0},{"_id":"source/images/4_2.jpg","path":"images/4_2.jpg","modified":0,"renderable":0},{"_id":"source/images/4_3.jpg","path":"images/4_3.jpg","modified":0,"renderable":0},{"_id":"source/images/4_4.jpg","path":"images/4_4.jpg","modified":0,"renderable":0},{"_id":"source/images/5_1.jpg","path":"images/5_1.jpg","modified":0,"renderable":0},{"_id":"source/images/5_2.jpg","path":"images/5_2.jpg","modified":0,"renderable":0},{"_id":"source/images/5_3.jpg","path":"images/5_3.jpg","modified":0,"renderable":0},{"_id":"source/images/5_4.jpg","path":"images/5_4.jpg","modified":0,"renderable":0},{"_id":"source/images/5_5.jpg","path":"images/5_5.jpg","modified":0,"renderable":0},{"_id":"source/images/5_6.jpg","path":"images/5_6.jpg","modified":0,"renderable":0},{"_id":"source/images/5_7.jpg","path":"images/5_7.jpg","modified":0,"renderable":0},{"_id":"source/images/6_1.jpg","path":"images/6_1.jpg","modified":0,"renderable":0},{"_id":"source/images/6_2.jpg","path":"images/6_2.jpg","modified":0,"renderable":0},{"_id":"source/images/6_3.jpg","path":"images/6_3.jpg","modified":0,"renderable":0},{"_id":"source/images/6_4.jpg","path":"images/6_4.jpg","modified":0,"renderable":0},{"_id":"source/images/6_5.jpg","path":"images/6_5.jpg","modified":0,"renderable":0},{"_id":"source/images/6_6.jpg","path":"images/6_6.jpg","modified":0,"renderable":0},{"_id":"source/images/7_1.jpg","path":"images/7_1.jpg","modified":0,"renderable":0},{"_id":"source/images/iverson.jpg","path":"images/iverson.jpg","modified":0,"renderable":0},{"_id":"source/images/sea.jpg","path":"images/sea.jpg","modified":0,"renderable":0},{"_id":"source/images/cmake学习/1.jpg","path":"images/cmake学习/1.jpg","modified":0,"renderable":0},{"_id":"source/images/动手深度学习/1.jpg","path":"images/动手深度学习/1.jpg","modified":0,"renderable":0},{"_id":"source/images/静态链接/1.jpg","path":"images/静态链接/1.jpg","modified":0,"renderable":0},{"_id":"source/images/RadixSpline-A-Single-Pass-Learned-Index/1.png","path":"images/RadixSpline-A-Single-Pass-Learned-Index/1.png","modified":0,"renderable":0},{"_id":"source/images/RadixSpline-A-Single-Pass-Learned-Index/2.png","path":"images/RadixSpline-A-Single-Pass-Learned-Index/2.png","modified":0,"renderable":0},{"_id":"source/images/ALEX-An-Updatable-Adaptive-Learned-Index/1.png","path":"images/ALEX-An-Updatable-Adaptive-Learned-Index/1.png","modified":0,"renderable":0},{"_id":"source/images/ALEX-An-Updatable-Adaptive-Learned-Index/10.png","path":"images/ALEX-An-Updatable-Adaptive-Learned-Index/10.png","modified":0,"renderable":0},{"_id":"source/images/ALEX-An-Updatable-Adaptive-Learned-Index/11.png","path":"images/ALEX-An-Updatable-Adaptive-Learned-Index/11.png","modified":0,"renderable":0},{"_id":"source/images/ALEX-An-Updatable-Adaptive-Learned-Index/2.png","path":"images/ALEX-An-Updatable-Adaptive-Learned-Index/2.png","modified":0,"renderable":0},{"_id":"source/images/ALEX-An-Updatable-Adaptive-Learned-Index/3.png","path":"images/ALEX-An-Updatable-Adaptive-Learned-Index/3.png","modified":0,"renderable":0},{"_id":"source/images/ALEX-An-Updatable-Adaptive-Learned-Index/4.png","path":"images/ALEX-An-Updatable-Adaptive-Learned-Index/4.png","modified":0,"renderable":0},{"_id":"source/images/ALEX-An-Updatable-Adaptive-Learned-Index/5.png","path":"images/ALEX-An-Updatable-Adaptive-Learned-Index/5.png","modified":0,"renderable":0},{"_id":"source/images/ALEX-An-Updatable-Adaptive-Learned-Index/6.png","path":"images/ALEX-An-Updatable-Adaptive-Learned-Index/6.png","modified":0,"renderable":0},{"_id":"source/images/ALEX-An-Updatable-Adaptive-Learned-Index/7.png","path":"images/ALEX-An-Updatable-Adaptive-Learned-Index/7.png","modified":0,"renderable":0},{"_id":"source/images/ALEX-An-Updatable-Adaptive-Learned-Index/8.png","path":"images/ALEX-An-Updatable-Adaptive-Learned-Index/8.png","modified":0,"renderable":0},{"_id":"source/images/ALEX-An-Updatable-Adaptive-Learned-Index/9.png","path":"images/ALEX-An-Updatable-Adaptive-Learned-Index/9.png","modified":0,"renderable":0},{"_id":"source/images/Bounding-the-Last-Mile-Efficient-Learned-String-Indexing/1.png","path":"images/Bounding-the-Last-Mile-Efficient-Learned-String-Indexing/1.png","modified":0,"renderable":0},{"_id":"source/images/Bounding-the-Last-Mile-Efficient-Learned-String-Indexing/2.png","path":"images/Bounding-the-Last-Mile-Efficient-Learned-String-Indexing/2.png","modified":0,"renderable":0},{"_id":"source/images/DILI-A-Distribution-Driven-Learned-Index/1.png","path":"images/DILI-A-Distribution-Driven-Learned-Index/1.png","modified":0,"renderable":0},{"_id":"source/images/DILI-A-Distribution-Driven-Learned-Index/10.png","path":"images/DILI-A-Distribution-Driven-Learned-Index/10.png","modified":0,"renderable":0},{"_id":"source/images/DILI-A-Distribution-Driven-Learned-Index/11.png","path":"images/DILI-A-Distribution-Driven-Learned-Index/11.png","modified":0,"renderable":0},{"_id":"source/images/DILI-A-Distribution-Driven-Learned-Index/12.png","path":"images/DILI-A-Distribution-Driven-Learned-Index/12.png","modified":0,"renderable":0},{"_id":"source/images/DILI-A-Distribution-Driven-Learned-Index/13.png","path":"images/DILI-A-Distribution-Driven-Learned-Index/13.png","modified":0,"renderable":0},{"_id":"source/images/DILI-A-Distribution-Driven-Learned-Index/2.png","path":"images/DILI-A-Distribution-Driven-Learned-Index/2.png","modified":0,"renderable":0},{"_id":"source/images/DILI-A-Distribution-Driven-Learned-Index/3.png","path":"images/DILI-A-Distribution-Driven-Learned-Index/3.png","modified":0,"renderable":0},{"_id":"source/images/DILI-A-Distribution-Driven-Learned-Index/4.png","path":"images/DILI-A-Distribution-Driven-Learned-Index/4.png","modified":0,"renderable":0},{"_id":"source/images/DILI-A-Distribution-Driven-Learned-Index/5.png","path":"images/DILI-A-Distribution-Driven-Learned-Index/5.png","modified":0,"renderable":0},{"_id":"source/images/DILI-A-Distribution-Driven-Learned-Index/7.png","path":"images/DILI-A-Distribution-Driven-Learned-Index/7.png","modified":0,"renderable":0},{"_id":"source/images/DILI-A-Distribution-Driven-Learned-Index/8.png","path":"images/DILI-A-Distribution-Driven-Learned-Index/8.png","modified":0,"renderable":0},{"_id":"source/images/DILI-A-Distribution-Driven-Learned-Index/6.png","path":"images/DILI-A-Distribution-Driven-Learned-Index/6.png","modified":0,"renderable":0},{"_id":"source/images/DILI-A-Distribution-Driven-Learned-Index/9.png","path":"images/DILI-A-Distribution-Driven-Learned-Index/9.png","modified":0,"renderable":0},{"_id":"source/images/FiTing-Tree-A-Data-aware-Index-Structure/1.png","path":"images/FiTing-Tree-A-Data-aware-Index-Structure/1.png","modified":0,"renderable":0},{"_id":"source/images/FiTing-Tree-A-Data-aware-Index-Structure/11.png","path":"images/FiTing-Tree-A-Data-aware-Index-Structure/11.png","modified":0,"renderable":0},{"_id":"source/images/FiTing-Tree-A-Data-aware-Index-Structure/12.png","path":"images/FiTing-Tree-A-Data-aware-Index-Structure/12.png","modified":0,"renderable":0},{"_id":"source/images/FiTing-Tree-A-Data-aware-Index-Structure/10.png","path":"images/FiTing-Tree-A-Data-aware-Index-Structure/10.png","modified":0,"renderable":0},{"_id":"source/images/FiTing-Tree-A-Data-aware-Index-Structure/13.png","path":"images/FiTing-Tree-A-Data-aware-Index-Structure/13.png","modified":0,"renderable":0},{"_id":"source/images/FiTing-Tree-A-Data-aware-Index-Structure/2.png","path":"images/FiTing-Tree-A-Data-aware-Index-Structure/2.png","modified":0,"renderable":0},{"_id":"source/images/FiTing-Tree-A-Data-aware-Index-Structure/3.png","path":"images/FiTing-Tree-A-Data-aware-Index-Structure/3.png","modified":0,"renderable":0},{"_id":"source/images/FiTing-Tree-A-Data-aware-Index-Structure/4.png","path":"images/FiTing-Tree-A-Data-aware-Index-Structure/4.png","modified":0,"renderable":0},{"_id":"source/images/FiTing-Tree-A-Data-aware-Index-Structure/5.png","path":"images/FiTing-Tree-A-Data-aware-Index-Structure/5.png","modified":0,"renderable":0},{"_id":"source/images/FiTing-Tree-A-Data-aware-Index-Structure/6.png","path":"images/FiTing-Tree-A-Data-aware-Index-Structure/6.png","modified":0,"renderable":0},{"_id":"source/images/FiTing-Tree-A-Data-aware-Index-Structure/7.png","path":"images/FiTing-Tree-A-Data-aware-Index-Structure/7.png","modified":0,"renderable":0},{"_id":"source/images/FiTing-Tree-A-Data-aware-Index-Structure/8.png","path":"images/FiTing-Tree-A-Data-aware-Index-Structure/8.png","modified":0,"renderable":0},{"_id":"source/images/FiTing-Tree-A-Data-aware-Index-Structure/9.png","path":"images/FiTing-Tree-A-Data-aware-Index-Structure/9.png","modified":0,"renderable":0},{"_id":"source/images/NFL-Robust-Learned-Index-via-Distribution-Transformation/1.jpg","path":"images/NFL-Robust-Learned-Index-via-Distribution-Transformation/1.jpg","modified":0,"renderable":0},{"_id":"source/images/NFL-Robust-Learned-Index-via-Distribution-Transformation/10.jpg","path":"images/NFL-Robust-Learned-Index-via-Distribution-Transformation/10.jpg","modified":0,"renderable":0},{"_id":"source/images/NFL-Robust-Learned-Index-via-Distribution-Transformation/11.jpg","path":"images/NFL-Robust-Learned-Index-via-Distribution-Transformation/11.jpg","modified":0,"renderable":0},{"_id":"source/images/NFL-Robust-Learned-Index-via-Distribution-Transformation/12.jpg","path":"images/NFL-Robust-Learned-Index-via-Distribution-Transformation/12.jpg","modified":0,"renderable":0},{"_id":"source/images/NFL-Robust-Learned-Index-via-Distribution-Transformation/2.jpg","path":"images/NFL-Robust-Learned-Index-via-Distribution-Transformation/2.jpg","modified":0,"renderable":0},{"_id":"source/images/NFL-Robust-Learned-Index-via-Distribution-Transformation/4.png","path":"images/NFL-Robust-Learned-Index-via-Distribution-Transformation/4.png","modified":0,"renderable":0},{"_id":"source/images/NFL-Robust-Learned-Index-via-Distribution-Transformation/3.jpg","path":"images/NFL-Robust-Learned-Index-via-Distribution-Transformation/3.jpg","modified":0,"renderable":0},{"_id":"source/images/NFL-Robust-Learned-Index-via-Distribution-Transformation/5.jpg","path":"images/NFL-Robust-Learned-Index-via-Distribution-Transformation/5.jpg","modified":0,"renderable":0},{"_id":"source/images/NFL-Robust-Learned-Index-via-Distribution-Transformation/6.jpg","path":"images/NFL-Robust-Learned-Index-via-Distribution-Transformation/6.jpg","modified":0,"renderable":0},{"_id":"source/images/NFL-Robust-Learned-Index-via-Distribution-Transformation/7.jpg","path":"images/NFL-Robust-Learned-Index-via-Distribution-Transformation/7.jpg","modified":0,"renderable":0},{"_id":"source/images/NFL-Robust-Learned-Index-via-Distribution-Transformation/8.jpg","path":"images/NFL-Robust-Learned-Index-via-Distribution-Transformation/8.jpg","modified":0,"renderable":0},{"_id":"source/images/NFL-Robust-Learned-Index-via-Distribution-Transformation/9.jpg","path":"images/NFL-Robust-Learned-Index-via-Distribution-Transformation/9.jpg","modified":0,"renderable":0},{"_id":"source/images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/1.png","path":"images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/1.png","modified":0,"renderable":0},{"_id":"source/images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/10.png","path":"images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/10.png","modified":0,"renderable":0},{"_id":"source/images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/11.png","path":"images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/11.png","modified":0,"renderable":0},{"_id":"source/images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/12.png","path":"images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/12.png","modified":0,"renderable":0},{"_id":"source/images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/13.png","path":"images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/13.png","modified":0,"renderable":0},{"_id":"source/images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/14.png","path":"images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/14.png","modified":0,"renderable":0},{"_id":"source/images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/15.png","path":"images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/15.png","modified":0,"renderable":0},{"_id":"source/images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/2.png","path":"images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/2.png","modified":0,"renderable":0},{"_id":"source/images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/16.png","path":"images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/16.png","modified":0,"renderable":0},{"_id":"source/images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/3.png","path":"images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/3.png","modified":0,"renderable":0},{"_id":"source/images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/4.png","path":"images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/4.png","modified":0,"renderable":0},{"_id":"source/images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/5.png","path":"images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/5.png","modified":0,"renderable":0},{"_id":"source/images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/6.png","path":"images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/6.png","modified":0,"renderable":0},{"_id":"source/images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/7.png","path":"images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/7.png","modified":0,"renderable":0},{"_id":"source/images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/8.png","path":"images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/8.png","modified":0,"renderable":0},{"_id":"source/images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/9.png","path":"images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/9.png","modified":0,"renderable":0},{"_id":"source/images/The-PGM-index-a-fully-dynamic-compressed-learned-index-with-provable-worst-case-bounds/1.png","path":"images/The-PGM-index-a-fully-dynamic-compressed-learned-index-with-provable-worst-case-bounds/1.png","modified":0,"renderable":0},{"_id":"source/images/The-PGM-index-a-fully-dynamic-compressed-learned-index-with-provable-worst-case-bounds/2.png","path":"images/The-PGM-index-a-fully-dynamic-compressed-learned-index-with-provable-worst-case-bounds/2.png","modified":0,"renderable":0},{"_id":"source/images/Updatable-Learned-Index-with-Precise-Positions/1.jpg","path":"images/Updatable-Learned-Index-with-Precise-Positions/1.jpg","modified":0,"renderable":0},{"_id":"source/images/Updatable-Learned-Index-with-Precise-Positions/2.jpg","path":"images/Updatable-Learned-Index-with-Precise-Positions/2.jpg","modified":0,"renderable":0},{"_id":"source/images/Updatable-Learned-Index-with-Precise-Positions/3.jpg","path":"images/Updatable-Learned-Index-with-Precise-Positions/3.jpg","modified":0,"renderable":0},{"_id":"source/images/Updatable-Learned-Index-with-Precise-Positions/4.jpg","path":"images/Updatable-Learned-Index-with-Precise-Positions/4.jpg","modified":0,"renderable":0},{"_id":"source/images/Updatable-Learned-Index-with-Precise-Positions/6.jpg","path":"images/Updatable-Learned-Index-with-Precise-Positions/6.jpg","modified":0,"renderable":0},{"_id":"source/images/cmu15445-project0/1.png","path":"images/cmu15445-project0/1.png","modified":0,"renderable":0},{"_id":"source/images/cmu15445-project0/2.png","path":"images/cmu15445-project0/2.png","modified":0,"renderable":0},{"_id":"source/images/Updatable-Learned-Index-with-Precise-Positions/5.jpg","path":"images/Updatable-Learned-Index-with-Precise-Positions/5.jpg","modified":0,"renderable":0},{"_id":"source/images/cmu15445-project0/4.png","path":"images/cmu15445-project0/4.png","modified":0,"renderable":0},{"_id":"source/images/cmu15445-project0/3.png","path":"images/cmu15445-project0/3.png","modified":0,"renderable":0},{"_id":"source/images/cmu15445-project0/5.png","path":"images/cmu15445-project0/5.png","modified":0,"renderable":0},{"_id":"source/images/cmu15445-project1/1.png","path":"images/cmu15445-project1/1.png","modified":0,"renderable":0},{"_id":"source/images/cmu15445-project1/2.png","path":"images/cmu15445-project1/2.png","modified":0,"renderable":0},{"_id":"source/images/cmu15445-project1/3.png","path":"images/cmu15445-project1/3.png","modified":0,"renderable":0},{"_id":"source/images/cmu15445-project1/4.png","path":"images/cmu15445-project1/4.png","modified":0,"renderable":0},{"_id":"source/images/cmu15445-project1/5.png","path":"images/cmu15445-project1/5.png","modified":0,"renderable":0},{"_id":"source/images/cmu15445-project1/6.png","path":"images/cmu15445-project1/6.png","modified":0,"renderable":0},{"_id":"source/images/cmu15445-project1/7.png","path":"images/cmu15445-project1/7.png","modified":0,"renderable":0},{"_id":"source/images/cmu15445-project2/1.png","path":"images/cmu15445-project2/1.png","modified":1,"renderable":0},{"_id":"source/images/cmu15445-project2/2.png","path":"images/cmu15445-project2/2.png","modified":1,"renderable":0},{"_id":"source/images/cmu15445-project2/3.png","path":"images/cmu15445-project2/3.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/_posts/1-启动选项.md","hash":"bae8f1502b6a8f42517adbabad50549ffb2810a9","modified":1696128945143},{"_id":"source/_posts/10-InnoDB统计数据是如何收集的.md","hash":"3e954d80e8f7532773b3485b544ebd721c90017e","modified":1696128945143},{"_id":"source/_posts/11-MySQL基于规则的优化.md","hash":"6f64633936250f4c1f0a8ed93e4b5d75f9077cae","modified":1696128945143},{"_id":"source/_posts/12-事务.md","hash":"be8647d8285867ea0b86eabd156501a920a54cea","modified":1696128945143},{"_id":"source/_posts/13-redo日志.md","hash":"f0fe71f00aeb017e58f43494e103568cb883d2a8","modified":1696128945143},{"_id":"source/_posts/14-undo日志.md","hash":"2a866a64c2c910785bebb635ac0b6e04e631dbcd","modified":1696128945143},{"_id":"source/_posts/15-事务的隔离级别.md","hash":"efa1424dc2a52b8d3e4e0f2148851c3839cd6e37","modified":1696128945143},{"_id":"source/_posts/2-系统变量.md","hash":"d229e7234752acac8b70aab661b4763e03c6bf8a","modified":1696128945143},{"_id":"source/_posts/3-状态变量.md","hash":"446a784d9a7cd6e86ff21b0bd60e1b1a8f0042d5","modified":1696128945143},{"_id":"source/_posts/4-字符集和比较规则.md","hash":"4ac1539c5e2e4bc6c43367ffa49b20c1ab863dcd","modified":1696128945143},{"_id":"source/_posts/5-InnoDB记录行格式.md","hash":"be5446fcb2c922c5827693a971fed52348cc2c32","modified":1696211130038},{"_id":"source/_posts/6-InnoDB数据页结构.md","hash":"cf46d9ed38b8b4e185b2c147bd80ec7c63ae25bb","modified":1696128945143},{"_id":"source/_posts/7-B-树索引.md","hash":"75a326a8525fc68b838bc2e438b5536d89315457","modified":1696128945143},{"_id":"source/_posts/8-单表访问方法.md","hash":"eabcdb1eda9f9e848943a4a4957348f2e9d0f0de","modified":1696128945143},{"_id":"source/_posts/9-连接的原理.md","hash":"af4edfaed1d71cccb6bb30bf1430b7ddfc4cb5cb","modified":1696128945143},{"_id":"source/_posts/cmake学习.md","hash":"11b655ce14260d6680bf7df1c212b9648ebf9a32","modified":1696128945143},{"_id":"source/_posts/configure命令.md","hash":"d68e7670862ab564020ade6be7f74b188a303cc9","modified":1696128945143},{"_id":"source/_posts/linux下目录各个文件夹详解.md","hash":"7d83b544c4274d83285610d3d8a21de37ffda80d","modified":1696128945143},{"_id":"source/_posts/linux文件权限和属性.md","hash":"c7aabd2aaac5622f14cb55c887a7d1a3ee7ecf05","modified":1696128945143},{"_id":"source/_posts/linux配置环境变量.md","hash":"da6d306acda912d86a27ca941b955569a0d7a8e9","modified":1696128945143},{"_id":"source/_posts/动态链接.md","hash":"aa14823f39f94c0c77f9c985b6c920b6ee898227","modified":1696210946458},{"_id":"source/_posts/动手深度学习.md","hash":"33119e4e2bbd27e12b0810a113231f1b01536d1e","modified":1696128945143},{"_id":"source/_posts/静态链接.md","hash":"67ed097e214b9762f4170a99b0c69f3d10a0db8a","modified":1696128945143},{"_id":"source/about/index.md","hash":"b64226526db49ec3bd5bd14520e4a2ca9475063e","modified":1696134247774},{"_id":"source/archives/index.md","hash":"a3ae9f105553a01db8c9c14cd7e21f15832336b9","modified":1696128945143},{"_id":"source/categories/index.md","hash":"fe0d71c5e645ea7427fda048ea775e7187cb05f0","modified":1696128945147},{"_id":"source/images/11_1.jpg","hash":"7fba275af4c21ca33a86e7c5818b8df8897b995a","modified":1696128945147},{"_id":"source/images/12_1.jpg","hash":"6d8fa5e9416af4517b5d3b13410b30164ee4dfc1","modified":1696128945147},{"_id":"source/images/15_1.jpg","hash":"74a5deaa9da211e904953d7ed1ae3b90a3b60d16","modified":1696128945147},{"_id":"source/images/1_1.jpg","hash":"13218fc8811d226f5a02d55fa787833db0c8508f","modified":1696128945147},{"_id":"source/images/1_2.jpg","hash":"4a3f87de5d7eeda8f28678d6637e0a6d32ddae38","modified":1696128945147},{"_id":"source/images/1_3.jpg","hash":"197dc8960f42742441de15822c45aeb1eb00e2f3","modified":1696128945147},{"_id":"source/images/4_1.jpg","hash":"4a5c734eadcce35878c0925ffb6e48d99f92eb19","modified":1696128945147},{"_id":"source/images/4_2.jpg","hash":"70f74288b1c22c265a9ee8a677718ea9473a4e6f","modified":1696128945147},{"_id":"source/images/4_3.jpg","hash":"47198c6712a391a3210cba44580504f36b203e2b","modified":1696128945147},{"_id":"source/images/4_4.jpg","hash":"8e66437505eb82ef908dc37eb39a226af346429e","modified":1696128945147},{"_id":"source/images/5_1.jpg","hash":"ae6ae760e7004a81fde167d86e5c501d91e75ee2","modified":1696128945147},{"_id":"source/images/5_2.jpg","hash":"d2ddb5a456d9d6b74364ded5b27e41b23d62d47f","modified":1696128945147},{"_id":"source/images/5_3.jpg","hash":"ce2a9837e9ecfa86ad55f308cb5c7689d662cdcc","modified":1696128945147},{"_id":"source/images/5_4.jpg","hash":"802d7fd1d057c985bf80a2597cd2066de015ad0b","modified":1696128945147},{"_id":"source/images/5_6.jpg","hash":"9f1de4e064b04eb1968819245cd2d9598db43780","modified":1696128945147},{"_id":"source/images/5_7.jpg","hash":"1c750f9a8e531f84a1a73cf6e9bea8af12cff067","modified":1696128945147},{"_id":"source/images/6_1.jpg","hash":"c8d69ce82bb99ce5364e834bad449d907a6d3c1a","modified":1696128945147},{"_id":"source/images/6_2.jpg","hash":"b64ece41c5a5fe750ef7ba2c7045276178fa1c8b","modified":1696128945147},{"_id":"source/images/6_3.jpg","hash":"55f81540bfeb9f76a541efed34d9fe0af90aec41","modified":1696128945147},{"_id":"source/images/6_5.jpg","hash":"6b1511fab938a0dc909474914933e502ad22a27a","modified":1696128945147},{"_id":"source/images/6_6.jpg","hash":"4f65ec8246fa81f2a734fb9c9ede064b0e606f1c","modified":1696128945147},{"_id":"source/images/7_1.jpg","hash":"00a2e9c144febb2dd234b539febe016a80386da8","modified":1696128945147},{"_id":"source/images/iverson.jpg","hash":"2021f44d0263e3cc95d9560b646a80dee12e07c1","modified":1696128945147},{"_id":"source/tags/index.md","hash":"31d17baa85a98f68ae05621cb7217514ff744a35","modified":1696128945147},{"_id":"source/images/cmake学习/1.jpg","hash":"c02a6d08106affb9def98cb17b971cb6d2f348f6","modified":1696128945147},{"_id":"source/images/动手深度学习/1.jpg","hash":"c54415c44f1a34de6ba19524db4ed333fcfa7bc6","modified":1696128945147},{"_id":"source/images/静态链接/1.jpg","hash":"71ce721de4fb919f70c9312253a06cf6f324587f","modified":1696128945147},{"_id":"source/images/5_5.jpg","hash":"2d1cd40900b2642ba5dd07b08168557714d7d311","modified":1696128945147},{"_id":"source/images/6_4.jpg","hash":"3b841570770cb1d7d5a5375e9eeed80ec2058a23","modified":1696128945147},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1696130626148},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1696130626148},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1696130626148},{"_id":"themes/next/.gitignore","hash":"56f3470755c20311ddd30d421b377697a6e5e68b","modified":1696130626148},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1696130626148},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1696130626148},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1696130626148},{"_id":"themes/next/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1696130626148},{"_id":"themes/next/_config.yml","hash":"d7d6ea5dfa74201d8f3f1a1743216758de635a03","modified":1696132894235},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1696130626148},{"_id":"themes/next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1696130626148},{"_id":"themes/next/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1696130626156},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1696130626148},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1696130626148},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1696130626148},{"_id":"themes/next/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1696130626148},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1696130626148},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1696130626148},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1696130626148},{"_id":"themes/next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1696130626148},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1696130626148},{"_id":"themes/next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1696130626148},{"_id":"themes/next/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1696130626148},{"_id":"themes/next/languages/default.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1696130626148},{"_id":"themes/next/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1696130626148},{"_id":"themes/next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1696130626148},{"_id":"themes/next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1696130626148},{"_id":"themes/next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1696130626148},{"_id":"themes/next/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1696130626148},{"_id":"themes/next/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1696130626148},{"_id":"themes/next/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1696130626148},{"_id":"themes/next/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1696130626148},{"_id":"themes/next/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1696130626148},{"_id":"themes/next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1696130626152},{"_id":"themes/next/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1696130626152},{"_id":"themes/next/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1696130626152},{"_id":"themes/next/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1696130626152},{"_id":"themes/next/languages/tr.yml","hash":"2b041eeb8bd096f549464f191cfc1ea0181daca4","modified":1696130626152},{"_id":"themes/next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1696130626152},{"_id":"themes/next/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1696130626152},{"_id":"themes/next/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1696130626152},{"_id":"themes/next/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1696130626152},{"_id":"themes/next/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1696130626152},{"_id":"themes/next/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1696130626152},{"_id":"themes/next/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1696130626156},{"_id":"themes/next/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1696130626156},{"_id":"themes/next/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1696130626156},{"_id":"themes/next/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1696130626156},{"_id":"themes/next/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1696130626156},{"_id":"themes/next/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1696130626156},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1696130626156},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1696130626148},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1696130626148},{"_id":"themes/next/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1696130626148},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1696130626148},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1696130626148},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1696130626148},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1696130626148},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1696130626148},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1696130626148},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1696130626148},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1696130626148},{"_id":"themes/next/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1696130626148},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1696130626148},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1696130626152},{"_id":"themes/next/layout/_macro/post.swig","hash":"090b5a9b6fca8e968178004cbd6cff205b7eba57","modified":1696130626152},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1696130626152},{"_id":"themes/next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1696130626152},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4369b313cbbeae742cb35f86d23d99d4285f7359","modified":1696130626152},{"_id":"themes/next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1696130626156},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1696130626156},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1696130626156},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1696130626156},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1696130626156},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1696130626156},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1696130626156},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1696130626156},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"b782eb2e34c0c15440837040b5d65b093ab6ec04","modified":1696130626156},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1696130626156},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1696130626156},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1696130626156},{"_id":"themes/next/scripts/events/index.js","hash":"5743cde07f3d2aa11532a168a652e52ec28514fd","modified":1696130626156},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1696130626156},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1696130626156},{"_id":"themes/next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1696130626156},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1696130626156},{"_id":"themes/next/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1696130626156},{"_id":"themes/next/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1696130626156},{"_id":"themes/next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1696130626156},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1696130626156},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1696130626156},{"_id":"themes/next/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1696130626156},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1696130626156},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1696130626156},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1696130626156},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1696130626156},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1696130626156},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1696130626156},{"_id":"themes/next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1696130626156},{"_id":"themes/next/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1696130626156},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1696130626156},{"_id":"themes/next/source/css/_colors.styl","hash":"a8442520f719d3d7a19811cb3b85bcfd4a596e1f","modified":1696130626156},{"_id":"themes/next/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1696130626160},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1696130626160},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1696130626160},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1696130626160},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1696130626160},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1696130626160},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1696130626160},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1696130626160},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1696130626160},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1696130626160},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1696130626160},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1696130626160},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1696130626160},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1696130626160},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1696130626160},{"_id":"themes/next/source/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1696130626160},{"_id":"themes/next/source/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1696130626160},{"_id":"themes/next/source/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1696130626160},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1696130626160},{"_id":"themes/next/source/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1696130626160},{"_id":"themes/next/source/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1696130626168},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1696130626168},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1696130626152},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"810d544019e4a8651b756dd23e5592ee851eda71","modified":1696130626152},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1696130626152},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1696130626152},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1696130626152},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1696130626152},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1696130626156},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1696130626156},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1696130626156},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1696130626156},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1696130626156},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1696130626156},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1696130626156},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1696130626156},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1696130626156},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1696130626156},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1696130626156},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1696130626156},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1696130626156},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1696130626156},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1696130626156},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1696130626156},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1696130626156},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1696130626156},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1696130626156},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1696130626156},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1696130626156},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1696130626156},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1696130626156},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1696130626156},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1696130626156},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1696130626156},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1696130626156},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1696130626156},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1696130626156},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1696130626156},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1696130626156},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1696130626156},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1696130626156},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1696130626156},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1696130626156},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1696130626156},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1696130626156},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1696130626156},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1696130626156},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1696130626156},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1696130626156},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1696130626156},{"_id":"themes/next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1696130626156},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1696130626156},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1696130626156},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1696130626156},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1696130626156},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1696130626156},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1696130626156},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1696130626156},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1696130626156},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1696130626156},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1696130626156},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1696130626160},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1696130626160},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1696130626160},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"612ec843372dae709acb17112c1145a53450cc59","modified":1696130626160},{"_id":"themes/next/source/css/_variables/base.styl","hash":"818508748b7a62e02035e87fe58e75b603ed56dc","modified":1696130626160},{"_id":"themes/next/source/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1696130626160},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1696130626168},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1696130626168},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1696130626168},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1696130626156},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1696130626156},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1696130626156},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1696130626156},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1696130626156},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1696130626156},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"0b2c4b78eead410020d7c4ded59c75592a648df8","modified":1696130626156},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1696130626156},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1696130626160},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1696130626160},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1696130626160},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1696130626160},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"18ce72d90459c9aa66910ac64eae115f2dde3767","modified":1696130626160},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1696130626160},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1696130626160},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1696130626160},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1696130626160},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1696130626160},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1696130626160},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1696130626160},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1696130626160},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1696130626160},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"93db5dafe9294542a6b5f647643cb9deaced8e06","modified":1696130626160},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1696130626160},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1696130626160},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1696130626160},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1696130626160},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1696130626160},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"85da2f3006f4bef9a2199416ecfab4d288f848c4","modified":1696130626160},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44f47c88c06d89d06f220f102649057118715828","modified":1696130626160},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1696130626160},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1696130626160},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1696130626168},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1696130626168},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1696130626156},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1696130626156},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1696130626156},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1696130626156},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1696130626156},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1696130626156},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1696130626156},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1696130626156},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1696130626156},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1696130626156},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1696130626156},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1696130626156},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1696130626156},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"d114b2a531129e739a27ba6271cfe6857aa9a865","modified":1696130626156},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1696130626156},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1696130626156},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1696130626156},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1696130626156},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1696130626156},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1696130626156},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1696130626156},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1696130626156},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1696130626156},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1696130626156},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1696130626156},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1696130626156},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1696130626156},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1696130626156},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1696130626156},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1696130626156},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1696130626156},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1696130626156},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1696130626156},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1696130626156},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1696130626156},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1696130626156},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1696130626156},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1696130626156},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1696130626156},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1696130626156},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1696130626156},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1696130626160},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1696130626160},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1696130626160},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1696130626160},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1696130626160},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1696130626160},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1696130626160},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1696130626160},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1696130626160},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1696130626160},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1696130626160},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1696130626168},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1696130626168},{"_id":"source/images/sea.jpg","hash":"260f342bf5a77615bb2329886ac7ed4836bac87d","modified":1696128945147},{"_id":"public/search.xml","hash":"7098e53483b88e16b365cab65ddb9c6380c1a3e9","modified":1709019546197},{"_id":"public/about/index.html","hash":"0bb8c5beb35cbc0344e9c0d77132ed796c745696","modified":1709019546197},{"_id":"public/archives/index.html","hash":"bef4e26525e3a30ad1f8b9aab1a88ac75c994dfb","modified":1709019546197},{"_id":"public/categories/index.html","hash":"e86313cbfaa242e9d529cc49bfffadfbe8291cfa","modified":1709019546197},{"_id":"public/tags/index.html","hash":"0acd46c4adb9bd65d69ab583b729cd81d31b6baa","modified":1709019546197},{"_id":"public/2023/05/28/静态链接/index.html","hash":"86c20e8b659c38704968fdb4de392aa8c5544acb","modified":1709019546197},{"_id":"public/2023/05/28/configure命令/index.html","hash":"04e395c030561ede8b35a59d8a8e2d54d96725ac","modified":1709019546197},{"_id":"public/2023/05/28/cmake学习/index.html","hash":"05ce9488256f013cf3e6150ef902db5db6088beb","modified":1709019546197},{"_id":"public/2023/05/28/linux配置环境变量/index.html","hash":"f237fc40d79909406fccaaf9a9e52f97e6e7cb57","modified":1709019546197},{"_id":"public/2023/05/28/linux下目录各个文件夹详解/index.html","hash":"3222142a0c003ebb8c758d09d0339f4f1905daa5","modified":1709019546197},{"_id":"public/2023/05/28/linux文件权限和属性/index.html","hash":"f418a59cb0744a170d8dd92e18642e613a4f95e6","modified":1709019546197},{"_id":"public/2023/05/27/15-事务的隔离级别/index.html","hash":"c5b470bfc992392db5ba2f42e0ff8ba20750a4a8","modified":1709019546197},{"_id":"public/2023/05/27/14-undo日志/index.html","hash":"c8acb9c55d6e68ac3afdea0ddd812a0b87e917d8","modified":1709019546197},{"_id":"public/2023/05/27/13-redo日志/index.html","hash":"ae317308107948098c2e1266a73a97c91e09a924","modified":1709019546197},{"_id":"public/2023/05/27/11-MySQL基于规则的优化/index.html","hash":"904d84bfac47b3bc5d25ce56674eb526eab352c0","modified":1709019546197},{"_id":"public/2023/05/27/10-InnoDB统计数据是如何收集的/index.html","hash":"9c0acc1acd3b51f7a8b4614fc213f556ae687651","modified":1709019546197},{"_id":"public/2023/05/27/9-连接的原理/index.html","hash":"1444af48cf81699e51e0a8cb218afa79c7647aa0","modified":1709019546197},{"_id":"public/2023/05/27/8-单表访问方法/index.html","hash":"cfacfff6823985ec25ba0135f177aae224e315bc","modified":1709019546197},{"_id":"public/2023/05/27/3-状态变量/index.html","hash":"ed1047e855333ebaa403fb32d4a597731a61c7bc","modified":1709019546197},{"_id":"public/archives/page/2/index.html","hash":"fc48a54d3d613420491256bba8082048e784e310","modified":1709019546197},{"_id":"public/archives/page/3/index.html","hash":"c5f9d857d3c1bc7ef81645d0c0d54577d0dd95e8","modified":1709019546197},{"_id":"public/archives/2023/index.html","hash":"bbbf0d6084c289703b4e393a9ad8b320af7a011c","modified":1709019546197},{"_id":"public/archives/2023/page/2/index.html","hash":"93d232d28e8d43d75210711778b7e3b29e93beb7","modified":1709019546197},{"_id":"public/archives/2023/page/3/index.html","hash":"10d0dc1e75ab9b5af5b55a0f8a157d3bfd05ec5f","modified":1709019546197},{"_id":"public/archives/2023/05/index.html","hash":"3836f6ceef12830a069854520671da7134a325dd","modified":1709019546197},{"_id":"public/archives/2023/05/page/2/index.html","hash":"19300729821286181aeb099c585faa821d8edc93","modified":1709019546197},{"_id":"public/archives/2023/05/page/3/index.html","hash":"eedaaafcaf2cbb90fbc1e35b14a849c4bbfcca0a","modified":1709019546197},{"_id":"public/categories/数据库/index.html","hash":"f9e8e597a978c1a9d78c627a8e995afd602b0751","modified":1709019546197},{"_id":"public/categories/数据库/page/2/index.html","hash":"7adbb8726f67da0cc62bb2da950e3375b6df3135","modified":1709019546197},{"_id":"public/categories/cmake/index.html","hash":"0caa9b9331b57485f58097879ed2cba1aaac0c59","modified":1709019546197},{"_id":"public/categories/随笔/index.html","hash":"b5a92b1939c000ba92e13287f21acdb262ad0c4e","modified":1709019546197},{"_id":"public/categories/Linux/index.html","hash":"181c53e4d0a28252c52672f8a1586bb2e04c847c","modified":1709019546197},{"_id":"public/tags/MySQL/index.html","hash":"ff79e826795aa839e6c0880e467428c59e836ac1","modified":1709019546197},{"_id":"public/tags/MySQL/page/2/index.html","hash":"6a91be7df0a8f3ed537af0ee99345d83f239c74d","modified":1709019546197},{"_id":"public/tags/MySQL是怎样运行的/index.html","hash":"7fcfe322eb1e2492ff95edc913c4e67d8d91382b","modified":1709019546197},{"_id":"public/tags/MySQL是怎样运行的/page/2/index.html","hash":"73c3baddba9a473356cc33d2635c6e9a82a378b8","modified":1709019546197},{"_id":"public/tags/cmake/index.html","hash":"c111d6358e9c23aba60822b0149de7fb0f99ec8a","modified":1709019546197},{"_id":"public/tags/configure/index.html","hash":"1e424228d96f3a7214d7eebf40acc152326c8146","modified":1709019546197},{"_id":"public/tags/Linux不同目录详解/index.html","hash":"8e24cd06f8789cae3603705f07a0f7ed9044c9db","modified":1709019546197},{"_id":"public/tags/Linux文件权限/index.html","hash":"e7c033c8300eab04591197a9149caac2f5abef85","modified":1709019546197},{"_id":"public/tags/Linux环境变量配置/index.html","hash":"780c08f855155c63149daecf6206ef8982ee6c7f","modified":1709019546197},{"_id":"public/tags/链接、装载与库/index.html","hash":"0ec5dc238f74a504ac9b987170f79e3a7c00d685","modified":1709019546197},{"_id":"public/tags/深度学习/index.html","hash":"7ecde868a8024ab7ec2c359028ec9d55f325243c","modified":1709019546197},{"_id":"public/2023/05/28/动态链接/index.html","hash":"c2ca9e43bbfdc0b40f25f997dfb13ff19fd3e70f","modified":1709019546197},{"_id":"public/2023/05/28/动手深度学习/index.html","hash":"e130b91fc57f345d032235dc9e9228e37da2c4c4","modified":1709019546197},{"_id":"public/2023/05/27/12-事务/index.html","hash":"2352851053cb692cbaabf4e1cb3a0cd1835f7441","modified":1709019546197},{"_id":"public/2023/05/27/7-B-树索引/index.html","hash":"2ed12e239d7b4754cb66ca9c5c5ffc48bf7135a5","modified":1709019546197},{"_id":"public/2023/05/27/6-InnoDB数据页结构/index.html","hash":"1c3e760d26e91f33124574435457d91fe799790f","modified":1709019546197},{"_id":"public/2023/05/27/5-InnoDB记录行格式/index.html","hash":"1244aad0a1b65e70b065f0d035965b0042b1f9e1","modified":1709019546197},{"_id":"public/2023/05/27/4-字符集和比较规则/index.html","hash":"05e1fca8fdd7b7c37cdb405ec3fbc4ca8bcba185","modified":1709019546197},{"_id":"public/2023/05/27/2-系统变量/index.html","hash":"06cf684318591438ea9d4ff7cf73b29dcffa2a04","modified":1709019546197},{"_id":"public/2023/05/27/1-启动选项/index.html","hash":"1d8bf7295a6ba25ca9f3eeed46c55f9e8ecd6970","modified":1709019546197},{"_id":"public/index.html","hash":"602b11802c6c711e683819ceeefba90e36b0821d","modified":1709019546197},{"_id":"public/page/2/index.html","hash":"b66623fa350107e43c0021f7a93b3b1d1341d692","modified":1709019546197},{"_id":"public/page/3/index.html","hash":"1bb225b8d4cdcf61d80194020dd42f752abd9c3c","modified":1709019546197},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1708948156726},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1708948156726},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1708948156726},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1708948156726},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1708948156726},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1708948156726},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1708948156726},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1708948156726},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1708948156726},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1708948156726},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1708948156726},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1708948156726},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1708948156726},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1708948156726},{"_id":"public/images/11_1.jpg","hash":"7fba275af4c21ca33a86e7c5818b8df8897b995a","modified":1708948156726},{"_id":"public/images/12_1.jpg","hash":"6d8fa5e9416af4517b5d3b13410b30164ee4dfc1","modified":1708948156726},{"_id":"public/images/15_1.jpg","hash":"74a5deaa9da211e904953d7ed1ae3b90a3b60d16","modified":1708948156726},{"_id":"public/images/1_1.jpg","hash":"13218fc8811d226f5a02d55fa787833db0c8508f","modified":1708948156726},{"_id":"public/images/1_2.jpg","hash":"4a3f87de5d7eeda8f28678d6637e0a6d32ddae38","modified":1708948156726},{"_id":"public/images/1_3.jpg","hash":"197dc8960f42742441de15822c45aeb1eb00e2f3","modified":1708948156726},{"_id":"public/images/4_1.jpg","hash":"4a5c734eadcce35878c0925ffb6e48d99f92eb19","modified":1708948156726},{"_id":"public/images/4_2.jpg","hash":"70f74288b1c22c265a9ee8a677718ea9473a4e6f","modified":1708948156726},{"_id":"public/images/4_3.jpg","hash":"47198c6712a391a3210cba44580504f36b203e2b","modified":1708948156726},{"_id":"public/images/4_4.jpg","hash":"8e66437505eb82ef908dc37eb39a226af346429e","modified":1708948156726},{"_id":"public/images/5_1.jpg","hash":"ae6ae760e7004a81fde167d86e5c501d91e75ee2","modified":1708948156726},{"_id":"public/images/5_2.jpg","hash":"d2ddb5a456d9d6b74364ded5b27e41b23d62d47f","modified":1708948156726},{"_id":"public/images/5_3.jpg","hash":"ce2a9837e9ecfa86ad55f308cb5c7689d662cdcc","modified":1708948156726},{"_id":"public/images/5_4.jpg","hash":"802d7fd1d057c985bf80a2597cd2066de015ad0b","modified":1708948156726},{"_id":"public/images/5_6.jpg","hash":"9f1de4e064b04eb1968819245cd2d9598db43780","modified":1708948156726},{"_id":"public/images/5_7.jpg","hash":"1c750f9a8e531f84a1a73cf6e9bea8af12cff067","modified":1708948156726},{"_id":"public/images/6_1.jpg","hash":"c8d69ce82bb99ce5364e834bad449d907a6d3c1a","modified":1708948156726},{"_id":"public/images/6_2.jpg","hash":"b64ece41c5a5fe750ef7ba2c7045276178fa1c8b","modified":1708948156726},{"_id":"public/images/6_3.jpg","hash":"55f81540bfeb9f76a541efed34d9fe0af90aec41","modified":1708948156726},{"_id":"public/images/6_5.jpg","hash":"6b1511fab938a0dc909474914933e502ad22a27a","modified":1708948156726},{"_id":"public/images/6_6.jpg","hash":"4f65ec8246fa81f2a734fb9c9ede064b0e606f1c","modified":1708948156726},{"_id":"public/images/7_1.jpg","hash":"00a2e9c144febb2dd234b539febe016a80386da8","modified":1708948156726},{"_id":"public/images/iverson.jpg","hash":"2021f44d0263e3cc95d9560b646a80dee12e07c1","modified":1708948156726},{"_id":"public/images/cmake学习/1.jpg","hash":"c02a6d08106affb9def98cb17b971cb6d2f348f6","modified":1708948156726},{"_id":"public/images/动手深度学习/1.jpg","hash":"c54415c44f1a34de6ba19524db4ed333fcfa7bc6","modified":1708948156726},{"_id":"public/images/静态链接/1.jpg","hash":"71ce721de4fb919f70c9312253a06cf6f324587f","modified":1708948156726},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1708948156726},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1708948156726},{"_id":"public/images/5_5.jpg","hash":"2d1cd40900b2642ba5dd07b08168557714d7d311","modified":1708948156726},{"_id":"public/images/6_4.jpg","hash":"3b841570770cb1d7d5a5375e9eeed80ec2058a23","modified":1708948156726},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1708948156726},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1708948156726},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1708948156726},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1708948156726},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1708948156726},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1708948156726},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1708948156726},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1708948156726},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1708948156726},{"_id":"public/css/main.css","hash":"db448e202a1d033196f60ff66c0c95b57427efcc","modified":1708948156726},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1708948156726},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1708948156726},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1708948156726},{"_id":"public/images/sea.jpg","hash":"260f342bf5a77615bb2329886ac7ed4836bac87d","modified":1708948156726},{"_id":"source/_posts/ALEX-An-Updatable-Adaptive-Learned-Index.md","hash":"ae26adcba61b22fabe12425a61b584ea35c6c68f","modified":1708933534714},{"_id":"public/archives/2023/10/index.html","hash":"75e02860275747e0e8c250017e846352c2d85db1","modified":1709019546197},{"_id":"public/categories/Learned-Index/index.html","hash":"deadcd91352fd173fb050912a99168ec901bdaf3","modified":1709019546197},{"_id":"public/tags/Learned-Index/index.html","hash":"3089c254d084138514e70c4ef824288a31118c22","modified":1709019546197},{"_id":"public/2023/10/01/ALEX-An-Updatable-Adaptive-Learned-Index/index.html","hash":"444b1fbf4e4d85f70b400942433fb5d98baca8c6","modified":1709019546197},{"_id":"source/_posts/RadixSpline-A-Single-Pass-Learned-Index.md","hash":"863e6045457134ad94f72e304d5317aa38a51f6c","modified":1696312805340},{"_id":"source/_posts/RadixSpline-A-Single-Pass-Learned-Index/1.png","hash":"3f2d841ea62a80c3b2950f19e28be6ebd0c554d3","modified":1696311700006},{"_id":"source/_posts/RadixSpline-A-Single-Pass-Learned-Index/2.png","hash":"f0628df690172c4dc8bcafd1610a7b39bff05fd3","modified":1696312108363},{"_id":"public/2023/10/03/RadixSpline-A-Single-Pass-Learned-Index/index.html","hash":"19eacd10bdaeb01cc0ebc60adf118bc514b285c9","modified":1696312810967},{"_id":"public/2023/10/03/RadixSpline-A-Single-Pass-Learned-Index/1.png","hash":"3f2d841ea62a80c3b2950f19e28be6ebd0c554d3","modified":1696312511225},{"_id":"public/2023/10/03/RadixSpline-A-Single-Pass-Learned-Index/2.png","hash":"f0628df690172c4dc8bcafd1610a7b39bff05fd3","modified":1696312511225},{"_id":"source/images/RadixSpline-A-Single-Pass-Learned-Index/1.png","hash":"3f2d841ea62a80c3b2950f19e28be6ebd0c554d3","modified":1696311700006},{"_id":"source/images/RadixSpline-A-Single-Pass-Learned-Index/2.png","hash":"f0628df690172c4dc8bcafd1610a7b39bff05fd3","modified":1696312108363},{"_id":"public/images/RadixSpline-A-Single-Pass-Learned-Index/1.png","hash":"3f2d841ea62a80c3b2950f19e28be6ebd0c554d3","modified":1708948156726},{"_id":"public/images/RadixSpline-A-Single-Pass-Learned-Index/2.png","hash":"f0628df690172c4dc8bcafd1610a7b39bff05fd3","modified":1708948156726},{"_id":"source/_posts/Bounding-the-Last-Mile-Efficient-Learned-String-Indexing.md","hash":"f100315581aa949b063afb9739ea3287f414d91c","modified":1708933534714},{"_id":"source/_posts/DILI-A-Distribution-Driven-Learned-Index.md","hash":"07b028cd579c6705ac67d1ac79ce5283f1684ee6","modified":1708933534714},{"_id":"source/_posts/FiTing-Tree-A-Data-aware-Index-Structure.md","hash":"31c9330e62d147aad6741a02876133a91d97bd44","modified":1708933534714},{"_id":"source/_posts/NFL-Robust-Learned-Index-via-Distribution-Transformation.md","hash":"6f33ff4e66b919e4bd5dbb5b91e337e901b03aa7","modified":1708933534714},{"_id":"source/_posts/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models.md","hash":"f2bca645a8cacb7ded8e1e36817c4c2bac40718f","modified":1708933534714},{"_id":"source/_posts/The-PGM-index-a-fully-dynamic-compressed-learned-index-with-provable-worst-case-bounds.md","hash":"8a1a647ec0004b61c650af988930077d0dc8f9b8","modified":1708933534714},{"_id":"source/_posts/Updatable-Learned-Index-with-Precise-Positions.md","hash":"519a25ee7eb9f69376cf2eba40f17ea012987a0b","modified":1708933534714},{"_id":"source/_posts/cmake-generator-error-under-windows-system.md","hash":"2207f88fac01db581dc7a88d9f4825eae18952c9","modified":1708933534714},{"_id":"source/_posts/cmu15445-project0.md","hash":"5e57946e739b165f118dff0ce5185065cec27d7d","modified":1708948384411},{"_id":"source/images/ALEX-An-Updatable-Adaptive-Learned-Index/3.png","hash":"2d4876c2eccd02ec7ea3ac810e96d9a818d7c75a","modified":1708933534726},{"_id":"source/images/ALEX-An-Updatable-Adaptive-Learned-Index/4.png","hash":"1064422ec436c68853b2b416b6e6b3e1abccb2f3","modified":1708933534726},{"_id":"source/images/ALEX-An-Updatable-Adaptive-Learned-Index/5.png","hash":"716eecf5cf2f2ce587f9edf2200273c47a89be03","modified":1708933534730},{"_id":"source/images/ALEX-An-Updatable-Adaptive-Learned-Index/7.png","hash":"81df530f67d90de975c4f0ab8d893914d3a07381","modified":1708933534730},{"_id":"source/images/ALEX-An-Updatable-Adaptive-Learned-Index/8.png","hash":"085f5639b2c840e748862c61e9f5588a349199af","modified":1708933534730},{"_id":"source/images/ALEX-An-Updatable-Adaptive-Learned-Index/9.png","hash":"4bcab7eb17fcdc875145f1e42eb204a50c82f5fb","modified":1708933534730},{"_id":"source/images/FiTing-Tree-A-Data-aware-Index-Structure/11.png","hash":"2187e565df658a1bf87e1d6d0ccb74262073979b","modified":1708933534810},{"_id":"source/images/FiTing-Tree-A-Data-aware-Index-Structure/12.png","hash":"3b447580a20d3d60ddc1b60f70425f82edabe8a9","modified":1708933534810},{"_id":"source/images/FiTing-Tree-A-Data-aware-Index-Structure/13.png","hash":"c41db71fbb3c6c078c4f499b24706c31843c36c3","modified":1708933534810},{"_id":"source/images/FiTing-Tree-A-Data-aware-Index-Structure/2.png","hash":"20c637c61cf946783bbf3d5119b766d3a5e0bf48","modified":1708933534810},{"_id":"source/images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/12.png","hash":"1cd179977311bd04c31b115711de7adb59875a54","modified":1708933534858},{"_id":"source/images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/13.png","hash":"88e220c5bdbdb051fadeb6e491c3ec895e6109a7","modified":1708933534858},{"_id":"source/images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/14.png","hash":"b7e8a485f6dd1e4bf0eeff6bd5aed6a9e485ace0","modified":1708933534858},{"_id":"source/images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/15.png","hash":"1d645ae9e32928728cd710be3af93b1d0aef67dc","modified":1708933534858},{"_id":"source/images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/16.png","hash":"eb8b7328a15b0c1c185cee09cdda1744ac2b780b","modified":1708933534858},{"_id":"source/images/Updatable-Learned-Index-with-Precise-Positions/4.jpg","hash":"fa3cbf62c209b40c91978ae1131ed7e09af4b6fa","modified":1708933534878},{"_id":"source/images/ALEX-An-Updatable-Adaptive-Learned-Index/2.png","hash":"75a59dcb296136bf5929761945bd29038e8500f1","modified":1708933534726},{"_id":"source/images/Bounding-the-Last-Mile-Efficient-Learned-String-Indexing/2.png","hash":"de76d6c4a9d15c768fb0fca3f6d3c9db54642ee5","modified":1708933534734},{"_id":"source/images/DILI-A-Distribution-Driven-Learned-Index/7.png","hash":"c7cfd279ca15a8c999036757e977d24ecae0f5e9","modified":1708933534802},{"_id":"source/images/FiTing-Tree-A-Data-aware-Index-Structure/10.png","hash":"8626a046647ed2182efb7f6bbd2d8ab414ab129e","modified":1708933534810},{"_id":"source/images/FiTing-Tree-A-Data-aware-Index-Structure/3.png","hash":"05e4c608a98a094af2b86404c4ca3dae1c513667","modified":1708933534810},{"_id":"source/images/NFL-Robust-Learned-Index-via-Distribution-Transformation/2.jpg","hash":"f1f5432d7bb8e7cb774700767b7450dbc80d75ff","modified":1708933534838},{"_id":"source/images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/1.png","hash":"ab749a526748e28d16dfa2f7c6480021b75a2790","modified":1708933534854},{"_id":"source/images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/5.png","hash":"151710b3d8c33ddccbb8324760b19edc93fd6541","modified":1708933534862},{"_id":"source/images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/6.png","hash":"0ab48bf74290348c2bb014386197475ab49e4280","modified":1708933534862},{"_id":"source/images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/8.png","hash":"144887d976fc1090091e89595b885870fbc02a75","modified":1708933534862},{"_id":"source/images/Updatable-Learned-Index-with-Precise-Positions/3.jpg","hash":"fbd716899020cec998f3e2b9b21853a0e2d832c4","modified":1708933534878},{"_id":"source/images/Updatable-Learned-Index-with-Precise-Positions/6.jpg","hash":"a0c9a76b8baac8214317ebac930c761061f4ba60","modified":1708933534882},{"_id":"source/images/cmu15445-project0/1.png","hash":"b7eedbc83dc49bf32896edc0dc1587e99316b9a3","modified":1708933534882},{"_id":"source/images/cmu15445-project0/2.png","hash":"7ee915f8a2afab526bf0bbd15d7ddaa1919b2d33","modified":1708933534882},{"_id":"source/images/cmu15445-project0/3.png","hash":"c6c273a4faf4f06d98f2bb4837fa102b190a4e78","modified":1708933534882},{"_id":"source/images/ALEX-An-Updatable-Adaptive-Learned-Index/6.png","hash":"f448f7f106936ad99e3c33bb59a4ecb37f048ae5","modified":1708933534730},{"_id":"source/images/Bounding-the-Last-Mile-Efficient-Learned-String-Indexing/1.png","hash":"5a337b56119bf63b497554c0b5fa0fb3dffd3895","modified":1708933534730},{"_id":"source/images/DILI-A-Distribution-Driven-Learned-Index/2.png","hash":"0f0def69ebc7bd110d7af8b0ae21323a1f05a415","modified":1708933534794},{"_id":"source/images/FiTing-Tree-A-Data-aware-Index-Structure/1.png","hash":"664cda7fb1a33dc292038ad7d4694557cd6759ae","modified":1708933534810},{"_id":"source/images/FiTing-Tree-A-Data-aware-Index-Structure/4.png","hash":"d998619c9693e2b2922f5d3eb3b3842cc1acd981","modified":1708933534810},{"_id":"source/images/FiTing-Tree-A-Data-aware-Index-Structure/5.png","hash":"b495dabd59993dd0285da239a4418d4283c0e17b","modified":1708933534810},{"_id":"source/images/FiTing-Tree-A-Data-aware-Index-Structure/6.png","hash":"7323b17110a2a9878b4eb14956fca9a6b0a2a7be","modified":1708933534814},{"_id":"source/images/FiTing-Tree-A-Data-aware-Index-Structure/9.png","hash":"26a49e01407dab8e651862b3c71b1f23e34a99cb","modified":1708933534814},{"_id":"source/images/NFL-Robust-Learned-Index-via-Distribution-Transformation/11.jpg","hash":"f58ea7d50cbb7b0627d61797d94b7ad340023984","modified":1708933534830},{"_id":"source/images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/2.png","hash":"4ad787bb15eb0951c52c784747f0548e636a6d1b","modified":1708933534862},{"_id":"source/images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/3.png","hash":"6a5a178c8bafff8622f1f116ba99fa3153f8bad1","modified":1708933534862},{"_id":"source/images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/7.png","hash":"337847d9056205d457425761c75b952b327b0ab1","modified":1708933534862},{"_id":"source/images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/9.png","hash":"f15dfb1fe86e1af8224abdf5cb08609e1f8d0191","modified":1708933534866},{"_id":"source/images/Updatable-Learned-Index-with-Precise-Positions/1.jpg","hash":"968f755e9c05243cd67cdb3461b99027a6c8dbed","modified":1708933534878},{"_id":"source/images/cmu15445-project0/4.png","hash":"22437ef9730b4f7319b684cde0a1c59165f0418c","modified":1708946312103},{"_id":"source/images/cmu15445-project0/5.png","hash":"99e31b8c48f92231cc029cc0c00ee5aa291487b9","modified":1708946681945},{"_id":"source/images/ALEX-An-Updatable-Adaptive-Learned-Index/1.png","hash":"a7a967c2891774b71f4a0884d9b61223be40b98c","modified":1708933534722},{"_id":"source/images/ALEX-An-Updatable-Adaptive-Learned-Index/10.png","hash":"81dec94595523d862b2285f9d45be80c511446c3","modified":1708933534722},{"_id":"source/images/DILI-A-Distribution-Driven-Learned-Index/6.png","hash":"daa8c3e28afa63c183b173595a96ed1bdba685d4","modified":1708933534802},{"_id":"source/images/FiTing-Tree-A-Data-aware-Index-Structure/7.png","hash":"b6004647aeafed32a0f93675ff2e8b64ccdb1d9e","modified":1708933534814},{"_id":"source/images/NFL-Robust-Learned-Index-via-Distribution-Transformation/1.jpg","hash":"686049b5d208abe2047ed543cb8b70f119a83dd7","modified":1708933534818},{"_id":"source/images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/11.png","hash":"b58bfc3188937f65a1b098f22fb78e4046120099","modified":1708933534858},{"_id":"source/images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/4.png","hash":"c1c897c5ee9bcf1bcc95fb99bf105bcea6b6e40b","modified":1708933534862},{"_id":"source/images/DILI-A-Distribution-Driven-Learned-Index/3.png","hash":"6cd45007bf57e856a67bbf594accf942bdbf1b15","modified":1708933534798},{"_id":"source/images/FiTing-Tree-A-Data-aware-Index-Structure/8.png","hash":"923356497731921c6c37ba015fac8dd19c1e8c4f","modified":1708933534814},{"_id":"source/images/NFL-Robust-Learned-Index-via-Distribution-Transformation/12.jpg","hash":"4b5502554c64a27fcd9fb747084e7fba64de9415","modified":1708933534838},{"_id":"source/images/NFL-Robust-Learned-Index-via-Distribution-Transformation/4.png","hash":"280acbb0680bcc57dc6dbb77b97220846001ea94","modified":1708933534842},{"_id":"source/images/Updatable-Learned-Index-with-Precise-Positions/2.jpg","hash":"bd5b7b641fbf858670365a613c3e63b459e2951d","modified":1708933534878},{"_id":"source/images/Updatable-Learned-Index-with-Precise-Positions/5.jpg","hash":"510e134f25c1c2b0936e412056d851cda17614db","modified":1708933534882},{"_id":"source/images/DILI-A-Distribution-Driven-Learned-Index/5.png","hash":"07c77f778c08bc6b99cdce20eab2364d8964e733","modified":1708933534798},{"_id":"source/images/NFL-Robust-Learned-Index-via-Distribution-Transformation/3.jpg","hash":"2370b83a149fd86f9943ff6bb0974400fafaa4d4","modified":1708933534838},{"_id":"source/images/NFL-Robust-Learned-Index-via-Distribution-Transformation/5.jpg","hash":"29b831b4021cddbaa13ed20107ee658a3c2e07bd","modified":1708933534842},{"_id":"source/images/DILI-A-Distribution-Driven-Learned-Index/1.png","hash":"2f96a7ac74e9d2082120c6d8c64fd652750f7a40","modified":1708933534734},{"_id":"source/images/DILI-A-Distribution-Driven-Learned-Index/8.png","hash":"7ba56ec28366bd1112d0128a3c5a1a269cde95f7","modified":1708933534802},{"_id":"source/images/NFL-Robust-Learned-Index-via-Distribution-Transformation/6.jpg","hash":"a8dd492b94f8dc3d8f3ef2d13bee77ef8d4f4731","modified":1708933534846},{"_id":"source/images/ALEX-An-Updatable-Adaptive-Learned-Index/11.png","hash":"7cd936e05b77ee969eb5915490268b058faa93a6","modified":1708933534726},{"_id":"source/images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/10.png","hash":"261efa03e53dab595f39b5ae8f7afe940f0581b8","modified":1708933534858},{"_id":"source/images/DILI-A-Distribution-Driven-Learned-Index/4.png","hash":"eecf7134a2b3e11f5c53b4bc67c5ea1683c5ecc5","modified":1708933534798},{"_id":"source/images/NFL-Robust-Learned-Index-via-Distribution-Transformation/8.jpg","hash":"775e25f9d85b5972330a00ae3869d4a0103e60c0","modified":1708933534850},{"_id":"source/images/NFL-Robust-Learned-Index-via-Distribution-Transformation/7.jpg","hash":"be5ff7139fd20d2a391f29820e8fc0bed593c631","modified":1708933534846},{"_id":"source/images/DILI-A-Distribution-Driven-Learned-Index/9.png","hash":"33f6281c53a6cffa915536a48d7f3cfa1230a73f","modified":1708933534806},{"_id":"source/images/NFL-Robust-Learned-Index-via-Distribution-Transformation/10.jpg","hash":"385bee1c6f8ec81e12c874d575d1d84ad98f8a34","modified":1708933534826},{"_id":"source/images/NFL-Robust-Learned-Index-via-Distribution-Transformation/9.jpg","hash":"ec97eda831ba340c871e70c64e5eabf25e3b4ce5","modified":1708933534854},{"_id":"source/images/The-PGM-index-a-fully-dynamic-compressed-learned-index-with-provable-worst-case-bounds/2.png","hash":"2d5647fcdae048f64cc0b2e73e435f964acb9945","modified":1708933534878},{"_id":"source/images/The-PGM-index-a-fully-dynamic-compressed-learned-index-with-provable-worst-case-bounds/1.png","hash":"c3b4517555b913dd93c764e85f69ef9ca530e219","modified":1708933534874},{"_id":"source/images/DILI-A-Distribution-Driven-Learned-Index/10.png","hash":"ab27e7efab0431e026441b3bbf28b9930f328991","modified":1708933534762},{"_id":"source/images/DILI-A-Distribution-Driven-Learned-Index/11.png","hash":"35a332e784008e08e72c69cbec667bd202f73669","modified":1708933534770},{"_id":"source/images/DILI-A-Distribution-Driven-Learned-Index/12.png","hash":"560518abfc42184ed203c40ed57dde080045a35d","modified":1708933534782},{"_id":"source/images/DILI-A-Distribution-Driven-Learned-Index/13.png","hash":"bbb4211562e37a82d044627b75c9ea891f2be6d1","modified":1708933534794},{"_id":"public/2023/12/07/cmake-generator-error-under-windows-system/index.html","hash":"fd4e559774bffeed3e5f0465f692b168fe380be0","modified":1709019546197},{"_id":"public/2023/10/02/RadixSpline-A-Single-Pass-Learned-Index/index.html","hash":"a4b03a32086282ea8ec67811f4ae75b0871be5d8","modified":1709019546197},{"_id":"public/archives/page/4/index.html","hash":"07d4932f0e52cc381bc1b7b08bf03971f03d93ca","modified":1709019546197},{"_id":"public/archives/2023/page/4/index.html","hash":"7b0e61a07a95abf5997698ffb38456bf0e7f2178","modified":1709019546197},{"_id":"public/archives/2023/12/index.html","hash":"aed89131779ae1ab367ab7930a113d46fbf49d4d","modified":1709019546197},{"_id":"public/archives/2024/index.html","hash":"ec251742a05221ce429455c540526d98c58b2534","modified":1709019546197},{"_id":"public/archives/2024/02/index.html","hash":"fed7c2ba15ab9146fba782a2cba8b747605e3592","modified":1709019546197},{"_id":"public/categories/cmu15445-2023/index.html","hash":"097ec501a4ffb720cb17dff225ed491f5a9241e4","modified":1709019546197},{"_id":"public/tags/cmu15445—2023/index.html","hash":"df37d7af5049214abeb4eecebff0b6307320d54b","modified":1709019546197},{"_id":"public/2024/02/22/cmu15445-project0/index.html","hash":"7649b23ff6ed1221756efc462df942c606453367","modified":1709019546197},{"_id":"public/2023/12/28/DILI-A-Distribution-Driven-Learned-Index/index.html","hash":"d0ff71b16407d258d5d3d581cbac0d709103d3cb","modified":1709019546197},{"_id":"public/2023/12/05/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/index.html","hash":"8c2e2bd370adddb06f7b28e9da68b270a21a3b95","modified":1709019546197},{"_id":"public/2023/12/05/NFL-Robust-Learned-Index-via-Distribution-Transformation/index.html","hash":"92a20856f187a9fa3210f61ef3d3558159de2fc5","modified":1709019546197},{"_id":"public/2023/10/10/Updatable-Learned-Index-with-Precise-Positions/index.html","hash":"59b9bc30e9df7a62f0b802e77137e52fd6aeb4d8","modified":1709019546197},{"_id":"public/2023/10/10/Bounding-the-Last-Mile-Efficient-Learned-String-Indexing/index.html","hash":"40cf059ef3c147976093ed8ccbed744e5c41c77b","modified":1709019546197},{"_id":"public/2023/10/05/The-PGM-index-a-fully-dynamic-compressed-learned-index-with-provable-worst-case-bounds/index.html","hash":"19c9d6e54462915b316ef734068a35d4b477e2e8","modified":1709019546197},{"_id":"public/2023/10/03/FiTing-Tree-A-Data-aware-Index-Structure/index.html","hash":"86eca7f11eeb179c052a278393c467b35dde9b9c","modified":1709019546197},{"_id":"public/page/4/index.html","hash":"d5414e8a21f984dcbc7e07191efcd0f30f162186","modified":1709019546197},{"_id":"public/images/ALEX-An-Updatable-Adaptive-Learned-Index/3.png","hash":"2d4876c2eccd02ec7ea3ac810e96d9a818d7c75a","modified":1708948156726},{"_id":"public/images/ALEX-An-Updatable-Adaptive-Learned-Index/4.png","hash":"1064422ec436c68853b2b416b6e6b3e1abccb2f3","modified":1708948156726},{"_id":"public/images/ALEX-An-Updatable-Adaptive-Learned-Index/5.png","hash":"716eecf5cf2f2ce587f9edf2200273c47a89be03","modified":1708948156726},{"_id":"public/images/ALEX-An-Updatable-Adaptive-Learned-Index/7.png","hash":"81df530f67d90de975c4f0ab8d893914d3a07381","modified":1708948156726},{"_id":"public/images/ALEX-An-Updatable-Adaptive-Learned-Index/8.png","hash":"085f5639b2c840e748862c61e9f5588a349199af","modified":1708948156726},{"_id":"public/images/ALEX-An-Updatable-Adaptive-Learned-Index/9.png","hash":"4bcab7eb17fcdc875145f1e42eb204a50c82f5fb","modified":1708948156726},{"_id":"public/images/FiTing-Tree-A-Data-aware-Index-Structure/11.png","hash":"2187e565df658a1bf87e1d6d0ccb74262073979b","modified":1708948156726},{"_id":"public/images/FiTing-Tree-A-Data-aware-Index-Structure/12.png","hash":"3b447580a20d3d60ddc1b60f70425f82edabe8a9","modified":1708948156726},{"_id":"public/images/FiTing-Tree-A-Data-aware-Index-Structure/13.png","hash":"c41db71fbb3c6c078c4f499b24706c31843c36c3","modified":1708948156726},{"_id":"public/images/FiTing-Tree-A-Data-aware-Index-Structure/2.png","hash":"20c637c61cf946783bbf3d5119b766d3a5e0bf48","modified":1708948156726},{"_id":"public/images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/12.png","hash":"1cd179977311bd04c31b115711de7adb59875a54","modified":1708948156726},{"_id":"public/images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/13.png","hash":"88e220c5bdbdb051fadeb6e491c3ec895e6109a7","modified":1708948156726},{"_id":"public/images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/14.png","hash":"b7e8a485f6dd1e4bf0eeff6bd5aed6a9e485ace0","modified":1708948156726},{"_id":"public/images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/15.png","hash":"1d645ae9e32928728cd710be3af93b1d0aef67dc","modified":1708948156726},{"_id":"public/images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/16.png","hash":"eb8b7328a15b0c1c185cee09cdda1744ac2b780b","modified":1708948156726},{"_id":"public/images/Updatable-Learned-Index-with-Precise-Positions/4.jpg","hash":"fa3cbf62c209b40c91978ae1131ed7e09af4b6fa","modified":1708948156726},{"_id":"public/images/ALEX-An-Updatable-Adaptive-Learned-Index/2.png","hash":"75a59dcb296136bf5929761945bd29038e8500f1","modified":1708948156726},{"_id":"public/images/Bounding-the-Last-Mile-Efficient-Learned-String-Indexing/2.png","hash":"de76d6c4a9d15c768fb0fca3f6d3c9db54642ee5","modified":1708948156726},{"_id":"public/images/DILI-A-Distribution-Driven-Learned-Index/7.png","hash":"c7cfd279ca15a8c999036757e977d24ecae0f5e9","modified":1708948156726},{"_id":"public/images/FiTing-Tree-A-Data-aware-Index-Structure/10.png","hash":"8626a046647ed2182efb7f6bbd2d8ab414ab129e","modified":1708948156726},{"_id":"public/images/FiTing-Tree-A-Data-aware-Index-Structure/3.png","hash":"05e4c608a98a094af2b86404c4ca3dae1c513667","modified":1708948156726},{"_id":"public/images/NFL-Robust-Learned-Index-via-Distribution-Transformation/2.jpg","hash":"f1f5432d7bb8e7cb774700767b7450dbc80d75ff","modified":1708948156726},{"_id":"public/images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/1.png","hash":"ab749a526748e28d16dfa2f7c6480021b75a2790","modified":1708948156726},{"_id":"public/images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/5.png","hash":"151710b3d8c33ddccbb8324760b19edc93fd6541","modified":1708948156726},{"_id":"public/images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/6.png","hash":"0ab48bf74290348c2bb014386197475ab49e4280","modified":1708948156726},{"_id":"public/images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/8.png","hash":"144887d976fc1090091e89595b885870fbc02a75","modified":1708948156726},{"_id":"public/images/Updatable-Learned-Index-with-Precise-Positions/3.jpg","hash":"fbd716899020cec998f3e2b9b21853a0e2d832c4","modified":1708948156726},{"_id":"public/images/Updatable-Learned-Index-with-Precise-Positions/6.jpg","hash":"a0c9a76b8baac8214317ebac930c761061f4ba60","modified":1708948156726},{"_id":"public/images/cmu15445-project0/1.png","hash":"b7eedbc83dc49bf32896edc0dc1587e99316b9a3","modified":1708948156726},{"_id":"public/images/cmu15445-project0/2.png","hash":"7ee915f8a2afab526bf0bbd15d7ddaa1919b2d33","modified":1708948156726},{"_id":"public/images/cmu15445-project0/3.png","hash":"c6c273a4faf4f06d98f2bb4837fa102b190a4e78","modified":1708948156726},{"_id":"public/images/ALEX-An-Updatable-Adaptive-Learned-Index/6.png","hash":"f448f7f106936ad99e3c33bb59a4ecb37f048ae5","modified":1708948156726},{"_id":"public/images/Bounding-the-Last-Mile-Efficient-Learned-String-Indexing/1.png","hash":"5a337b56119bf63b497554c0b5fa0fb3dffd3895","modified":1708948156726},{"_id":"public/images/DILI-A-Distribution-Driven-Learned-Index/2.png","hash":"0f0def69ebc7bd110d7af8b0ae21323a1f05a415","modified":1708948156726},{"_id":"public/images/FiTing-Tree-A-Data-aware-Index-Structure/1.png","hash":"664cda7fb1a33dc292038ad7d4694557cd6759ae","modified":1708948156726},{"_id":"public/images/FiTing-Tree-A-Data-aware-Index-Structure/4.png","hash":"d998619c9693e2b2922f5d3eb3b3842cc1acd981","modified":1708948156726},{"_id":"public/images/FiTing-Tree-A-Data-aware-Index-Structure/5.png","hash":"b495dabd59993dd0285da239a4418d4283c0e17b","modified":1708948156726},{"_id":"public/images/FiTing-Tree-A-Data-aware-Index-Structure/6.png","hash":"7323b17110a2a9878b4eb14956fca9a6b0a2a7be","modified":1708948156726},{"_id":"public/images/FiTing-Tree-A-Data-aware-Index-Structure/9.png","hash":"26a49e01407dab8e651862b3c71b1f23e34a99cb","modified":1708948156726},{"_id":"public/images/NFL-Robust-Learned-Index-via-Distribution-Transformation/11.jpg","hash":"f58ea7d50cbb7b0627d61797d94b7ad340023984","modified":1708948156726},{"_id":"public/images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/2.png","hash":"4ad787bb15eb0951c52c784747f0548e636a6d1b","modified":1708948156726},{"_id":"public/images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/3.png","hash":"6a5a178c8bafff8622f1f116ba99fa3153f8bad1","modified":1708948156726},{"_id":"public/images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/7.png","hash":"337847d9056205d457425761c75b952b327b0ab1","modified":1708948156726},{"_id":"public/images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/9.png","hash":"f15dfb1fe86e1af8224abdf5cb08609e1f8d0191","modified":1708948156726},{"_id":"public/images/Updatable-Learned-Index-with-Precise-Positions/1.jpg","hash":"968f755e9c05243cd67cdb3461b99027a6c8dbed","modified":1708948156726},{"_id":"public/images/cmu15445-project0/4.png","hash":"22437ef9730b4f7319b684cde0a1c59165f0418c","modified":1708948156726},{"_id":"public/images/cmu15445-project0/5.png","hash":"99e31b8c48f92231cc029cc0c00ee5aa291487b9","modified":1708948156726},{"_id":"public/images/ALEX-An-Updatable-Adaptive-Learned-Index/1.png","hash":"a7a967c2891774b71f4a0884d9b61223be40b98c","modified":1708948156726},{"_id":"public/images/ALEX-An-Updatable-Adaptive-Learned-Index/10.png","hash":"81dec94595523d862b2285f9d45be80c511446c3","modified":1708948156726},{"_id":"public/images/DILI-A-Distribution-Driven-Learned-Index/6.png","hash":"daa8c3e28afa63c183b173595a96ed1bdba685d4","modified":1708948156726},{"_id":"public/images/FiTing-Tree-A-Data-aware-Index-Structure/7.png","hash":"b6004647aeafed32a0f93675ff2e8b64ccdb1d9e","modified":1708948156726},{"_id":"public/images/NFL-Robust-Learned-Index-via-Distribution-Transformation/1.jpg","hash":"686049b5d208abe2047ed543cb8b70f119a83dd7","modified":1708948156726},{"_id":"public/images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/11.png","hash":"b58bfc3188937f65a1b098f22fb78e4046120099","modified":1708948156726},{"_id":"public/images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/4.png","hash":"c1c897c5ee9bcf1bcc95fb99bf105bcea6b6e40b","modified":1708948156726},{"_id":"public/images/DILI-A-Distribution-Driven-Learned-Index/3.png","hash":"6cd45007bf57e856a67bbf594accf942bdbf1b15","modified":1708948156726},{"_id":"public/images/FiTing-Tree-A-Data-aware-Index-Structure/8.png","hash":"923356497731921c6c37ba015fac8dd19c1e8c4f","modified":1708948156726},{"_id":"public/images/NFL-Robust-Learned-Index-via-Distribution-Transformation/12.jpg","hash":"4b5502554c64a27fcd9fb747084e7fba64de9415","modified":1708948156726},{"_id":"public/images/NFL-Robust-Learned-Index-via-Distribution-Transformation/4.png","hash":"280acbb0680bcc57dc6dbb77b97220846001ea94","modified":1708948156726},{"_id":"public/images/Updatable-Learned-Index-with-Precise-Positions/2.jpg","hash":"bd5b7b641fbf858670365a613c3e63b459e2951d","modified":1708948156726},{"_id":"public/images/Updatable-Learned-Index-with-Precise-Positions/5.jpg","hash":"510e134f25c1c2b0936e412056d851cda17614db","modified":1708948156726},{"_id":"public/images/DILI-A-Distribution-Driven-Learned-Index/5.png","hash":"07c77f778c08bc6b99cdce20eab2364d8964e733","modified":1708948156726},{"_id":"public/images/NFL-Robust-Learned-Index-via-Distribution-Transformation/3.jpg","hash":"2370b83a149fd86f9943ff6bb0974400fafaa4d4","modified":1708948156726},{"_id":"public/images/NFL-Robust-Learned-Index-via-Distribution-Transformation/5.jpg","hash":"29b831b4021cddbaa13ed20107ee658a3c2e07bd","modified":1708948156726},{"_id":"public/images/ALEX-An-Updatable-Adaptive-Learned-Index/11.png","hash":"7cd936e05b77ee969eb5915490268b058faa93a6","modified":1708948156726},{"_id":"public/images/DILI-A-Distribution-Driven-Learned-Index/1.png","hash":"2f96a7ac74e9d2082120c6d8c64fd652750f7a40","modified":1708948156726},{"_id":"public/images/DILI-A-Distribution-Driven-Learned-Index/8.png","hash":"7ba56ec28366bd1112d0128a3c5a1a269cde95f7","modified":1708948156726},{"_id":"public/images/NFL-Robust-Learned-Index-via-Distribution-Transformation/6.jpg","hash":"a8dd492b94f8dc3d8f3ef2d13bee77ef8d4f4731","modified":1708948156726},{"_id":"public/images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/10.png","hash":"261efa03e53dab595f39b5ae8f7afe940f0581b8","modified":1708948156726},{"_id":"public/images/DILI-A-Distribution-Driven-Learned-Index/4.png","hash":"eecf7134a2b3e11f5c53b4bc67c5ea1683c5ecc5","modified":1708948156726},{"_id":"public/images/NFL-Robust-Learned-Index-via-Distribution-Transformation/7.jpg","hash":"be5ff7139fd20d2a391f29820e8fc0bed593c631","modified":1708948156726},{"_id":"public/images/NFL-Robust-Learned-Index-via-Distribution-Transformation/8.jpg","hash":"775e25f9d85b5972330a00ae3869d4a0103e60c0","modified":1708948156726},{"_id":"public/images/DILI-A-Distribution-Driven-Learned-Index/9.png","hash":"33f6281c53a6cffa915536a48d7f3cfa1230a73f","modified":1708948156726},{"_id":"public/images/NFL-Robust-Learned-Index-via-Distribution-Transformation/10.jpg","hash":"385bee1c6f8ec81e12c874d575d1d84ad98f8a34","modified":1708948156726},{"_id":"public/images/NFL-Robust-Learned-Index-via-Distribution-Transformation/9.jpg","hash":"ec97eda831ba340c871e70c64e5eabf25e3b4ce5","modified":1708948156726},{"_id":"public/images/The-PGM-index-a-fully-dynamic-compressed-learned-index-with-provable-worst-case-bounds/2.png","hash":"2d5647fcdae048f64cc0b2e73e435f964acb9945","modified":1708948156726},{"_id":"public/images/The-PGM-index-a-fully-dynamic-compressed-learned-index-with-provable-worst-case-bounds/1.png","hash":"c3b4517555b913dd93c764e85f69ef9ca530e219","modified":1708948156726},{"_id":"public/images/DILI-A-Distribution-Driven-Learned-Index/10.png","hash":"ab27e7efab0431e026441b3bbf28b9930f328991","modified":1708948156726},{"_id":"public/images/DILI-A-Distribution-Driven-Learned-Index/11.png","hash":"35a332e784008e08e72c69cbec667bd202f73669","modified":1708948156726},{"_id":"public/images/DILI-A-Distribution-Driven-Learned-Index/12.png","hash":"560518abfc42184ed203c40ed57dde080045a35d","modified":1708948156726},{"_id":"public/images/DILI-A-Distribution-Driven-Learned-Index/13.png","hash":"bbb4211562e37a82d044627b75c9ea891f2be6d1","modified":1708948156726},{"_id":"source/_posts/cmu15445-project1.md","hash":"1365dd49cef5c9fef506387e611f4b76ec07c12d","modified":1709011737544},{"_id":"source/images/cmu15445-project1/1.png","hash":"35fc36f622f25d2585661fa6b08b73b6fc2908c9","modified":1708950316326},{"_id":"source/images/cmu15445-project1/2.png","hash":"d279ccc64161be1e595203b733b226161304c930","modified":1708950629534},{"_id":"source/images/cmu15445-project1/7.png","hash":"04f2436e9e7a7f05718dcbff0f8141cfea4f8645","modified":1709011687839},{"_id":"source/images/cmu15445-project1/5.png","hash":"48b7fd75714ad933493080d32bc1f08f262e43c6","modified":1709001465446},{"_id":"source/images/cmu15445-project1/3.png","hash":"28dfc470d706983bece616e41311178cfdc3e10c","modified":1708950899980},{"_id":"source/images/cmu15445-project1/6.png","hash":"faa9079cfc7e100eed37a8591a93f9bd923fcd0c","modified":1709007502890},{"_id":"source/images/cmu15445-project1/4.png","hash":"ffb3d9ba463da39dab1f0c3b93dcb45832f30e77","modified":1708952242950},{"_id":"public/2024/02/26/cmu15445-project1/index.html","hash":"e0fed85e80046aa1af657a777cc02a481780c603","modified":1709019546197},{"_id":"public/images/cmu15445-project1/1.png","hash":"35fc36f622f25d2585661fa6b08b73b6fc2908c9","modified":1709011771210},{"_id":"public/images/cmu15445-project1/2.png","hash":"d279ccc64161be1e595203b733b226161304c930","modified":1709011771210},{"_id":"public/images/cmu15445-project1/3.png","hash":"28dfc470d706983bece616e41311178cfdc3e10c","modified":1709011771210},{"_id":"public/images/cmu15445-project1/5.png","hash":"48b7fd75714ad933493080d32bc1f08f262e43c6","modified":1709011771210},{"_id":"public/images/cmu15445-project1/7.png","hash":"04f2436e9e7a7f05718dcbff0f8141cfea4f8645","modified":1709011771210},{"_id":"public/images/cmu15445-project1/4.png","hash":"ffb3d9ba463da39dab1f0c3b93dcb45832f30e77","modified":1709011771210},{"_id":"public/images/cmu15445-project1/6.png","hash":"faa9079cfc7e100eed37a8591a93f9bd923fcd0c","modified":1709011771210},{"_id":"source/_posts/cmu15445-project2.md","hash":"ab28045b923fb752403b1dbbf8c170bcad5eb610","modified":1709019530204},{"_id":"source/images/cmu15445-project2/1.png","hash":"2ac7d2cda3f6dfa015521246f21de93f726a85a3","modified":1709015100762},{"_id":"source/images/cmu15445-project2/3.png","hash":"962cfe68795cdb95837385789484562d933356f9","modified":1709016586547},{"_id":"source/images/cmu15445-project2/2.png","hash":"3f1d81964911ba0b0b937ec611cc14b0b882d5fe","modified":1709016206473},{"_id":"public/2024/02/26/cmu15445-project2/index.html","hash":"f22d6ae5733db11543e62ef382b78858dc670358","modified":1709019546197},{"_id":"public/images/cmu15445-project2/1.png","hash":"2ac7d2cda3f6dfa015521246f21de93f726a85a3","modified":1709019546197},{"_id":"public/images/cmu15445-project2/3.png","hash":"962cfe68795cdb95837385789484562d933356f9","modified":1709019546197},{"_id":"public/images/cmu15445-project2/2.png","hash":"3f1d81964911ba0b0b937ec611cc14b0b882d5fe","modified":1709019546197}],"Category":[{"name":"数据库","_id":"cln6ws35d00045gi576jbbdc2"},{"name":"cmake","_id":"cln6ws365001h5gi5evly8fye"},{"name":"随笔","_id":"cln6ws36h001r5gi5a51yhi59"},{"name":"Linux","_id":"cln6ws36j00205gi5f9c315bg"},{"name":"Learned Index","_id":"cln88vsed0001zqi557thdvri"},{"name":"cmu15445-2023","_id":"clt2vlxys000o4ijxcpysete2"}],"Data":[],"Page":[{"title":"about","date":"2023-05-28T01:03:50.000Z","type":"about","comments":0,"_content":"\n***\n[<center>github地址</center>](https://github.com/jingtao8a)\n***\n[<center>gitee地址</center>](https://gitee.com/jingtao8a)\n***","source":"about/index.md","raw":"---\ntitle: about\ndate: 2023-05-27 21:03:50\ntype: \"about\"\ncomments: false\n---\n\n***\n[<center>github地址</center>](https://github.com/jingtao8a)\n***\n[<center>gitee地址</center>](https://gitee.com/jingtao8a)\n***","updated":"2023-10-01T04:24:07.774Z","path":"about/index.html","_id":"cln6ws35400005gi51gw2657b","layout":"page","content":"<hr>\n<p><a href=\"https://github.com/jingtao8a\"><center>github地址</center></a></p>\n<hr>\n<p><a href=\"https://gitee.com/jingtao8a\"><center>gitee地址</center></a></p>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<p><a href=\"https://github.com/jingtao8a\"><center>github地址</center></a></p>\n<hr>\n<p><a href=\"https://gitee.com/jingtao8a\"><center>gitee地址</center></a></p>\n<hr>\n"},{"title":"archives","date":"2023-05-28T01:43:41.000Z","type":"tags","comments":0,"_content":"","source":"archives/index.md","raw":"---\ntitle: archives\ndate: 2023-05-27 21:43:41\ntype: \"tags\"\ncomments: false\n---\n","updated":"2023-10-01T02:55:45.143Z","path":"archives/index.html","layout":"page","_id":"cln6ws35b00025gi5dojw51dk","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2023-05-28T01:03:31.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2023-05-27 21:03:31\ntype: \"categories\"\ncomments: false\n---\n","updated":"2023-10-01T02:55:45.147Z","path":"categories/index.html","layout":"page","_id":"cln6ws35f00065gi51ce9cbe8","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2023-05-28T01:03:37.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2023-05-27 21:03:37\ntype: \"tags\"\ncomments: false\n---\n","updated":"2023-10-01T02:55:45.147Z","path":"tags/index.html","layout":"page","_id":"cln6ws35g00085gi59ti55loa","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"1.启动选项","date":"2023-05-27T18:11:32.000Z","_content":"\n>在MySQL安装目录下的bin目录中的各种可执行文件，不论是服务器相关的程序（比如mysqld、mysqld_safe）还是客户端相关的程序（比如mysql、mysqladmin），在启动的时候基本都可以指定启动参数。这些启动参数可以放在命令行中指定，也可以把它们放在配置文件中指定。\n\n```\nmysqld --skip-networking 禁止客户端使用TCP/IP网络进行通信\nmysqld --default-storage-engine=MyISAM 指定服务端的存储引擎'\n```\n```\nmysql -h -u -p 客户端\n```\n\n### 配置文件\n>MySQL程序在启动时会寻找多个路径下的配置文件，这些路径有的是固定的，有的是可以在命令行指定的。根据操作系统的不同，配置文件的路径也有所不同。\n\n![本地图片](images/1_1.jpg)\n\n- %WINDIR%是机器上的Windows目录，通常是C:\\WINDOWS，可以使用echo %WINDIR%查看\n\n- BASEDIR指的是MySQL安装目录\n- 第四个路径指的是我们在启动程序时可以通过指定default-extra-file参数来额外配置文件路径\n```\nmysqld --defaults-extra-file=C:\\Users\\xiaohaizi\\my_extra_file.txt\n```\n\n![本地图片](images/1_2.jpg)\n\n- MYSQL_HOME是一个环境变量，该变量的值是我们自己设置的，我们想设置就设置，不想设置就不设置。该变量的值代表一个路径，我们可以在该路径下创建一个my.cnf配置文件，那么这个配置文件中只能放置关于启动服务器程序相关的选项（言外之意就是其他的配置文件既能存放服务器相关的选项也能存放客户端相关的选项，.mylogin.cnf除外，它只能存放客户端相关的一些选项）\n- defaults-extra-file的含义与Windows中的一样。\n**在mysqld_safe调用mysqld时，会把它处理不了的这个skip-networking选项交给mysqld处理。**\n\n### 配置文件的内容\n[server]\n(具体的启动选项...)\n\n[mysqld]\n(具体的启动选项...)\n\n[mysqld_safe]\n(具体的启动选项...)\n\n[client]\n(具体的启动选项...)\n\n[mysql]\n(具体的启动选项...)\n\n[mysqladmin]\n(具体的启动选项...)\n\n![本地图片](images/1_3.jpg)\n不同的启动命令读取配置文件的不同的组\n\n\n\n### 配置文件的优先级\n如果我们在多个配置文件中设置了相同的启动选项，那以最后一个配置文件中的为准\n\n### 同一个配置文件中多个组的优先级\n比如mysqld命令启动服务端程序，可以访问配置文件中的[mysqld]、[server]等，那么将以最后一个出现的组中的启动选项为准\n\n### default-file使用\n 如果我们不想让MySQL到默认的路径下搜索配置文件（就是上表中列出的那些），可以在命令行指定defaults-file选项，比如这样（以UNIX系统为例）：\n```\nmysqld --defaults-file=/tmp/myconfig.txt\n```\n**如果同一个启动选项既出现在配置文件中，又出现在命令行中，以命令行为准**\n\n\n\n\n","source":"_posts/1-启动选项.md","raw":"---\ntitle: 1.启动选项\ndate: 2023-05-27 14:11:32\ntags: [MySQL, MySQL是怎样运行的]\ncategories: 数据库\n---\n\n>在MySQL安装目录下的bin目录中的各种可执行文件，不论是服务器相关的程序（比如mysqld、mysqld_safe）还是客户端相关的程序（比如mysql、mysqladmin），在启动的时候基本都可以指定启动参数。这些启动参数可以放在命令行中指定，也可以把它们放在配置文件中指定。\n\n```\nmysqld --skip-networking 禁止客户端使用TCP/IP网络进行通信\nmysqld --default-storage-engine=MyISAM 指定服务端的存储引擎'\n```\n```\nmysql -h -u -p 客户端\n```\n\n### 配置文件\n>MySQL程序在启动时会寻找多个路径下的配置文件，这些路径有的是固定的，有的是可以在命令行指定的。根据操作系统的不同，配置文件的路径也有所不同。\n\n![本地图片](images/1_1.jpg)\n\n- %WINDIR%是机器上的Windows目录，通常是C:\\WINDOWS，可以使用echo %WINDIR%查看\n\n- BASEDIR指的是MySQL安装目录\n- 第四个路径指的是我们在启动程序时可以通过指定default-extra-file参数来额外配置文件路径\n```\nmysqld --defaults-extra-file=C:\\Users\\xiaohaizi\\my_extra_file.txt\n```\n\n![本地图片](images/1_2.jpg)\n\n- MYSQL_HOME是一个环境变量，该变量的值是我们自己设置的，我们想设置就设置，不想设置就不设置。该变量的值代表一个路径，我们可以在该路径下创建一个my.cnf配置文件，那么这个配置文件中只能放置关于启动服务器程序相关的选项（言外之意就是其他的配置文件既能存放服务器相关的选项也能存放客户端相关的选项，.mylogin.cnf除外，它只能存放客户端相关的一些选项）\n- defaults-extra-file的含义与Windows中的一样。\n**在mysqld_safe调用mysqld时，会把它处理不了的这个skip-networking选项交给mysqld处理。**\n\n### 配置文件的内容\n[server]\n(具体的启动选项...)\n\n[mysqld]\n(具体的启动选项...)\n\n[mysqld_safe]\n(具体的启动选项...)\n\n[client]\n(具体的启动选项...)\n\n[mysql]\n(具体的启动选项...)\n\n[mysqladmin]\n(具体的启动选项...)\n\n![本地图片](images/1_3.jpg)\n不同的启动命令读取配置文件的不同的组\n\n\n\n### 配置文件的优先级\n如果我们在多个配置文件中设置了相同的启动选项，那以最后一个配置文件中的为准\n\n### 同一个配置文件中多个组的优先级\n比如mysqld命令启动服务端程序，可以访问配置文件中的[mysqld]、[server]等，那么将以最后一个出现的组中的启动选项为准\n\n### default-file使用\n 如果我们不想让MySQL到默认的路径下搜索配置文件（就是上表中列出的那些），可以在命令行指定defaults-file选项，比如这样（以UNIX系统为例）：\n```\nmysqld --defaults-file=/tmp/myconfig.txt\n```\n**如果同一个启动选项既出现在配置文件中，又出现在命令行中，以命令行为准**\n\n\n\n\n","slug":"1-启动选项","published":1,"updated":"2023-10-01T02:55:45.143Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cln6ws35600015gi54uq65v06","content":"<blockquote>\n<p>在MySQL安装目录下的bin目录中的各种可执行文件，不论是服务器相关的程序（比如mysqld、mysqld_safe）还是客户端相关的程序（比如mysql、mysqladmin），在启动的时候基本都可以指定启动参数。这些启动参数可以放在命令行中指定，也可以把它们放在配置文件中指定。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqld --skip-networking 禁止客户端使用TCP/IP网络进行通信</span><br><span class=\"line\">mysqld --default-storage-engine=MyISAM 指定服务端的存储引擎&#x27;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -h -u -p 客户端</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><blockquote>\n<p>MySQL程序在启动时会寻找多个路径下的配置文件，这些路径有的是固定的，有的是可以在命令行指定的。根据操作系统的不同，配置文件的路径也有所不同。</p>\n</blockquote>\n<p><img src=\"/images/1_1.jpg\" alt=\"本地图片\"></p>\n<ul>\n<li><p>%WINDIR%是机器上的Windows目录，通常是C:\\WINDOWS，可以使用echo %WINDIR%查看</p>\n</li>\n<li><p>BASEDIR指的是MySQL安装目录</p>\n</li>\n<li><p>第四个路径指的是我们在启动程序时可以通过指定default-extra-file参数来额外配置文件路径</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqld --defaults-extra-file=C:\\Users\\xiaohaizi\\my_extra_file.txt</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><img src=\"/images/1_2.jpg\" alt=\"本地图片\"></p>\n<ul>\n<li>MYSQL_HOME是一个环境变量，该变量的值是我们自己设置的，我们想设置就设置，不想设置就不设置。该变量的值代表一个路径，我们可以在该路径下创建一个my.cnf配置文件，那么这个配置文件中只能放置关于启动服务器程序相关的选项（言外之意就是其他的配置文件既能存放服务器相关的选项也能存放客户端相关的选项，.mylogin.cnf除外，它只能存放客户端相关的一些选项）</li>\n<li>defaults-extra-file的含义与Windows中的一样。<br><strong>在mysqld_safe调用mysqld时，会把它处理不了的这个skip-networking选项交给mysqld处理。</strong></li>\n</ul>\n<h3 id=\"配置文件的内容\"><a href=\"#配置文件的内容\" class=\"headerlink\" title=\"配置文件的内容\"></a>配置文件的内容</h3><p>[server]<br>(具体的启动选项…)</p>\n<p>[mysqld]<br>(具体的启动选项…)</p>\n<p>[mysqld_safe]<br>(具体的启动选项…)</p>\n<p>[client]<br>(具体的启动选项…)</p>\n<p>[mysql]<br>(具体的启动选项…)</p>\n<p>[mysqladmin]<br>(具体的启动选项…)</p>\n<p><img src=\"/images/1_3.jpg\" alt=\"本地图片\"><br>不同的启动命令读取配置文件的不同的组</p>\n<h3 id=\"配置文件的优先级\"><a href=\"#配置文件的优先级\" class=\"headerlink\" title=\"配置文件的优先级\"></a>配置文件的优先级</h3><p>如果我们在多个配置文件中设置了相同的启动选项，那以最后一个配置文件中的为准</p>\n<h3 id=\"同一个配置文件中多个组的优先级\"><a href=\"#同一个配置文件中多个组的优先级\" class=\"headerlink\" title=\"同一个配置文件中多个组的优先级\"></a>同一个配置文件中多个组的优先级</h3><p>比如mysqld命令启动服务端程序，可以访问配置文件中的[mysqld]、[server]等，那么将以最后一个出现的组中的启动选项为准</p>\n<h3 id=\"default-file使用\"><a href=\"#default-file使用\" class=\"headerlink\" title=\"default-file使用\"></a>default-file使用</h3><p> 如果我们不想让MySQL到默认的路径下搜索配置文件（就是上表中列出的那些），可以在命令行指定defaults-file选项，比如这样（以UNIX系统为例）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqld --defaults-file=/tmp/myconfig.txt</span><br></pre></td></tr></table></figure>\n<p><strong>如果同一个启动选项既出现在配置文件中，又出现在命令行中，以命令行为准</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>在MySQL安装目录下的bin目录中的各种可执行文件，不论是服务器相关的程序（比如mysqld、mysqld_safe）还是客户端相关的程序（比如mysql、mysqladmin），在启动的时候基本都可以指定启动参数。这些启动参数可以放在命令行中指定，也可以把它们放在配置文件中指定。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqld --skip-networking 禁止客户端使用TCP/IP网络进行通信</span><br><span class=\"line\">mysqld --default-storage-engine=MyISAM 指定服务端的存储引擎&#x27;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -h -u -p 客户端</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><blockquote>\n<p>MySQL程序在启动时会寻找多个路径下的配置文件，这些路径有的是固定的，有的是可以在命令行指定的。根据操作系统的不同，配置文件的路径也有所不同。</p>\n</blockquote>\n<p><img src=\"/images/1_1.jpg\" alt=\"本地图片\"></p>\n<ul>\n<li><p>%WINDIR%是机器上的Windows目录，通常是C:\\WINDOWS，可以使用echo %WINDIR%查看</p>\n</li>\n<li><p>BASEDIR指的是MySQL安装目录</p>\n</li>\n<li><p>第四个路径指的是我们在启动程序时可以通过指定default-extra-file参数来额外配置文件路径</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqld --defaults-extra-file=C:\\Users\\xiaohaizi\\my_extra_file.txt</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><img src=\"/images/1_2.jpg\" alt=\"本地图片\"></p>\n<ul>\n<li>MYSQL_HOME是一个环境变量，该变量的值是我们自己设置的，我们想设置就设置，不想设置就不设置。该变量的值代表一个路径，我们可以在该路径下创建一个my.cnf配置文件，那么这个配置文件中只能放置关于启动服务器程序相关的选项（言外之意就是其他的配置文件既能存放服务器相关的选项也能存放客户端相关的选项，.mylogin.cnf除外，它只能存放客户端相关的一些选项）</li>\n<li>defaults-extra-file的含义与Windows中的一样。<br><strong>在mysqld_safe调用mysqld时，会把它处理不了的这个skip-networking选项交给mysqld处理。</strong></li>\n</ul>\n<h3 id=\"配置文件的内容\"><a href=\"#配置文件的内容\" class=\"headerlink\" title=\"配置文件的内容\"></a>配置文件的内容</h3><p>[server]<br>(具体的启动选项…)</p>\n<p>[mysqld]<br>(具体的启动选项…)</p>\n<p>[mysqld_safe]<br>(具体的启动选项…)</p>\n<p>[client]<br>(具体的启动选项…)</p>\n<p>[mysql]<br>(具体的启动选项…)</p>\n<p>[mysqladmin]<br>(具体的启动选项…)</p>\n<p><img src=\"/images/1_3.jpg\" alt=\"本地图片\"><br>不同的启动命令读取配置文件的不同的组</p>\n<h3 id=\"配置文件的优先级\"><a href=\"#配置文件的优先级\" class=\"headerlink\" title=\"配置文件的优先级\"></a>配置文件的优先级</h3><p>如果我们在多个配置文件中设置了相同的启动选项，那以最后一个配置文件中的为准</p>\n<h3 id=\"同一个配置文件中多个组的优先级\"><a href=\"#同一个配置文件中多个组的优先级\" class=\"headerlink\" title=\"同一个配置文件中多个组的优先级\"></a>同一个配置文件中多个组的优先级</h3><p>比如mysqld命令启动服务端程序，可以访问配置文件中的[mysqld]、[server]等，那么将以最后一个出现的组中的启动选项为准</p>\n<h3 id=\"default-file使用\"><a href=\"#default-file使用\" class=\"headerlink\" title=\"default-file使用\"></a>default-file使用</h3><p> 如果我们不想让MySQL到默认的路径下搜索配置文件（就是上表中列出的那些），可以在命令行指定defaults-file选项，比如这样（以UNIX系统为例）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqld --defaults-file=/tmp/myconfig.txt</span><br></pre></td></tr></table></figure>\n<p><strong>如果同一个启动选项既出现在配置文件中，又出现在命令行中，以命令行为准</strong></p>\n"},{"title":"10.InnoDB统计数据是如何收集的","date":"2023-05-27T18:20:43.000Z","_content":"\nInnoDB提供了两种存储统计数据的方式\n- 永久性的统计数据：\n这些数据存储在磁盘上，服务器重启之后这些统计数据还在\n- 非永久性的统计数据：\n这种数据存储在内存中，服务器重启之后，在某些适当的场景下才会重新收集这些统计数据\n> 系统变量innodb_status_persistent来控制到底采用哪种方式去存储统计数据。另外，InnoDB默认是以表为单位来收集和存储统计数据的，所以可以把某些表的统计数据存储在磁盘上，把另一些表的统计数据存储在内存中。可以在创建和修改表的时候通过指定STATS_PERSISTENT属性来指明该表的统计数据存储方式\n","source":"_posts/10-InnoDB统计数据是如何收集的.md","raw":"---\ntitle: 10.InnoDB统计数据是如何收集的\ndate: 2023-05-27 14:20:43\ntags: [MySQL,MySQL是怎样运行的]\ncategories: 数据库\n---\n\nInnoDB提供了两种存储统计数据的方式\n- 永久性的统计数据：\n这些数据存储在磁盘上，服务器重启之后这些统计数据还在\n- 非永久性的统计数据：\n这种数据存储在内存中，服务器重启之后，在某些适当的场景下才会重新收集这些统计数据\n> 系统变量innodb_status_persistent来控制到底采用哪种方式去存储统计数据。另外，InnoDB默认是以表为单位来收集和存储统计数据的，所以可以把某些表的统计数据存储在磁盘上，把另一些表的统计数据存储在内存中。可以在创建和修改表的时候通过指定STATS_PERSISTENT属性来指明该表的统计数据存储方式\n","slug":"10-InnoDB统计数据是如何收集的","published":1,"updated":"2023-10-01T02:55:45.143Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cln6ws35c00035gi58f3q21z8","content":"<p>InnoDB提供了两种存储统计数据的方式</p>\n<ul>\n<li>永久性的统计数据：<br>这些数据存储在磁盘上，服务器重启之后这些统计数据还在</li>\n<li>非永久性的统计数据：<br>这种数据存储在内存中，服务器重启之后，在某些适当的场景下才会重新收集这些统计数据<blockquote>\n<p>系统变量innodb_status_persistent来控制到底采用哪种方式去存储统计数据。另外，InnoDB默认是以表为单位来收集和存储统计数据的，所以可以把某些表的统计数据存储在磁盘上，把另一些表的统计数据存储在内存中。可以在创建和修改表的时候通过指定STATS_PERSISTENT属性来指明该表的统计数据存储方式</p>\n</blockquote>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>InnoDB提供了两种存储统计数据的方式</p>\n<ul>\n<li>永久性的统计数据：<br>这些数据存储在磁盘上，服务器重启之后这些统计数据还在</li>\n<li>非永久性的统计数据：<br>这种数据存储在内存中，服务器重启之后，在某些适当的场景下才会重新收集这些统计数据<blockquote>\n<p>系统变量innodb_status_persistent来控制到底采用哪种方式去存储统计数据。另外，InnoDB默认是以表为单位来收集和存储统计数据的，所以可以把某些表的统计数据存储在磁盘上，把另一些表的统计数据存储在内存中。可以在创建和修改表的时候通过指定STATS_PERSISTENT属性来指明该表的统计数据存储方式</p>\n</blockquote>\n</li>\n</ul>\n"},{"title":"11.MySQL基于规则的优化","date":"2023-05-27T18:21:17.000Z","_content":"\n## 条件简化\n1.移除不必要的括号\n2.常量传递\n3.等值传递\n4.表达式计算\n5.HAVING子句和WHERE子句的合并\n\n子查询的执行方式\n- 对于包含不相关的标量子查询或者行子查询的语句来说，MySQL会分别独立执行外层查询和子查询，就当作两个单表查询就行\n- 对于相关的标量子查询或者行子查询，它的执行方式如下：\n![QQ截图20230217111828.png](images/11_1.jpg)\n\n\nIN子查询优化\n\n如果子查询的结果集中的记录条数很少，那么把子查询和外层查询分别看成两个单独的单表查询效率还是很高的，但是子查询的结果集太多的话会导致一下问题\n- 结果集太多，内存无法存下\n- 对于外层查询来说，如果子查询的结果集太多，就意味着IN子句中的参数很多，会导致（1.无法有效的使用索引，只能对外层查询进行全表扫描 2.在对外层查询执行全表扫描时，由于IN子句中的参数太多，这会导致检测一条记录是否符合和IN子句中的参数匹配花费的时间太长）\n>解决办法：不直接将不相关子查询的结果集当作外层查询的参数，而是将该结果写入一个临时表（1.该临时表的列就是子查询结果集中的列 2.写入临时表的记录会被去重 3.一般情况下子查询结果不会大的离谱，所以会为集合中的数据建立基于内存的存储引擎的临时表，并为该表建立哈希索引，如果子查询结果很大，会转而使用基于磁盘的存储引擎来保存结果集中的记录，索引类型也对应转变为B+树索引）\n\n物化表转连接\n\n松散索引扫描\n\n如果IN子查询不满足转换为semi-join的条件，又不能转换为物化表或者转换为物化表的成本太大，那么它就会转换为EXISTS查询","source":"_posts/11-MySQL基于规则的优化.md","raw":"---\ntitle: 11.MySQL基于规则的优化\ndate: 2023-05-27 14:21:17\ntags: [MySQL,MySQL是怎样运行的]\ncategories: 数据库\n---\n\n## 条件简化\n1.移除不必要的括号\n2.常量传递\n3.等值传递\n4.表达式计算\n5.HAVING子句和WHERE子句的合并\n\n子查询的执行方式\n- 对于包含不相关的标量子查询或者行子查询的语句来说，MySQL会分别独立执行外层查询和子查询，就当作两个单表查询就行\n- 对于相关的标量子查询或者行子查询，它的执行方式如下：\n![QQ截图20230217111828.png](images/11_1.jpg)\n\n\nIN子查询优化\n\n如果子查询的结果集中的记录条数很少，那么把子查询和外层查询分别看成两个单独的单表查询效率还是很高的，但是子查询的结果集太多的话会导致一下问题\n- 结果集太多，内存无法存下\n- 对于外层查询来说，如果子查询的结果集太多，就意味着IN子句中的参数很多，会导致（1.无法有效的使用索引，只能对外层查询进行全表扫描 2.在对外层查询执行全表扫描时，由于IN子句中的参数太多，这会导致检测一条记录是否符合和IN子句中的参数匹配花费的时间太长）\n>解决办法：不直接将不相关子查询的结果集当作外层查询的参数，而是将该结果写入一个临时表（1.该临时表的列就是子查询结果集中的列 2.写入临时表的记录会被去重 3.一般情况下子查询结果不会大的离谱，所以会为集合中的数据建立基于内存的存储引擎的临时表，并为该表建立哈希索引，如果子查询结果很大，会转而使用基于磁盘的存储引擎来保存结果集中的记录，索引类型也对应转变为B+树索引）\n\n物化表转连接\n\n松散索引扫描\n\n如果IN子查询不满足转换为semi-join的条件，又不能转换为物化表或者转换为物化表的成本太大，那么它就会转换为EXISTS查询","slug":"11-MySQL基于规则的优化","published":1,"updated":"2023-10-01T02:55:45.143Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cln6ws35f00075gi531fkgxkr","content":"<h2 id=\"条件简化\"><a href=\"#条件简化\" class=\"headerlink\" title=\"条件简化\"></a>条件简化</h2><p>1.移除不必要的括号<br>2.常量传递<br>3.等值传递<br>4.表达式计算<br>5.HAVING子句和WHERE子句的合并</p>\n<p>子查询的执行方式</p>\n<ul>\n<li>对于包含不相关的标量子查询或者行子查询的语句来说，MySQL会分别独立执行外层查询和子查询，就当作两个单表查询就行</li>\n<li>对于相关的标量子查询或者行子查询，它的执行方式如下：<br><img src=\"/images/11_1.jpg\" alt=\"QQ截图20230217111828.png\"></li>\n</ul>\n<p>IN子查询优化</p>\n<p>如果子查询的结果集中的记录条数很少，那么把子查询和外层查询分别看成两个单独的单表查询效率还是很高的，但是子查询的结果集太多的话会导致一下问题</p>\n<ul>\n<li>结果集太多，内存无法存下</li>\n<li>对于外层查询来说，如果子查询的结果集太多，就意味着IN子句中的参数很多，会导致（1.无法有效的使用索引，只能对外层查询进行全表扫描 2.在对外层查询执行全表扫描时，由于IN子句中的参数太多，这会导致检测一条记录是否符合和IN子句中的参数匹配花费的时间太长）<blockquote>\n<p>解决办法：不直接将不相关子查询的结果集当作外层查询的参数，而是将该结果写入一个临时表（1.该临时表的列就是子查询结果集中的列 2.写入临时表的记录会被去重 3.一般情况下子查询结果不会大的离谱，所以会为集合中的数据建立基于内存的存储引擎的临时表，并为该表建立哈希索引，如果子查询结果很大，会转而使用基于磁盘的存储引擎来保存结果集中的记录，索引类型也对应转变为B+树索引）</p>\n</blockquote>\n</li>\n</ul>\n<p>物化表转连接</p>\n<p>松散索引扫描</p>\n<p>如果IN子查询不满足转换为semi-join的条件，又不能转换为物化表或者转换为物化表的成本太大，那么它就会转换为EXISTS查询</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"条件简化\"><a href=\"#条件简化\" class=\"headerlink\" title=\"条件简化\"></a>条件简化</h2><p>1.移除不必要的括号<br>2.常量传递<br>3.等值传递<br>4.表达式计算<br>5.HAVING子句和WHERE子句的合并</p>\n<p>子查询的执行方式</p>\n<ul>\n<li>对于包含不相关的标量子查询或者行子查询的语句来说，MySQL会分别独立执行外层查询和子查询，就当作两个单表查询就行</li>\n<li>对于相关的标量子查询或者行子查询，它的执行方式如下：<br><img src=\"/images/11_1.jpg\" alt=\"QQ截图20230217111828.png\"></li>\n</ul>\n<p>IN子查询优化</p>\n<p>如果子查询的结果集中的记录条数很少，那么把子查询和外层查询分别看成两个单独的单表查询效率还是很高的，但是子查询的结果集太多的话会导致一下问题</p>\n<ul>\n<li>结果集太多，内存无法存下</li>\n<li>对于外层查询来说，如果子查询的结果集太多，就意味着IN子句中的参数很多，会导致（1.无法有效的使用索引，只能对外层查询进行全表扫描 2.在对外层查询执行全表扫描时，由于IN子句中的参数太多，这会导致检测一条记录是否符合和IN子句中的参数匹配花费的时间太长）<blockquote>\n<p>解决办法：不直接将不相关子查询的结果集当作外层查询的参数，而是将该结果写入一个临时表（1.该临时表的列就是子查询结果集中的列 2.写入临时表的记录会被去重 3.一般情况下子查询结果不会大的离谱，所以会为集合中的数据建立基于内存的存储引擎的临时表，并为该表建立哈希索引，如果子查询结果很大，会转而使用基于磁盘的存储引擎来保存结果集中的记录，索引类型也对应转变为B+树索引）</p>\n</blockquote>\n</li>\n</ul>\n<p>物化表转连接</p>\n<p>松散索引扫描</p>\n<p>如果IN子查询不满足转换为semi-join的条件，又不能转换为物化表或者转换为物化表的成本太大，那么它就会转换为EXISTS查询</p>\n"},{"title":"12.事务","date":"2023-05-27T18:21:58.000Z","_content":"\n1.原子性：要么全做，要么全不做\n2.隔离性：保证其它的状态转换不会影响到本次的状态转换\n3.一致性（符合所有现实世界的约束）：\n>- 数据库本身能为我们保证一部分一致性需求,比如MySQL数据库可以为表建立主键、唯一索引、外键、声明某个列为NOT NULL来拒绝NULL值的插入。又比如对某个列建立了唯一索引时，如果插入某条记录时该列的值重复了，那么MySQL就会报错并且拒绝插入，MySQL还支持CHECK语法来自定义约束,但是实际上MySQL并不会去检查CHECK子句中的约束是否成立，但是我们还是可以通过定义触发器的方式来自定义一些约束条件以保证数据库中的一致性\n> - 更多的一致性需求需要靠写业务代码的程序员自己保证，现实生活中复杂的一致性需求比比皆是，而由于性能问题把一致性需求交给数据库去解决这是不现实的，所以就把锅甩给了业务端程序员\n\n原子性和隔离性都会对一致性产生影响，数据库某些操作的原子性和隔离性都是保证一致性的一种手段，在操作执行完成后保证符合所有既定的约束则是一种结果\n\n4.持久性：状态转换后，这个转换的结果是永久保留的\n\n事务的定义：把需要保证原子性、隔离性、一致性、持久性的一个或多个数据库操作称之为一个事务\n\n事务的状态转换图如下\n![微信截图_20230218105257.png](images/12_1.jpg)\n\n### 隐式提交\n当我们适用START TRANSACTION 或者BEGIN 语句开启了一个事务，或者把系统标量auto commit为OFF时，事务就不会进行自动提交，但是如果我们输入了某些语句之后就会悄悄的提交掉\n1.定义或修改数据库对象的数据定义语言：所谓的数据库对象，指的就是数据库、表、视图、存储过程等，当我们使用CREATE、ALTER、DROP等语句去修改这些所谓的数据库对象时，就会隐式的提交前面语句所属的事务\n2.隐式使用或修改数据库中的表：当我们使用ALTER USER、CREATE USER、DROP USER、GRANT、RENAME USER、REVOKE、SET PASSWORD等语句时也会隐式的提交前面语句所属于的事务\n3.事务控制或关于锁定的语句：当我们在一个事务还没有提交或者回滚时就又使用START TRANSACTION 或者BEGIN语句开启了另一个事务，会隐式提交上一个事务\n4.加载数据的语句：使用LOAD DATA等\n5.关于MySQL复制的一些语句：使用START SLAVE、STOP SLAVE、RESET SLAVE、CHANGE MASTER TO等语句时也会隐式的提交前面语句所属的事务\n6.其它的一些语句：使用ANALYZE TABLE、CACHE INDEX、CHECK TABLE、FLUSH、LOAD INDEX INTO CACHE、OPTIMIZE TABLE、REPAIR TABLE、RESET等语句\n\n### 保存点\n定义保存点的语法如下：\n```\nSAVEPOINT 保存点的名称\n```\n```\nROLLBACK [WORK] TO [SAVEPOINT] 保存点名称\n```\n\n","source":"_posts/12-事务.md","raw":"---\ntitle: 12.事务\ndate: 2023-05-27 14:21:58\ntags: [MySQL,MySQL是怎样运行的]\ncategories: 数据库\n---\n\n1.原子性：要么全做，要么全不做\n2.隔离性：保证其它的状态转换不会影响到本次的状态转换\n3.一致性（符合所有现实世界的约束）：\n>- 数据库本身能为我们保证一部分一致性需求,比如MySQL数据库可以为表建立主键、唯一索引、外键、声明某个列为NOT NULL来拒绝NULL值的插入。又比如对某个列建立了唯一索引时，如果插入某条记录时该列的值重复了，那么MySQL就会报错并且拒绝插入，MySQL还支持CHECK语法来自定义约束,但是实际上MySQL并不会去检查CHECK子句中的约束是否成立，但是我们还是可以通过定义触发器的方式来自定义一些约束条件以保证数据库中的一致性\n> - 更多的一致性需求需要靠写业务代码的程序员自己保证，现实生活中复杂的一致性需求比比皆是，而由于性能问题把一致性需求交给数据库去解决这是不现实的，所以就把锅甩给了业务端程序员\n\n原子性和隔离性都会对一致性产生影响，数据库某些操作的原子性和隔离性都是保证一致性的一种手段，在操作执行完成后保证符合所有既定的约束则是一种结果\n\n4.持久性：状态转换后，这个转换的结果是永久保留的\n\n事务的定义：把需要保证原子性、隔离性、一致性、持久性的一个或多个数据库操作称之为一个事务\n\n事务的状态转换图如下\n![微信截图_20230218105257.png](images/12_1.jpg)\n\n### 隐式提交\n当我们适用START TRANSACTION 或者BEGIN 语句开启了一个事务，或者把系统标量auto commit为OFF时，事务就不会进行自动提交，但是如果我们输入了某些语句之后就会悄悄的提交掉\n1.定义或修改数据库对象的数据定义语言：所谓的数据库对象，指的就是数据库、表、视图、存储过程等，当我们使用CREATE、ALTER、DROP等语句去修改这些所谓的数据库对象时，就会隐式的提交前面语句所属的事务\n2.隐式使用或修改数据库中的表：当我们使用ALTER USER、CREATE USER、DROP USER、GRANT、RENAME USER、REVOKE、SET PASSWORD等语句时也会隐式的提交前面语句所属于的事务\n3.事务控制或关于锁定的语句：当我们在一个事务还没有提交或者回滚时就又使用START TRANSACTION 或者BEGIN语句开启了另一个事务，会隐式提交上一个事务\n4.加载数据的语句：使用LOAD DATA等\n5.关于MySQL复制的一些语句：使用START SLAVE、STOP SLAVE、RESET SLAVE、CHANGE MASTER TO等语句时也会隐式的提交前面语句所属的事务\n6.其它的一些语句：使用ANALYZE TABLE、CACHE INDEX、CHECK TABLE、FLUSH、LOAD INDEX INTO CACHE、OPTIMIZE TABLE、REPAIR TABLE、RESET等语句\n\n### 保存点\n定义保存点的语法如下：\n```\nSAVEPOINT 保存点的名称\n```\n```\nROLLBACK [WORK] TO [SAVEPOINT] 保存点名称\n```\n\n","slug":"12-事务","published":1,"updated":"2023-10-01T02:55:45.143Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cln6ws35h00095gi5gz5xahk3","content":"<p>1.原子性：要么全做，要么全不做<br>2.隔离性：保证其它的状态转换不会影响到本次的状态转换<br>3.一致性（符合所有现实世界的约束）：</p>\n<blockquote>\n<ul>\n<li>数据库本身能为我们保证一部分一致性需求,比如MySQL数据库可以为表建立主键、唯一索引、外键、声明某个列为NOT NULL来拒绝NULL值的插入。又比如对某个列建立了唯一索引时，如果插入某条记录时该列的值重复了，那么MySQL就会报错并且拒绝插入，MySQL还支持CHECK语法来自定义约束,但是实际上MySQL并不会去检查CHECK子句中的约束是否成立，但是我们还是可以通过定义触发器的方式来自定义一些约束条件以保证数据库中的一致性</li>\n<li>更多的一致性需求需要靠写业务代码的程序员自己保证，现实生活中复杂的一致性需求比比皆是，而由于性能问题把一致性需求交给数据库去解决这是不现实的，所以就把锅甩给了业务端程序员</li>\n</ul>\n</blockquote>\n<p>原子性和隔离性都会对一致性产生影响，数据库某些操作的原子性和隔离性都是保证一致性的一种手段，在操作执行完成后保证符合所有既定的约束则是一种结果</p>\n<p>4.持久性：状态转换后，这个转换的结果是永久保留的</p>\n<p>事务的定义：把需要保证原子性、隔离性、一致性、持久性的一个或多个数据库操作称之为一个事务</p>\n<p>事务的状态转换图如下<br><img src=\"/images/12_1.jpg\" alt=\"微信截图_20230218105257.png\"></p>\n<h3 id=\"隐式提交\"><a href=\"#隐式提交\" class=\"headerlink\" title=\"隐式提交\"></a>隐式提交</h3><p>当我们适用START TRANSACTION 或者BEGIN 语句开启了一个事务，或者把系统标量auto commit为OFF时，事务就不会进行自动提交，但是如果我们输入了某些语句之后就会悄悄的提交掉<br>1.定义或修改数据库对象的数据定义语言：所谓的数据库对象，指的就是数据库、表、视图、存储过程等，当我们使用CREATE、ALTER、DROP等语句去修改这些所谓的数据库对象时，就会隐式的提交前面语句所属的事务<br>2.隐式使用或修改数据库中的表：当我们使用ALTER USER、CREATE USER、DROP USER、GRANT、RENAME USER、REVOKE、SET PASSWORD等语句时也会隐式的提交前面语句所属于的事务<br>3.事务控制或关于锁定的语句：当我们在一个事务还没有提交或者回滚时就又使用START TRANSACTION 或者BEGIN语句开启了另一个事务，会隐式提交上一个事务<br>4.加载数据的语句：使用LOAD DATA等<br>5.关于MySQL复制的一些语句：使用START SLAVE、STOP SLAVE、RESET SLAVE、CHANGE MASTER TO等语句时也会隐式的提交前面语句所属的事务<br>6.其它的一些语句：使用ANALYZE TABLE、CACHE INDEX、CHECK TABLE、FLUSH、LOAD INDEX INTO CACHE、OPTIMIZE TABLE、REPAIR TABLE、RESET等语句</p>\n<h3 id=\"保存点\"><a href=\"#保存点\" class=\"headerlink\" title=\"保存点\"></a>保存点</h3><p>定义保存点的语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SAVEPOINT 保存点的名称</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ROLLBACK [WORK] TO [SAVEPOINT] 保存点名称</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>1.原子性：要么全做，要么全不做<br>2.隔离性：保证其它的状态转换不会影响到本次的状态转换<br>3.一致性（符合所有现实世界的约束）：</p>\n<blockquote>\n<ul>\n<li>数据库本身能为我们保证一部分一致性需求,比如MySQL数据库可以为表建立主键、唯一索引、外键、声明某个列为NOT NULL来拒绝NULL值的插入。又比如对某个列建立了唯一索引时，如果插入某条记录时该列的值重复了，那么MySQL就会报错并且拒绝插入，MySQL还支持CHECK语法来自定义约束,但是实际上MySQL并不会去检查CHECK子句中的约束是否成立，但是我们还是可以通过定义触发器的方式来自定义一些约束条件以保证数据库中的一致性</li>\n<li>更多的一致性需求需要靠写业务代码的程序员自己保证，现实生活中复杂的一致性需求比比皆是，而由于性能问题把一致性需求交给数据库去解决这是不现实的，所以就把锅甩给了业务端程序员</li>\n</ul>\n</blockquote>\n<p>原子性和隔离性都会对一致性产生影响，数据库某些操作的原子性和隔离性都是保证一致性的一种手段，在操作执行完成后保证符合所有既定的约束则是一种结果</p>\n<p>4.持久性：状态转换后，这个转换的结果是永久保留的</p>\n<p>事务的定义：把需要保证原子性、隔离性、一致性、持久性的一个或多个数据库操作称之为一个事务</p>\n<p>事务的状态转换图如下<br><img src=\"/images/12_1.jpg\" alt=\"微信截图_20230218105257.png\"></p>\n<h3 id=\"隐式提交\"><a href=\"#隐式提交\" class=\"headerlink\" title=\"隐式提交\"></a>隐式提交</h3><p>当我们适用START TRANSACTION 或者BEGIN 语句开启了一个事务，或者把系统标量auto commit为OFF时，事务就不会进行自动提交，但是如果我们输入了某些语句之后就会悄悄的提交掉<br>1.定义或修改数据库对象的数据定义语言：所谓的数据库对象，指的就是数据库、表、视图、存储过程等，当我们使用CREATE、ALTER、DROP等语句去修改这些所谓的数据库对象时，就会隐式的提交前面语句所属的事务<br>2.隐式使用或修改数据库中的表：当我们使用ALTER USER、CREATE USER、DROP USER、GRANT、RENAME USER、REVOKE、SET PASSWORD等语句时也会隐式的提交前面语句所属于的事务<br>3.事务控制或关于锁定的语句：当我们在一个事务还没有提交或者回滚时就又使用START TRANSACTION 或者BEGIN语句开启了另一个事务，会隐式提交上一个事务<br>4.加载数据的语句：使用LOAD DATA等<br>5.关于MySQL复制的一些语句：使用START SLAVE、STOP SLAVE、RESET SLAVE、CHANGE MASTER TO等语句时也会隐式的提交前面语句所属的事务<br>6.其它的一些语句：使用ANALYZE TABLE、CACHE INDEX、CHECK TABLE、FLUSH、LOAD INDEX INTO CACHE、OPTIMIZE TABLE、REPAIR TABLE、RESET等语句</p>\n<h3 id=\"保存点\"><a href=\"#保存点\" class=\"headerlink\" title=\"保存点\"></a>保存点</h3><p>定义保存点的语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SAVEPOINT 保存点的名称</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ROLLBACK [WORK] TO [SAVEPOINT] 保存点名称</span><br></pre></td></tr></table></figure>\n\n"},{"title":"13.redo日志","date":"2023-05-27T18:22:32.000Z","_content":"\n与在事务提交时将所有修改过的内存中的页面刷新到磁盘中相比，只将该事务执行过程中产生的redo日志刷新到磁盘的好处如下\n1.redo日志占用的空间非常小\n2.redo日志是顺序写入磁盘的\n\n每条语句包含多个mtr，每个mtr包含一组redo log\n一个mtr运行结束后，会将产生的一组redolog复制到log buffer中，在一些情况下它们会被刷新到磁盘里\n1.log buffer空间不足时\n2.事务提交时\n3.后台线程不停地刷\n4.正常关闭服务器\n5.做checkpoint 时\n6.其它情况\n\nredo日志文件前4个block\n- log file header：描述该日志文件地一些整体属性\n- checkpoint1\n- 无用\n- checkpoint2\n\nLog Sequence Number（日志序列号）lsn\n每一组由mtr生成地redo日志都有一个唯一的lsn值与其对应，lsn值越小，说明redo日志产生的越早\n\n\n在mtr结束时，还会将执行过程中可能修改过的页面加入到buffer pool 的flush链表\n\ncheckpoint：\nredo日志只是为了系统崩溃后恢复脏页用的，如果对应的脏页已经刷新到磁盘，就不需要对应的redo日志了，所以判断某些redo日志占用的磁盘空间是否可以覆盖的依据就是它对应的脏页是否已经刷新到磁盘里。\n\n做一次checkpoint其实可以分为两个步骤\n1.计算一下当前系统中可以被覆盖的redo日志对应的lsn值最大是多少（有必要的话更新checkpoint_lsn）\n2.将checkpoint_lsn和对应的redo日志文件组偏移量以及此次checkpoint的编号写到日志文件的管理信息（目前系统做了多少次checkpoint的变量checkpoint_no，每做一次checkpoint，该变量就加1）","source":"_posts/13-redo日志.md","raw":"---\ntitle: 13.redo日志\ndate: 2023-05-27 14:22:32\ntags: [MySQL,MySQL是怎样运行的]\ncategories: 数据库\n---\n\n与在事务提交时将所有修改过的内存中的页面刷新到磁盘中相比，只将该事务执行过程中产生的redo日志刷新到磁盘的好处如下\n1.redo日志占用的空间非常小\n2.redo日志是顺序写入磁盘的\n\n每条语句包含多个mtr，每个mtr包含一组redo log\n一个mtr运行结束后，会将产生的一组redolog复制到log buffer中，在一些情况下它们会被刷新到磁盘里\n1.log buffer空间不足时\n2.事务提交时\n3.后台线程不停地刷\n4.正常关闭服务器\n5.做checkpoint 时\n6.其它情况\n\nredo日志文件前4个block\n- log file header：描述该日志文件地一些整体属性\n- checkpoint1\n- 无用\n- checkpoint2\n\nLog Sequence Number（日志序列号）lsn\n每一组由mtr生成地redo日志都有一个唯一的lsn值与其对应，lsn值越小，说明redo日志产生的越早\n\n\n在mtr结束时，还会将执行过程中可能修改过的页面加入到buffer pool 的flush链表\n\ncheckpoint：\nredo日志只是为了系统崩溃后恢复脏页用的，如果对应的脏页已经刷新到磁盘，就不需要对应的redo日志了，所以判断某些redo日志占用的磁盘空间是否可以覆盖的依据就是它对应的脏页是否已经刷新到磁盘里。\n\n做一次checkpoint其实可以分为两个步骤\n1.计算一下当前系统中可以被覆盖的redo日志对应的lsn值最大是多少（有必要的话更新checkpoint_lsn）\n2.将checkpoint_lsn和对应的redo日志文件组偏移量以及此次checkpoint的编号写到日志文件的管理信息（目前系统做了多少次checkpoint的变量checkpoint_no，每做一次checkpoint，该变量就加1）","slug":"13-redo日志","published":1,"updated":"2023-10-01T02:55:45.143Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cln6ws35i000a5gi567zcdubj","content":"<p>与在事务提交时将所有修改过的内存中的页面刷新到磁盘中相比，只将该事务执行过程中产生的redo日志刷新到磁盘的好处如下<br>1.redo日志占用的空间非常小<br>2.redo日志是顺序写入磁盘的</p>\n<p>每条语句包含多个mtr，每个mtr包含一组redo log<br>一个mtr运行结束后，会将产生的一组redolog复制到log buffer中，在一些情况下它们会被刷新到磁盘里<br>1.log buffer空间不足时<br>2.事务提交时<br>3.后台线程不停地刷<br>4.正常关闭服务器<br>5.做checkpoint 时<br>6.其它情况</p>\n<p>redo日志文件前4个block</p>\n<ul>\n<li>log file header：描述该日志文件地一些整体属性</li>\n<li>checkpoint1</li>\n<li>无用</li>\n<li>checkpoint2</li>\n</ul>\n<p>Log Sequence Number（日志序列号）lsn<br>每一组由mtr生成地redo日志都有一个唯一的lsn值与其对应，lsn值越小，说明redo日志产生的越早</p>\n<p>在mtr结束时，还会将执行过程中可能修改过的页面加入到buffer pool 的flush链表</p>\n<p>checkpoint：<br>redo日志只是为了系统崩溃后恢复脏页用的，如果对应的脏页已经刷新到磁盘，就不需要对应的redo日志了，所以判断某些redo日志占用的磁盘空间是否可以覆盖的依据就是它对应的脏页是否已经刷新到磁盘里。</p>\n<p>做一次checkpoint其实可以分为两个步骤<br>1.计算一下当前系统中可以被覆盖的redo日志对应的lsn值最大是多少（有必要的话更新checkpoint_lsn）<br>2.将checkpoint_lsn和对应的redo日志文件组偏移量以及此次checkpoint的编号写到日志文件的管理信息（目前系统做了多少次checkpoint的变量checkpoint_no，每做一次checkpoint，该变量就加1）</p>\n","site":{"data":{}},"excerpt":"","more":"<p>与在事务提交时将所有修改过的内存中的页面刷新到磁盘中相比，只将该事务执行过程中产生的redo日志刷新到磁盘的好处如下<br>1.redo日志占用的空间非常小<br>2.redo日志是顺序写入磁盘的</p>\n<p>每条语句包含多个mtr，每个mtr包含一组redo log<br>一个mtr运行结束后，会将产生的一组redolog复制到log buffer中，在一些情况下它们会被刷新到磁盘里<br>1.log buffer空间不足时<br>2.事务提交时<br>3.后台线程不停地刷<br>4.正常关闭服务器<br>5.做checkpoint 时<br>6.其它情况</p>\n<p>redo日志文件前4个block</p>\n<ul>\n<li>log file header：描述该日志文件地一些整体属性</li>\n<li>checkpoint1</li>\n<li>无用</li>\n<li>checkpoint2</li>\n</ul>\n<p>Log Sequence Number（日志序列号）lsn<br>每一组由mtr生成地redo日志都有一个唯一的lsn值与其对应，lsn值越小，说明redo日志产生的越早</p>\n<p>在mtr结束时，还会将执行过程中可能修改过的页面加入到buffer pool 的flush链表</p>\n<p>checkpoint：<br>redo日志只是为了系统崩溃后恢复脏页用的，如果对应的脏页已经刷新到磁盘，就不需要对应的redo日志了，所以判断某些redo日志占用的磁盘空间是否可以覆盖的依据就是它对应的脏页是否已经刷新到磁盘里。</p>\n<p>做一次checkpoint其实可以分为两个步骤<br>1.计算一下当前系统中可以被覆盖的redo日志对应的lsn值最大是多少（有必要的话更新checkpoint_lsn）<br>2.将checkpoint_lsn和对应的redo日志文件组偏移量以及此次checkpoint的编号写到日志文件的管理信息（目前系统做了多少次checkpoint的变量checkpoint_no，每做一次checkpoint，该变量就加1）</p>\n"},{"title":"14.undo日志","date":"2023-05-27T18:23:03.000Z","_content":"\n## 事务id\n- 对于只读事务来说，只有在它第一次对某个用户创建的临时表执行增、删、改操作时才会为这个事务分配一个事务id\n- 对于读写事务来说，只有在它第一次对某个表（包括用户创建的临时表）执行增、删、改操作时才会为这个事务分配一个事务id\n\n聚簇索引的记录还会自动添加名为trx_id、roll_pointer的隐藏列\n其中trx_id就是对这个聚簇索引记录做改动的语句所在的事务对应的事务id\nroll_pointer就是一个指向记录对应的undo日志的一个指针","source":"_posts/14-undo日志.md","raw":"---\ntitle: 14.undo日志\ndate: 2023-05-27 14:23:03\ntags: [MySQL,MySQL是怎样运行的]\ncategories: 数据库\n---\n\n## 事务id\n- 对于只读事务来说，只有在它第一次对某个用户创建的临时表执行增、删、改操作时才会为这个事务分配一个事务id\n- 对于读写事务来说，只有在它第一次对某个表（包括用户创建的临时表）执行增、删、改操作时才会为这个事务分配一个事务id\n\n聚簇索引的记录还会自动添加名为trx_id、roll_pointer的隐藏列\n其中trx_id就是对这个聚簇索引记录做改动的语句所在的事务对应的事务id\nroll_pointer就是一个指向记录对应的undo日志的一个指针","slug":"14-undo日志","published":1,"updated":"2023-10-01T02:55:45.143Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cln6ws35k000d5gi5gdfwfg8c","content":"<h2 id=\"事务id\"><a href=\"#事务id\" class=\"headerlink\" title=\"事务id\"></a>事务id</h2><ul>\n<li>对于只读事务来说，只有在它第一次对某个用户创建的临时表执行增、删、改操作时才会为这个事务分配一个事务id</li>\n<li>对于读写事务来说，只有在它第一次对某个表（包括用户创建的临时表）执行增、删、改操作时才会为这个事务分配一个事务id</li>\n</ul>\n<p>聚簇索引的记录还会自动添加名为trx_id、roll_pointer的隐藏列<br>其中trx_id就是对这个聚簇索引记录做改动的语句所在的事务对应的事务id<br>roll_pointer就是一个指向记录对应的undo日志的一个指针</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"事务id\"><a href=\"#事务id\" class=\"headerlink\" title=\"事务id\"></a>事务id</h2><ul>\n<li>对于只读事务来说，只有在它第一次对某个用户创建的临时表执行增、删、改操作时才会为这个事务分配一个事务id</li>\n<li>对于读写事务来说，只有在它第一次对某个表（包括用户创建的临时表）执行增、删、改操作时才会为这个事务分配一个事务id</li>\n</ul>\n<p>聚簇索引的记录还会自动添加名为trx_id、roll_pointer的隐藏列<br>其中trx_id就是对这个聚簇索引记录做改动的语句所在的事务对应的事务id<br>roll_pointer就是一个指向记录对应的undo日志的一个指针</p>\n"},{"title":"15.事务的隔离级别","date":"2023-05-27T18:23:33.000Z","_content":"\n事务并发执行遇到的问题\n1.脏写：\n一个事务修改了另一个未提交事务修改过的数据\n2.脏读\n一个事务读到了另一个未提交事务修改过的数据\n3.不可重复读\n一个事务只能读到另一个已经提交的事务修改过的数据，并且其它事务每对该数据进行一次修改，并提交后都能查询得到最新值\n4.幻读\n一个事务先根据某些条件查询出一些记录，之后另一个事务又向表中插入了符合这些条件的记录，原先的事务再次按照该条件查询时，能把另一个事务插入的记录也读出来\n\nMySQL四种隔离级别\n![微信截图_20230219113504.png](images/15_1.jpg)\n\nMVCC原理（多版本并发控制）\n版本链\nREAD COMMITTED和REPEATABLE READ生成ReadView的时机不同","source":"_posts/15-事务的隔离级别.md","raw":"---\ntitle: 15.事务的隔离级别\ndate: 2023-05-27 14:23:33\ntags: [MySQL,MySQL是怎样运行的]\ncategories: 数据库\n---\n\n事务并发执行遇到的问题\n1.脏写：\n一个事务修改了另一个未提交事务修改过的数据\n2.脏读\n一个事务读到了另一个未提交事务修改过的数据\n3.不可重复读\n一个事务只能读到另一个已经提交的事务修改过的数据，并且其它事务每对该数据进行一次修改，并提交后都能查询得到最新值\n4.幻读\n一个事务先根据某些条件查询出一些记录，之后另一个事务又向表中插入了符合这些条件的记录，原先的事务再次按照该条件查询时，能把另一个事务插入的记录也读出来\n\nMySQL四种隔离级别\n![微信截图_20230219113504.png](images/15_1.jpg)\n\nMVCC原理（多版本并发控制）\n版本链\nREAD COMMITTED和REPEATABLE READ生成ReadView的时机不同","slug":"15-事务的隔离级别","published":1,"updated":"2023-10-01T02:55:45.143Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cln6ws35l000e5gi54ihy0jl0","content":"<p>事务并发执行遇到的问题<br>1.脏写：<br>一个事务修改了另一个未提交事务修改过的数据<br>2.脏读<br>一个事务读到了另一个未提交事务修改过的数据<br>3.不可重复读<br>一个事务只能读到另一个已经提交的事务修改过的数据，并且其它事务每对该数据进行一次修改，并提交后都能查询得到最新值<br>4.幻读<br>一个事务先根据某些条件查询出一些记录，之后另一个事务又向表中插入了符合这些条件的记录，原先的事务再次按照该条件查询时，能把另一个事务插入的记录也读出来</p>\n<p>MySQL四种隔离级别<br><img src=\"/images/15_1.jpg\" alt=\"微信截图_20230219113504.png\"></p>\n<p>MVCC原理（多版本并发控制）<br>版本链<br>READ COMMITTED和REPEATABLE READ生成ReadView的时机不同</p>\n","site":{"data":{}},"excerpt":"","more":"<p>事务并发执行遇到的问题<br>1.脏写：<br>一个事务修改了另一个未提交事务修改过的数据<br>2.脏读<br>一个事务读到了另一个未提交事务修改过的数据<br>3.不可重复读<br>一个事务只能读到另一个已经提交的事务修改过的数据，并且其它事务每对该数据进行一次修改，并提交后都能查询得到最新值<br>4.幻读<br>一个事务先根据某些条件查询出一些记录，之后另一个事务又向表中插入了符合这些条件的记录，原先的事务再次按照该条件查询时，能把另一个事务插入的记录也读出来</p>\n<p>MySQL四种隔离级别<br><img src=\"/images/15_1.jpg\" alt=\"微信截图_20230219113504.png\"></p>\n<p>MVCC原理（多版本并发控制）<br>版本链<br>READ COMMITTED和REPEATABLE READ生成ReadView的时机不同</p>\n"},{"title":"2.系统变量","date":"2023-05-27T18:15:34.000Z","_content":"### 系统变量简介\n>MySQL服务器程序运行过程中会用到许多影响程序行为的变量，它们被称为MySQL系统变量，比如允许同时连入的客户端数量用系统变量max_connections表示，表的默认存储引擎用系统变量default_storage_engine表示，查询缓存的大小用系统变量query_cache_size表示，MySQL服务器程序的系统变量有好几百条，我们就不一一列举了。\n\n我们可以使用下列命令查看MySQL服务器程序支持的系统变量以及它们的当前值：\n```\nSHOW VARIABLES [LIKE 匹配的模式];\n```\n### 设置系统变量\n#### 通过启动选项设置\n1.通过命令行添加启动选项。\n2.通过配置文件添加启动选项\n\n#### 服务器程序运行过程中设置\n##### 设置不同作用范围的系统变量\n>我们前面说过，多个客户端程序可以同时连接到一个服务器程序。对于同一个系统变量，我们有时想让不同的客户端有不同的值。比方说狗哥使用客户端A，他想让当前客户端对应的默认存储引擎为InnoDB，所以他可以把系统变量default_storage_engine的值设置为InnoDB；猫爷使用客户端B，他想让当前客户端对应的默认存储引擎为MyISAM，所以他可以把系统变量default_storage_engine的值设置为MyISAM。这样可以使狗哥和猫爷的的客户端拥有不同的默认存储引擎，使用时互不影响，十分方便。但是这样各个客户端都私有一份系统变量会产生这么两个问题：\n\n- 有一些系统变量并不是针对单个客户端的，比如允许同时连接到服务器的客户端数量max_connections，查询缓存的大小query_cache_size，这些公有的系统变量让某个客户端私有显然不合适。\n- 一个新连接到服务器的客户端对应的系统变量的值该怎么设置？\n>为了解决这两个问题，设计MySQL的大佬提出了系统变量的作用范围的概念，具体来说作用范围分为这两种,GLOBAL（全局变量，影响服务器整体操作）和SESSION（会话变量，影响某个客户端连接的操作，别名LOCAL）通过启动选项设置的系统变量的作用范围都是GLOBAL的，也就是对所有客户端都有效的\n\n在服务器程序运行期间通过客户端程序设置系统变量的语法：\n```\nSET [GLOBAL|SESSION] 系统变量名 = 值;\n```\n##### 查看不同作用范围的系统变量\n```\nSHOW [GLOBAL|SESSION] VARIABLES [LIKE 匹配的模式];\n```\n小贴士：如果某个客户端改变了某个系统变量在`GLOBAL`作用范围的值，并不会影响该系统变量在当前已经连接的客户端作用范围为`SESSION`的值，只会影响后续连入的客户端在作用范围为`SESSION`的值。\n\n##### 注意事项\n*   并不是所有系统变量都具有`GLOBAL`和`SESSION`的作用范围。\n\n    *   有一些系统变量只具有`GLOBAL`作用范围，比方说`max_connections`，表示服务器程序支持同时最多有多少个客户端程序进行连接。\n\n    *   有一些系统变量只具有`SESSION`作用范围，比如`insert_id`，表示在对某个包含`AUTO_INCREMENT`列的表进行插入时，该列初始的值。\n\n    *   有一些系统变量的值既具有`GLOBAL`作用范围，也具有`SESSION`作用范围，比如我们前面用到的`default_storage_engine`，而且其实大部分的系统变量都是这样的，\n\n*   有些系统变量是只读的，并不能设置值。\n\n      比方说`version`，表示当前`MySQL`的版本，我们客户端是不能设置它的值的，只能在`SHOW VARIABLES`语句里查看。\n","source":"_posts/2-系统变量.md","raw":"---\ntitle: 2.系统变量\ndate: 2023-05-27 14:15:34\ntags: [MySQL, MySQL是怎样运行的]\ncategories: 数据库\n---\n### 系统变量简介\n>MySQL服务器程序运行过程中会用到许多影响程序行为的变量，它们被称为MySQL系统变量，比如允许同时连入的客户端数量用系统变量max_connections表示，表的默认存储引擎用系统变量default_storage_engine表示，查询缓存的大小用系统变量query_cache_size表示，MySQL服务器程序的系统变量有好几百条，我们就不一一列举了。\n\n我们可以使用下列命令查看MySQL服务器程序支持的系统变量以及它们的当前值：\n```\nSHOW VARIABLES [LIKE 匹配的模式];\n```\n### 设置系统变量\n#### 通过启动选项设置\n1.通过命令行添加启动选项。\n2.通过配置文件添加启动选项\n\n#### 服务器程序运行过程中设置\n##### 设置不同作用范围的系统变量\n>我们前面说过，多个客户端程序可以同时连接到一个服务器程序。对于同一个系统变量，我们有时想让不同的客户端有不同的值。比方说狗哥使用客户端A，他想让当前客户端对应的默认存储引擎为InnoDB，所以他可以把系统变量default_storage_engine的值设置为InnoDB；猫爷使用客户端B，他想让当前客户端对应的默认存储引擎为MyISAM，所以他可以把系统变量default_storage_engine的值设置为MyISAM。这样可以使狗哥和猫爷的的客户端拥有不同的默认存储引擎，使用时互不影响，十分方便。但是这样各个客户端都私有一份系统变量会产生这么两个问题：\n\n- 有一些系统变量并不是针对单个客户端的，比如允许同时连接到服务器的客户端数量max_connections，查询缓存的大小query_cache_size，这些公有的系统变量让某个客户端私有显然不合适。\n- 一个新连接到服务器的客户端对应的系统变量的值该怎么设置？\n>为了解决这两个问题，设计MySQL的大佬提出了系统变量的作用范围的概念，具体来说作用范围分为这两种,GLOBAL（全局变量，影响服务器整体操作）和SESSION（会话变量，影响某个客户端连接的操作，别名LOCAL）通过启动选项设置的系统变量的作用范围都是GLOBAL的，也就是对所有客户端都有效的\n\n在服务器程序运行期间通过客户端程序设置系统变量的语法：\n```\nSET [GLOBAL|SESSION] 系统变量名 = 值;\n```\n##### 查看不同作用范围的系统变量\n```\nSHOW [GLOBAL|SESSION] VARIABLES [LIKE 匹配的模式];\n```\n小贴士：如果某个客户端改变了某个系统变量在`GLOBAL`作用范围的值，并不会影响该系统变量在当前已经连接的客户端作用范围为`SESSION`的值，只会影响后续连入的客户端在作用范围为`SESSION`的值。\n\n##### 注意事项\n*   并不是所有系统变量都具有`GLOBAL`和`SESSION`的作用范围。\n\n    *   有一些系统变量只具有`GLOBAL`作用范围，比方说`max_connections`，表示服务器程序支持同时最多有多少个客户端程序进行连接。\n\n    *   有一些系统变量只具有`SESSION`作用范围，比如`insert_id`，表示在对某个包含`AUTO_INCREMENT`列的表进行插入时，该列初始的值。\n\n    *   有一些系统变量的值既具有`GLOBAL`作用范围，也具有`SESSION`作用范围，比如我们前面用到的`default_storage_engine`，而且其实大部分的系统变量都是这样的，\n\n*   有些系统变量是只读的，并不能设置值。\n\n      比方说`version`，表示当前`MySQL`的版本，我们客户端是不能设置它的值的，只能在`SHOW VARIABLES`语句里查看。\n","slug":"2-系统变量","published":1,"updated":"2023-10-01T02:55:45.143Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cln6ws35n000j5gi592bgbuck","content":"<h3 id=\"系统变量简介\"><a href=\"#系统变量简介\" class=\"headerlink\" title=\"系统变量简介\"></a>系统变量简介</h3><blockquote>\n<p>MySQL服务器程序运行过程中会用到许多影响程序行为的变量，它们被称为MySQL系统变量，比如允许同时连入的客户端数量用系统变量max_connections表示，表的默认存储引擎用系统变量default_storage_engine表示，查询缓存的大小用系统变量query_cache_size表示，MySQL服务器程序的系统变量有好几百条，我们就不一一列举了。</p>\n</blockquote>\n<p>我们可以使用下列命令查看MySQL服务器程序支持的系统变量以及它们的当前值：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHOW VARIABLES [LIKE 匹配的模式];</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置系统变量\"><a href=\"#设置系统变量\" class=\"headerlink\" title=\"设置系统变量\"></a>设置系统变量</h3><h4 id=\"通过启动选项设置\"><a href=\"#通过启动选项设置\" class=\"headerlink\" title=\"通过启动选项设置\"></a>通过启动选项设置</h4><p>1.通过命令行添加启动选项。<br>2.通过配置文件添加启动选项</p>\n<h4 id=\"服务器程序运行过程中设置\"><a href=\"#服务器程序运行过程中设置\" class=\"headerlink\" title=\"服务器程序运行过程中设置\"></a>服务器程序运行过程中设置</h4><h5 id=\"设置不同作用范围的系统变量\"><a href=\"#设置不同作用范围的系统变量\" class=\"headerlink\" title=\"设置不同作用范围的系统变量\"></a>设置不同作用范围的系统变量</h5><blockquote>\n<p>我们前面说过，多个客户端程序可以同时连接到一个服务器程序。对于同一个系统变量，我们有时想让不同的客户端有不同的值。比方说狗哥使用客户端A，他想让当前客户端对应的默认存储引擎为InnoDB，所以他可以把系统变量default_storage_engine的值设置为InnoDB；猫爷使用客户端B，他想让当前客户端对应的默认存储引擎为MyISAM，所以他可以把系统变量default_storage_engine的值设置为MyISAM。这样可以使狗哥和猫爷的的客户端拥有不同的默认存储引擎，使用时互不影响，十分方便。但是这样各个客户端都私有一份系统变量会产生这么两个问题：</p>\n</blockquote>\n<ul>\n<li>有一些系统变量并不是针对单个客户端的，比如允许同时连接到服务器的客户端数量max_connections，查询缓存的大小query_cache_size，这些公有的系统变量让某个客户端私有显然不合适。</li>\n<li>一个新连接到服务器的客户端对应的系统变量的值该怎么设置？<blockquote>\n<p>为了解决这两个问题，设计MySQL的大佬提出了系统变量的作用范围的概念，具体来说作用范围分为这两种,GLOBAL（全局变量，影响服务器整体操作）和SESSION（会话变量，影响某个客户端连接的操作，别名LOCAL）通过启动选项设置的系统变量的作用范围都是GLOBAL的，也就是对所有客户端都有效的</p>\n</blockquote>\n</li>\n</ul>\n<p>在服务器程序运行期间通过客户端程序设置系统变量的语法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SET [GLOBAL|SESSION] 系统变量名 = 值;</span><br></pre></td></tr></table></figure>\n<h5 id=\"查看不同作用范围的系统变量\"><a href=\"#查看不同作用范围的系统变量\" class=\"headerlink\" title=\"查看不同作用范围的系统变量\"></a>查看不同作用范围的系统变量</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHOW [GLOBAL|SESSION] VARIABLES [LIKE 匹配的模式];</span><br></pre></td></tr></table></figure>\n<p>小贴士：如果某个客户端改变了某个系统变量在<code>GLOBAL</code>作用范围的值，并不会影响该系统变量在当前已经连接的客户端作用范围为<code>SESSION</code>的值，只会影响后续连入的客户端在作用范围为<code>SESSION</code>的值。</p>\n<h5 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h5><ul>\n<li><p>并不是所有系统变量都具有<code>GLOBAL</code>和<code>SESSION</code>的作用范围。</p>\n<ul>\n<li><p>有一些系统变量只具有<code>GLOBAL</code>作用范围，比方说<code>max_connections</code>，表示服务器程序支持同时最多有多少个客户端程序进行连接。</p>\n</li>\n<li><p>有一些系统变量只具有<code>SESSION</code>作用范围，比如<code>insert_id</code>，表示在对某个包含<code>AUTO_INCREMENT</code>列的表进行插入时，该列初始的值。</p>\n</li>\n<li><p>有一些系统变量的值既具有<code>GLOBAL</code>作用范围，也具有<code>SESSION</code>作用范围，比如我们前面用到的<code>default_storage_engine</code>，而且其实大部分的系统变量都是这样的，</p>\n</li>\n</ul>\n</li>\n<li><p>有些系统变量是只读的，并不能设置值。</p>\n<p>  比方说<code>version</code>，表示当前<code>MySQL</code>的版本，我们客户端是不能设置它的值的，只能在<code>SHOW VARIABLES</code>语句里查看。</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"系统变量简介\"><a href=\"#系统变量简介\" class=\"headerlink\" title=\"系统变量简介\"></a>系统变量简介</h3><blockquote>\n<p>MySQL服务器程序运行过程中会用到许多影响程序行为的变量，它们被称为MySQL系统变量，比如允许同时连入的客户端数量用系统变量max_connections表示，表的默认存储引擎用系统变量default_storage_engine表示，查询缓存的大小用系统变量query_cache_size表示，MySQL服务器程序的系统变量有好几百条，我们就不一一列举了。</p>\n</blockquote>\n<p>我们可以使用下列命令查看MySQL服务器程序支持的系统变量以及它们的当前值：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHOW VARIABLES [LIKE 匹配的模式];</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置系统变量\"><a href=\"#设置系统变量\" class=\"headerlink\" title=\"设置系统变量\"></a>设置系统变量</h3><h4 id=\"通过启动选项设置\"><a href=\"#通过启动选项设置\" class=\"headerlink\" title=\"通过启动选项设置\"></a>通过启动选项设置</h4><p>1.通过命令行添加启动选项。<br>2.通过配置文件添加启动选项</p>\n<h4 id=\"服务器程序运行过程中设置\"><a href=\"#服务器程序运行过程中设置\" class=\"headerlink\" title=\"服务器程序运行过程中设置\"></a>服务器程序运行过程中设置</h4><h5 id=\"设置不同作用范围的系统变量\"><a href=\"#设置不同作用范围的系统变量\" class=\"headerlink\" title=\"设置不同作用范围的系统变量\"></a>设置不同作用范围的系统变量</h5><blockquote>\n<p>我们前面说过，多个客户端程序可以同时连接到一个服务器程序。对于同一个系统变量，我们有时想让不同的客户端有不同的值。比方说狗哥使用客户端A，他想让当前客户端对应的默认存储引擎为InnoDB，所以他可以把系统变量default_storage_engine的值设置为InnoDB；猫爷使用客户端B，他想让当前客户端对应的默认存储引擎为MyISAM，所以他可以把系统变量default_storage_engine的值设置为MyISAM。这样可以使狗哥和猫爷的的客户端拥有不同的默认存储引擎，使用时互不影响，十分方便。但是这样各个客户端都私有一份系统变量会产生这么两个问题：</p>\n</blockquote>\n<ul>\n<li>有一些系统变量并不是针对单个客户端的，比如允许同时连接到服务器的客户端数量max_connections，查询缓存的大小query_cache_size，这些公有的系统变量让某个客户端私有显然不合适。</li>\n<li>一个新连接到服务器的客户端对应的系统变量的值该怎么设置？<blockquote>\n<p>为了解决这两个问题，设计MySQL的大佬提出了系统变量的作用范围的概念，具体来说作用范围分为这两种,GLOBAL（全局变量，影响服务器整体操作）和SESSION（会话变量，影响某个客户端连接的操作，别名LOCAL）通过启动选项设置的系统变量的作用范围都是GLOBAL的，也就是对所有客户端都有效的</p>\n</blockquote>\n</li>\n</ul>\n<p>在服务器程序运行期间通过客户端程序设置系统变量的语法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SET [GLOBAL|SESSION] 系统变量名 = 值;</span><br></pre></td></tr></table></figure>\n<h5 id=\"查看不同作用范围的系统变量\"><a href=\"#查看不同作用范围的系统变量\" class=\"headerlink\" title=\"查看不同作用范围的系统变量\"></a>查看不同作用范围的系统变量</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHOW [GLOBAL|SESSION] VARIABLES [LIKE 匹配的模式];</span><br></pre></td></tr></table></figure>\n<p>小贴士：如果某个客户端改变了某个系统变量在<code>GLOBAL</code>作用范围的值，并不会影响该系统变量在当前已经连接的客户端作用范围为<code>SESSION</code>的值，只会影响后续连入的客户端在作用范围为<code>SESSION</code>的值。</p>\n<h5 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h5><ul>\n<li><p>并不是所有系统变量都具有<code>GLOBAL</code>和<code>SESSION</code>的作用范围。</p>\n<ul>\n<li><p>有一些系统变量只具有<code>GLOBAL</code>作用范围，比方说<code>max_connections</code>，表示服务器程序支持同时最多有多少个客户端程序进行连接。</p>\n</li>\n<li><p>有一些系统变量只具有<code>SESSION</code>作用范围，比如<code>insert_id</code>，表示在对某个包含<code>AUTO_INCREMENT</code>列的表进行插入时，该列初始的值。</p>\n</li>\n<li><p>有一些系统变量的值既具有<code>GLOBAL</code>作用范围，也具有<code>SESSION</code>作用范围，比如我们前面用到的<code>default_storage_engine</code>，而且其实大部分的系统变量都是这样的，</p>\n</li>\n</ul>\n</li>\n<li><p>有些系统变量是只读的，并不能设置值。</p>\n<p>  比方说<code>version</code>，表示当前<code>MySQL</code>的版本，我们客户端是不能设置它的值的，只能在<code>SHOW VARIABLES</code>语句里查看。</p>\n</li>\n</ul>\n"},{"title":"3.状态变量","date":"2023-05-27T18:16:34.000Z","_content":"\n\n### 状态变量\n>为了让我们更好的了解服务器程序的运行情况，MySQL服务器程序中维护了很多关于程序运行状态的变量，它们被称为状态变量。比方说Threads_connected表示当前有多少客户端与服务器建立了连接，Handler_update表示已经更新了多少行记录等，像这样显示服务器程序状态信息的状态变量还有好几百个，我们就不一一介绍了，等遇到了会详细说它们的作用的。\n\n  由于状态变量是用来显示服务器程序运行状况的，所以它们的值只能由服务器程序自己来设置，我们程序员是不能设置的。与系统变量类似，状态变量也有GLOBAL和SESSION两个作用范围的，所以查看状态变量的语句可以这么写：\n```\nSHOW [GLOBAL|SESSION] STATUS [LIKE 匹配的模式];\n```","source":"_posts/3-状态变量.md","raw":"---\ntitle: 3.状态变量\ndate: 2023-05-27 14:16:34\ntags: [MySQL,MySQL是怎样运行的]\ncategories: 数据库\n---\n\n\n### 状态变量\n>为了让我们更好的了解服务器程序的运行情况，MySQL服务器程序中维护了很多关于程序运行状态的变量，它们被称为状态变量。比方说Threads_connected表示当前有多少客户端与服务器建立了连接，Handler_update表示已经更新了多少行记录等，像这样显示服务器程序状态信息的状态变量还有好几百个，我们就不一一介绍了，等遇到了会详细说它们的作用的。\n\n  由于状态变量是用来显示服务器程序运行状况的，所以它们的值只能由服务器程序自己来设置，我们程序员是不能设置的。与系统变量类似，状态变量也有GLOBAL和SESSION两个作用范围的，所以查看状态变量的语句可以这么写：\n```\nSHOW [GLOBAL|SESSION] STATUS [LIKE 匹配的模式];\n```","slug":"3-状态变量","published":1,"updated":"2023-10-01T02:55:45.143Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cln6ws35u000m5gi56bnrenl6","content":"<h3 id=\"状态变量\"><a href=\"#状态变量\" class=\"headerlink\" title=\"状态变量\"></a>状态变量</h3><blockquote>\n<p>为了让我们更好的了解服务器程序的运行情况，MySQL服务器程序中维护了很多关于程序运行状态的变量，它们被称为状态变量。比方说Threads_connected表示当前有多少客户端与服务器建立了连接，Handler_update表示已经更新了多少行记录等，像这样显示服务器程序状态信息的状态变量还有好几百个，我们就不一一介绍了，等遇到了会详细说它们的作用的。</p>\n</blockquote>\n<p>  由于状态变量是用来显示服务器程序运行状况的，所以它们的值只能由服务器程序自己来设置，我们程序员是不能设置的。与系统变量类似，状态变量也有GLOBAL和SESSION两个作用范围的，所以查看状态变量的语句可以这么写：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHOW [GLOBAL|SESSION] STATUS [LIKE 匹配的模式];</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"状态变量\"><a href=\"#状态变量\" class=\"headerlink\" title=\"状态变量\"></a>状态变量</h3><blockquote>\n<p>为了让我们更好的了解服务器程序的运行情况，MySQL服务器程序中维护了很多关于程序运行状态的变量，它们被称为状态变量。比方说Threads_connected表示当前有多少客户端与服务器建立了连接，Handler_update表示已经更新了多少行记录等，像这样显示服务器程序状态信息的状态变量还有好几百个，我们就不一一介绍了，等遇到了会详细说它们的作用的。</p>\n</blockquote>\n<p>  由于状态变量是用来显示服务器程序运行状况的，所以它们的值只能由服务器程序自己来设置，我们程序员是不能设置的。与系统变量类似，状态变量也有GLOBAL和SESSION两个作用范围的，所以查看状态变量的语句可以这么写：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHOW [GLOBAL|SESSION] STATUS [LIKE 匹配的模式];</span><br></pre></td></tr></table></figure>"},{"title":"4.字符集和比较规则","date":"2023-05-27T18:17:04.000Z","_content":"## ASCII字符集\n>总共128个字符，包括一些不可见字符\n## ISO 8859-1 字符集（latin1）\n>共收录256个字符，是在ASCII字符集的基础上又扩充了128个西欧常用字符（包括德法两国的字母），也可以使用1个字节来进行编码。\n## GB2312字符集\n>收录了汉字以及拉丁字母，希腊字母 收录了汉字以及拉丁字母、希腊字母、日文平假名及片假名字母、俄语西里尔字母。其中收录汉字6763个，其他文字符号682个。同时这种字符集又兼容ASCII字符集，所以在编码方式上显得有些奇怪：\n1.如果该字符在ASCII字符集中，则采用1字节编码\n2.否则采用2字节编码\n## GBK字符集\n>GBK字符集只是在收录字符范围上对GB2312字符集作了扩充，编码方式上兼容GB2312\n## utf8字符集\n>收录地球上能想到的所有字符，而且还在不断扩充。这种字符集兼容ASCII字符集，采用变长编码方式，编码一个字符需要使用1～4个字节\n\n**其实准确的说，utf8只是Unicode字符集的一种编码方案，Unicode字符集可以采用utf8、utf16、utf32这几种编码方案，utf8使用1～4个字节编码一个字符，utf16使用2个或4个字节编码一个字符，utf32使用4个字节编码一个字符。更详细的Unicode和其编码方案的知识不是本书的重点，大家上网查查。MySQL中并不区分字符集和编码方案的概念，所以后边介绍的时候把utf8、utf16、utf32都当作一种字符集对待。** \n\n## MySQL中支持的字符集和排序规则\n#### MySQL中的utf8和utf8mb4\n- utf8mb3：阉割过的utf8字符集，只使用1～3个字节表示字符。\n- utf8mb4：正宗的utf8字符集，使用1～4个字节表示字符。\n\n#### MySQL字符集的查看\n```\nSHOW (CHARACTER SET|CHARSET) [LIKE 匹配的模式];\n```\n\n#### MySQL比较规则的查看\n```\nSHOW COLLATION [LIKE 匹配的模式];\n```\n#### 各个级别的字符集和比较规则\n- 服务器级别\nMySQL提供了两个系统变量来表示服务器级别的字符集和比较规则:\n![QQ截图20221205152423.png](images/4_1.jpg)\n服务器级别默认的字符集是utf8，默认的比较规则是utf8_general_ci\n可以用以下命令查看：\n```\nSHOW VARIABLES LIKE [匹配模式]\n```\n- 数据库级别\n我们在创建和修改数据库的时候可以指定该数据库的字符集和比较规则\n```\nCREATE DATABASE 数据库名\n    [[DEFAULT] CHARACTER SET 字符集名称]\n    [[DEFAULT] COLLATE 比较规则名称];\n\nALTER DATABASE 数据库名\n    [[DEFAULT] CHARACTER SET 字符集名称]\n    [[DEFAULT] COLLATE 比较规则名称];\n```\n如果想查看当前数据库使用的字符集和比较规则，可以查看下面两个系统变量的值（前提是使用USE语句选择当前默认数据库，如果没有默认数据库，则变量与相应的服务器级系统变量具有相同的值）：\n![QQ截图20221205153115.png](images/4_2.jpg)\n\n- 表级别\n我们也可以在创建和修改表的时候指定表的字符集和比较规则，语法如下：\n```\nCREATE TABLE 表名 (列的信息)\n    [[DEFAULT] CHARACTER SET 字符集名称]\n    [COLLATE 比较规则名称]\n\nALTER TABLE 表名\n    [[DEFAULT] CHARACTER SET 字符集名称]\n    [COLLATE 比较规则名称]\n```\n\n- 列级别\n需要注意的是，对于存储字符串的列，同一个表中的不同的列也可以有不同的字符集和比较规则。我们在创建和修改列定义的时候可以指定该列的字符集和比较规则，语法如下：\n```\nCREATE TABLE 表名(\n    列名 字符串类型 [CHARACTER SET 字符集名称] [COLLATE 比较规则名称],\n    其他列...\n);\n\nALTER TABLE 表名 MODIFY 列名 字符串类型 [CHARACTER SET 字符集名称] [COLLATE 比较规则名称];\n\n```\n对于某个列来说，如果在创建和修改的语句中没有指明字符集和比较规则，将使用该列所在表的字符集和比较规则作为该列的字符集和比较规则。\n**小贴士：在转换列的字符集时需要注意，如果转换前列中存储的数据不能用转换后的字符集进行表示，就会发生错误。比方说原先列使用的字符集是utf8，列中存储了一些汉字，现在把列的字符集转换为ascii的话就会出错，因为ascii字符集并不能表示汉字字符。**\n\n## MySQL中字符集的转换\n>我们知道从客户端发往服务器的请求本质上就是一个字符串，服务器向客户端返回的结果本质上也是一个字符串，而字符串其实是使用某种字符集编码的二进制数据。\n\n![QQ截图20221205153733.png](images/4_3.jpg)\n\n![QQ截图20221205153848.png](images/4_4.jpg)\n\n","source":"_posts/4-字符集和比较规则.md","raw":"---\ntitle: 4.字符集和比较规则\ndate: 2023-05-27 14:17:04\ntags: [MySQL,MySQL是怎样运行的]\ncategories: 数据库\n---\n## ASCII字符集\n>总共128个字符，包括一些不可见字符\n## ISO 8859-1 字符集（latin1）\n>共收录256个字符，是在ASCII字符集的基础上又扩充了128个西欧常用字符（包括德法两国的字母），也可以使用1个字节来进行编码。\n## GB2312字符集\n>收录了汉字以及拉丁字母，希腊字母 收录了汉字以及拉丁字母、希腊字母、日文平假名及片假名字母、俄语西里尔字母。其中收录汉字6763个，其他文字符号682个。同时这种字符集又兼容ASCII字符集，所以在编码方式上显得有些奇怪：\n1.如果该字符在ASCII字符集中，则采用1字节编码\n2.否则采用2字节编码\n## GBK字符集\n>GBK字符集只是在收录字符范围上对GB2312字符集作了扩充，编码方式上兼容GB2312\n## utf8字符集\n>收录地球上能想到的所有字符，而且还在不断扩充。这种字符集兼容ASCII字符集，采用变长编码方式，编码一个字符需要使用1～4个字节\n\n**其实准确的说，utf8只是Unicode字符集的一种编码方案，Unicode字符集可以采用utf8、utf16、utf32这几种编码方案，utf8使用1～4个字节编码一个字符，utf16使用2个或4个字节编码一个字符，utf32使用4个字节编码一个字符。更详细的Unicode和其编码方案的知识不是本书的重点，大家上网查查。MySQL中并不区分字符集和编码方案的概念，所以后边介绍的时候把utf8、utf16、utf32都当作一种字符集对待。** \n\n## MySQL中支持的字符集和排序规则\n#### MySQL中的utf8和utf8mb4\n- utf8mb3：阉割过的utf8字符集，只使用1～3个字节表示字符。\n- utf8mb4：正宗的utf8字符集，使用1～4个字节表示字符。\n\n#### MySQL字符集的查看\n```\nSHOW (CHARACTER SET|CHARSET) [LIKE 匹配的模式];\n```\n\n#### MySQL比较规则的查看\n```\nSHOW COLLATION [LIKE 匹配的模式];\n```\n#### 各个级别的字符集和比较规则\n- 服务器级别\nMySQL提供了两个系统变量来表示服务器级别的字符集和比较规则:\n![QQ截图20221205152423.png](images/4_1.jpg)\n服务器级别默认的字符集是utf8，默认的比较规则是utf8_general_ci\n可以用以下命令查看：\n```\nSHOW VARIABLES LIKE [匹配模式]\n```\n- 数据库级别\n我们在创建和修改数据库的时候可以指定该数据库的字符集和比较规则\n```\nCREATE DATABASE 数据库名\n    [[DEFAULT] CHARACTER SET 字符集名称]\n    [[DEFAULT] COLLATE 比较规则名称];\n\nALTER DATABASE 数据库名\n    [[DEFAULT] CHARACTER SET 字符集名称]\n    [[DEFAULT] COLLATE 比较规则名称];\n```\n如果想查看当前数据库使用的字符集和比较规则，可以查看下面两个系统变量的值（前提是使用USE语句选择当前默认数据库，如果没有默认数据库，则变量与相应的服务器级系统变量具有相同的值）：\n![QQ截图20221205153115.png](images/4_2.jpg)\n\n- 表级别\n我们也可以在创建和修改表的时候指定表的字符集和比较规则，语法如下：\n```\nCREATE TABLE 表名 (列的信息)\n    [[DEFAULT] CHARACTER SET 字符集名称]\n    [COLLATE 比较规则名称]\n\nALTER TABLE 表名\n    [[DEFAULT] CHARACTER SET 字符集名称]\n    [COLLATE 比较规则名称]\n```\n\n- 列级别\n需要注意的是，对于存储字符串的列，同一个表中的不同的列也可以有不同的字符集和比较规则。我们在创建和修改列定义的时候可以指定该列的字符集和比较规则，语法如下：\n```\nCREATE TABLE 表名(\n    列名 字符串类型 [CHARACTER SET 字符集名称] [COLLATE 比较规则名称],\n    其他列...\n);\n\nALTER TABLE 表名 MODIFY 列名 字符串类型 [CHARACTER SET 字符集名称] [COLLATE 比较规则名称];\n\n```\n对于某个列来说，如果在创建和修改的语句中没有指明字符集和比较规则，将使用该列所在表的字符集和比较规则作为该列的字符集和比较规则。\n**小贴士：在转换列的字符集时需要注意，如果转换前列中存储的数据不能用转换后的字符集进行表示，就会发生错误。比方说原先列使用的字符集是utf8，列中存储了一些汉字，现在把列的字符集转换为ascii的话就会出错，因为ascii字符集并不能表示汉字字符。**\n\n## MySQL中字符集的转换\n>我们知道从客户端发往服务器的请求本质上就是一个字符串，服务器向客户端返回的结果本质上也是一个字符串，而字符串其实是使用某种字符集编码的二进制数据。\n\n![QQ截图20221205153733.png](images/4_3.jpg)\n\n![QQ截图20221205153848.png](images/4_4.jpg)\n\n","slug":"4-字符集和比较规则","published":1,"updated":"2023-10-01T02:55:45.143Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cln6ws35w000q5gi535fb0dd8","content":"<h2 id=\"ASCII字符集\"><a href=\"#ASCII字符集\" class=\"headerlink\" title=\"ASCII字符集\"></a>ASCII字符集</h2><blockquote>\n<p>总共128个字符，包括一些不可见字符</p>\n</blockquote>\n<h2 id=\"ISO-8859-1-字符集（latin1）\"><a href=\"#ISO-8859-1-字符集（latin1）\" class=\"headerlink\" title=\"ISO 8859-1 字符集（latin1）\"></a>ISO 8859-1 字符集（latin1）</h2><blockquote>\n<p>共收录256个字符，是在ASCII字符集的基础上又扩充了128个西欧常用字符（包括德法两国的字母），也可以使用1个字节来进行编码。</p>\n</blockquote>\n<h2 id=\"GB2312字符集\"><a href=\"#GB2312字符集\" class=\"headerlink\" title=\"GB2312字符集\"></a>GB2312字符集</h2><blockquote>\n<p>收录了汉字以及拉丁字母，希腊字母 收录了汉字以及拉丁字母、希腊字母、日文平假名及片假名字母、俄语西里尔字母。其中收录汉字6763个，其他文字符号682个。同时这种字符集又兼容ASCII字符集，所以在编码方式上显得有些奇怪：<br>1.如果该字符在ASCII字符集中，则采用1字节编码<br>2.否则采用2字节编码</p>\n</blockquote>\n<h2 id=\"GBK字符集\"><a href=\"#GBK字符集\" class=\"headerlink\" title=\"GBK字符集\"></a>GBK字符集</h2><blockquote>\n<p>GBK字符集只是在收录字符范围上对GB2312字符集作了扩充，编码方式上兼容GB2312</p>\n</blockquote>\n<h2 id=\"utf8字符集\"><a href=\"#utf8字符集\" class=\"headerlink\" title=\"utf8字符集\"></a>utf8字符集</h2><blockquote>\n<p>收录地球上能想到的所有字符，而且还在不断扩充。这种字符集兼容ASCII字符集，采用变长编码方式，编码一个字符需要使用1～4个字节</p>\n</blockquote>\n<p><strong>其实准确的说，utf8只是Unicode字符集的一种编码方案，Unicode字符集可以采用utf8、utf16、utf32这几种编码方案，utf8使用1～4个字节编码一个字符，utf16使用2个或4个字节编码一个字符，utf32使用4个字节编码一个字符。更详细的Unicode和其编码方案的知识不是本书的重点，大家上网查查。MySQL中并不区分字符集和编码方案的概念，所以后边介绍的时候把utf8、utf16、utf32都当作一种字符集对待。</strong> </p>\n<h2 id=\"MySQL中支持的字符集和排序规则\"><a href=\"#MySQL中支持的字符集和排序规则\" class=\"headerlink\" title=\"MySQL中支持的字符集和排序规则\"></a>MySQL中支持的字符集和排序规则</h2><h4 id=\"MySQL中的utf8和utf8mb4\"><a href=\"#MySQL中的utf8和utf8mb4\" class=\"headerlink\" title=\"MySQL中的utf8和utf8mb4\"></a>MySQL中的utf8和utf8mb4</h4><ul>\n<li>utf8mb3：阉割过的utf8字符集，只使用1～3个字节表示字符。</li>\n<li>utf8mb4：正宗的utf8字符集，使用1～4个字节表示字符。</li>\n</ul>\n<h4 id=\"MySQL字符集的查看\"><a href=\"#MySQL字符集的查看\" class=\"headerlink\" title=\"MySQL字符集的查看\"></a>MySQL字符集的查看</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHOW (CHARACTER SET|CHARSET) [LIKE 匹配的模式];</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"MySQL比较规则的查看\"><a href=\"#MySQL比较规则的查看\" class=\"headerlink\" title=\"MySQL比较规则的查看\"></a>MySQL比较规则的查看</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHOW COLLATION [LIKE 匹配的模式];</span><br></pre></td></tr></table></figure>\n<h4 id=\"各个级别的字符集和比较规则\"><a href=\"#各个级别的字符集和比较规则\" class=\"headerlink\" title=\"各个级别的字符集和比较规则\"></a>各个级别的字符集和比较规则</h4><ul>\n<li><p>服务器级别<br>MySQL提供了两个系统变量来表示服务器级别的字符集和比较规则:<br><img src=\"/images/4_1.jpg\" alt=\"QQ截图20221205152423.png\"><br>服务器级别默认的字符集是utf8，默认的比较规则是utf8_general_ci<br>可以用以下命令查看：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHOW VARIABLES LIKE [匹配模式]</span><br></pre></td></tr></table></figure></li>\n<li><p>数据库级别<br>我们在创建和修改数据库的时候可以指定该数据库的字符集和比较规则</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE DATABASE 数据库名</span><br><span class=\"line\">    [[DEFAULT] CHARACTER SET 字符集名称]</span><br><span class=\"line\">    [[DEFAULT] COLLATE 比较规则名称];</span><br><span class=\"line\"></span><br><span class=\"line\">ALTER DATABASE 数据库名</span><br><span class=\"line\">    [[DEFAULT] CHARACTER SET 字符集名称]</span><br><span class=\"line\">    [[DEFAULT] COLLATE 比较规则名称];</span><br></pre></td></tr></table></figure>\n<p>如果想查看当前数据库使用的字符集和比较规则，可以查看下面两个系统变量的值（前提是使用USE语句选择当前默认数据库，如果没有默认数据库，则变量与相应的服务器级系统变量具有相同的值）：<br><img src=\"/images/4_2.jpg\" alt=\"QQ截图20221205153115.png\"></p>\n</li>\n<li><p>表级别<br>我们也可以在创建和修改表的时候指定表的字符集和比较规则，语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE 表名 (列的信息)</span><br><span class=\"line\">    [[DEFAULT] CHARACTER SET 字符集名称]</span><br><span class=\"line\">    [COLLATE 比较规则名称]</span><br><span class=\"line\"></span><br><span class=\"line\">ALTER TABLE 表名</span><br><span class=\"line\">    [[DEFAULT] CHARACTER SET 字符集名称]</span><br><span class=\"line\">    [COLLATE 比较规则名称]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>列级别<br>需要注意的是，对于存储字符串的列，同一个表中的不同的列也可以有不同的字符集和比较规则。我们在创建和修改列定义的时候可以指定该列的字符集和比较规则，语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE 表名(</span><br><span class=\"line\">    列名 字符串类型 [CHARACTER SET 字符集名称] [COLLATE 比较规则名称],</span><br><span class=\"line\">    其他列...</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">ALTER TABLE 表名 MODIFY 列名 字符串类型 [CHARACTER SET 字符集名称] [COLLATE 比较规则名称];</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>对于某个列来说，如果在创建和修改的语句中没有指明字符集和比较规则，将使用该列所在表的字符集和比较规则作为该列的字符集和比较规则。<br><strong>小贴士：在转换列的字符集时需要注意，如果转换前列中存储的数据不能用转换后的字符集进行表示，就会发生错误。比方说原先列使用的字符集是utf8，列中存储了一些汉字，现在把列的字符集转换为ascii的话就会出错，因为ascii字符集并不能表示汉字字符。</strong></p>\n</li>\n</ul>\n<h2 id=\"MySQL中字符集的转换\"><a href=\"#MySQL中字符集的转换\" class=\"headerlink\" title=\"MySQL中字符集的转换\"></a>MySQL中字符集的转换</h2><blockquote>\n<p>我们知道从客户端发往服务器的请求本质上就是一个字符串，服务器向客户端返回的结果本质上也是一个字符串，而字符串其实是使用某种字符集编码的二进制数据。</p>\n</blockquote>\n<p><img src=\"/images/4_3.jpg\" alt=\"QQ截图20221205153733.png\"></p>\n<p><img src=\"/images/4_4.jpg\" alt=\"QQ截图20221205153848.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"ASCII字符集\"><a href=\"#ASCII字符集\" class=\"headerlink\" title=\"ASCII字符集\"></a>ASCII字符集</h2><blockquote>\n<p>总共128个字符，包括一些不可见字符</p>\n</blockquote>\n<h2 id=\"ISO-8859-1-字符集（latin1）\"><a href=\"#ISO-8859-1-字符集（latin1）\" class=\"headerlink\" title=\"ISO 8859-1 字符集（latin1）\"></a>ISO 8859-1 字符集（latin1）</h2><blockquote>\n<p>共收录256个字符，是在ASCII字符集的基础上又扩充了128个西欧常用字符（包括德法两国的字母），也可以使用1个字节来进行编码。</p>\n</blockquote>\n<h2 id=\"GB2312字符集\"><a href=\"#GB2312字符集\" class=\"headerlink\" title=\"GB2312字符集\"></a>GB2312字符集</h2><blockquote>\n<p>收录了汉字以及拉丁字母，希腊字母 收录了汉字以及拉丁字母、希腊字母、日文平假名及片假名字母、俄语西里尔字母。其中收录汉字6763个，其他文字符号682个。同时这种字符集又兼容ASCII字符集，所以在编码方式上显得有些奇怪：<br>1.如果该字符在ASCII字符集中，则采用1字节编码<br>2.否则采用2字节编码</p>\n</blockquote>\n<h2 id=\"GBK字符集\"><a href=\"#GBK字符集\" class=\"headerlink\" title=\"GBK字符集\"></a>GBK字符集</h2><blockquote>\n<p>GBK字符集只是在收录字符范围上对GB2312字符集作了扩充，编码方式上兼容GB2312</p>\n</blockquote>\n<h2 id=\"utf8字符集\"><a href=\"#utf8字符集\" class=\"headerlink\" title=\"utf8字符集\"></a>utf8字符集</h2><blockquote>\n<p>收录地球上能想到的所有字符，而且还在不断扩充。这种字符集兼容ASCII字符集，采用变长编码方式，编码一个字符需要使用1～4个字节</p>\n</blockquote>\n<p><strong>其实准确的说，utf8只是Unicode字符集的一种编码方案，Unicode字符集可以采用utf8、utf16、utf32这几种编码方案，utf8使用1～4个字节编码一个字符，utf16使用2个或4个字节编码一个字符，utf32使用4个字节编码一个字符。更详细的Unicode和其编码方案的知识不是本书的重点，大家上网查查。MySQL中并不区分字符集和编码方案的概念，所以后边介绍的时候把utf8、utf16、utf32都当作一种字符集对待。</strong> </p>\n<h2 id=\"MySQL中支持的字符集和排序规则\"><a href=\"#MySQL中支持的字符集和排序规则\" class=\"headerlink\" title=\"MySQL中支持的字符集和排序规则\"></a>MySQL中支持的字符集和排序规则</h2><h4 id=\"MySQL中的utf8和utf8mb4\"><a href=\"#MySQL中的utf8和utf8mb4\" class=\"headerlink\" title=\"MySQL中的utf8和utf8mb4\"></a>MySQL中的utf8和utf8mb4</h4><ul>\n<li>utf8mb3：阉割过的utf8字符集，只使用1～3个字节表示字符。</li>\n<li>utf8mb4：正宗的utf8字符集，使用1～4个字节表示字符。</li>\n</ul>\n<h4 id=\"MySQL字符集的查看\"><a href=\"#MySQL字符集的查看\" class=\"headerlink\" title=\"MySQL字符集的查看\"></a>MySQL字符集的查看</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHOW (CHARACTER SET|CHARSET) [LIKE 匹配的模式];</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"MySQL比较规则的查看\"><a href=\"#MySQL比较规则的查看\" class=\"headerlink\" title=\"MySQL比较规则的查看\"></a>MySQL比较规则的查看</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHOW COLLATION [LIKE 匹配的模式];</span><br></pre></td></tr></table></figure>\n<h4 id=\"各个级别的字符集和比较规则\"><a href=\"#各个级别的字符集和比较规则\" class=\"headerlink\" title=\"各个级别的字符集和比较规则\"></a>各个级别的字符集和比较规则</h4><ul>\n<li><p>服务器级别<br>MySQL提供了两个系统变量来表示服务器级别的字符集和比较规则:<br><img src=\"/images/4_1.jpg\" alt=\"QQ截图20221205152423.png\"><br>服务器级别默认的字符集是utf8，默认的比较规则是utf8_general_ci<br>可以用以下命令查看：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHOW VARIABLES LIKE [匹配模式]</span><br></pre></td></tr></table></figure></li>\n<li><p>数据库级别<br>我们在创建和修改数据库的时候可以指定该数据库的字符集和比较规则</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE DATABASE 数据库名</span><br><span class=\"line\">    [[DEFAULT] CHARACTER SET 字符集名称]</span><br><span class=\"line\">    [[DEFAULT] COLLATE 比较规则名称];</span><br><span class=\"line\"></span><br><span class=\"line\">ALTER DATABASE 数据库名</span><br><span class=\"line\">    [[DEFAULT] CHARACTER SET 字符集名称]</span><br><span class=\"line\">    [[DEFAULT] COLLATE 比较规则名称];</span><br></pre></td></tr></table></figure>\n<p>如果想查看当前数据库使用的字符集和比较规则，可以查看下面两个系统变量的值（前提是使用USE语句选择当前默认数据库，如果没有默认数据库，则变量与相应的服务器级系统变量具有相同的值）：<br><img src=\"/images/4_2.jpg\" alt=\"QQ截图20221205153115.png\"></p>\n</li>\n<li><p>表级别<br>我们也可以在创建和修改表的时候指定表的字符集和比较规则，语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE 表名 (列的信息)</span><br><span class=\"line\">    [[DEFAULT] CHARACTER SET 字符集名称]</span><br><span class=\"line\">    [COLLATE 比较规则名称]</span><br><span class=\"line\"></span><br><span class=\"line\">ALTER TABLE 表名</span><br><span class=\"line\">    [[DEFAULT] CHARACTER SET 字符集名称]</span><br><span class=\"line\">    [COLLATE 比较规则名称]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>列级别<br>需要注意的是，对于存储字符串的列，同一个表中的不同的列也可以有不同的字符集和比较规则。我们在创建和修改列定义的时候可以指定该列的字符集和比较规则，语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE 表名(</span><br><span class=\"line\">    列名 字符串类型 [CHARACTER SET 字符集名称] [COLLATE 比较规则名称],</span><br><span class=\"line\">    其他列...</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">ALTER TABLE 表名 MODIFY 列名 字符串类型 [CHARACTER SET 字符集名称] [COLLATE 比较规则名称];</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>对于某个列来说，如果在创建和修改的语句中没有指明字符集和比较规则，将使用该列所在表的字符集和比较规则作为该列的字符集和比较规则。<br><strong>小贴士：在转换列的字符集时需要注意，如果转换前列中存储的数据不能用转换后的字符集进行表示，就会发生错误。比方说原先列使用的字符集是utf8，列中存储了一些汉字，现在把列的字符集转换为ascii的话就会出错，因为ascii字符集并不能表示汉字字符。</strong></p>\n</li>\n</ul>\n<h2 id=\"MySQL中字符集的转换\"><a href=\"#MySQL中字符集的转换\" class=\"headerlink\" title=\"MySQL中字符集的转换\"></a>MySQL中字符集的转换</h2><blockquote>\n<p>我们知道从客户端发往服务器的请求本质上就是一个字符串，服务器向客户端返回的结果本质上也是一个字符串，而字符串其实是使用某种字符集编码的二进制数据。</p>\n</blockquote>\n<p><img src=\"/images/4_3.jpg\" alt=\"QQ截图20221205153733.png\"></p>\n<p><img src=\"/images/4_4.jpg\" alt=\"QQ截图20221205153848.png\"></p>\n"},{"title":"5.InnoDB记录行格式","date":"2023-05-27T18:17:56.000Z","_content":"# InnoDB页简介\n>InnoDB是一个将表中的数据存储到磁盘上的存储引擎。由于磁盘IO和内存IO速度差了几个量级，InnoDB采取的方式是：**将数据划分为若干个页，以页作为磁盘和内存之间的交互的基本单位，InnoDB中页的大小一般为16KB**。\n\n# InnoDB行格式\n>我们平时是以记录为单位来向表中插入数据的，这些记录在磁盘上的存放方式也被称为**行格式**或者**记录格式**\n### 指定行格式的语法\n```\nCREATE TABLE 表名 (列的信息) ROW_FORMAT=行格式名称\n    \nALTER TABLE 表名 ROW_FORMAT=行格式名称\n\n```\n### COMPACT行格式\n![QQ截图20221205160357.png](images/5_1.jpg)\n\n一条完整的记录其实可以被分为记录的额外信息和记录的真实数据两大部分。\n- 记录的额外信息：服务器为了描述这条记录而不得不添加的一些信息，分为3类，变长字段长度列表、NULL值列表、记录头信息\n1.变长字段长度列表：MySQL支持一些变长的数据类型，比如VARCHAR(M)、VARBINARY(M)、各种TEXT类型，各种BLOB类型，这些变长字段占用的存储空间分为两部分（真正的数据内容和占用的字节数），对于CHAR(M）类型的列来说，当列采用的是定长字符集时，该列占用的字节数不会被加到变长字段长度列表，而如果采用变长字符集时，该列占用的字节数也会被加到变长字段长度列表\n**在COMPACT行格式中，把所有的变长字段的真实数据占用的字节长度都存放在记录的开头部位，从而形成一个变长字段长度列表，按逆序排放**\n2.NULL值列表：处理过程是这样的，先统计表中哪些列允许存储NULL值(主键列、被NOT NULL修饰的列都是不可以存储NULL值的)，所以在统计的时候不会把这些列算进去，接着如果有的列可以存储NULL值，那么就需要NULL值列表，将每个允许存储NULL的列对应一个二进制位（为1代表该列值为NULL，为0代表不为NULL），其次MySQL规定NULL值列表必须用整数个字节的位表示，如果使用的二进制位个数不是整数个字节，则在字节的高位补0\n3.记录头信息：它是由固定的5个字节组成，不同位代表不同意思\n![QQ截图20221205161836.png](images/5_2.jpg)\n\n- 记录的真实数据\nMySQL会为每个记录默认的添加一些列（也称为隐藏列），具体的列如下：\n![QQ截图20221205162406.png](images/5_3.jpg)\nInnoDB表对主键的生成策略:优先使用用户自定义主键作为主键，如果用户没有定义主键，则选取一个Unique键作为主键，如果表中连Unique键都没有定义的化，则InnoDB会为表默认添加一个名为row_id的隐藏列作为主键\n\n### Redundant行格式\n![QQ截图20221207112201.png](images/5_4.jpg)\n- 记录的额外信息\n1.字段长度偏移列表：与compact行格式相比，没有了变长两个字，多了偏移两个字，Redundant的行格式会把该条记录中所有（包括隐藏列）的长度信息都按照逆序存储到字段长度偏移列表。同时Redundant的行格式是按照两个相邻数值的差值来计算各个列值的长度。\n![QQ截图20221207115628.png](images/5_5.jpg)\n\n- 记录头信息\n![QQ截图20221207113712.png](images/5_6.jpg)\n![QQ截图20221207113735.png](images/5_7.jpg)\n\n对于Compact和Reduntant行格式来说，如果某一列中的数据非常多的话，在本记录的真实数据处只会存储该列的前768个字节的数据和一个指向其它页的地址，然后把剩下的数据存放到其它页中，这个过程叫做**行溢出，存储超出768字节的那些页也被称为溢出页**","source":"_posts/5-InnoDB记录行格式.md","raw":"---\ntitle: 5.InnoDB记录行格式\ndate: 2023-05-27 14:17:56\ntags: [MySQL,MySQL是怎样运行的]\ncategories: 数据库\n---\n# InnoDB页简介\n>InnoDB是一个将表中的数据存储到磁盘上的存储引擎。由于磁盘IO和内存IO速度差了几个量级，InnoDB采取的方式是：**将数据划分为若干个页，以页作为磁盘和内存之间的交互的基本单位，InnoDB中页的大小一般为16KB**。\n\n# InnoDB行格式\n>我们平时是以记录为单位来向表中插入数据的，这些记录在磁盘上的存放方式也被称为**行格式**或者**记录格式**\n### 指定行格式的语法\n```\nCREATE TABLE 表名 (列的信息) ROW_FORMAT=行格式名称\n    \nALTER TABLE 表名 ROW_FORMAT=行格式名称\n\n```\n### COMPACT行格式\n![QQ截图20221205160357.png](images/5_1.jpg)\n\n一条完整的记录其实可以被分为记录的额外信息和记录的真实数据两大部分。\n- 记录的额外信息：服务器为了描述这条记录而不得不添加的一些信息，分为3类，变长字段长度列表、NULL值列表、记录头信息\n1.变长字段长度列表：MySQL支持一些变长的数据类型，比如VARCHAR(M)、VARBINARY(M)、各种TEXT类型，各种BLOB类型，这些变长字段占用的存储空间分为两部分（真正的数据内容和占用的字节数），对于CHAR(M）类型的列来说，当列采用的是定长字符集时，该列占用的字节数不会被加到变长字段长度列表，而如果采用变长字符集时，该列占用的字节数也会被加到变长字段长度列表\n**在COMPACT行格式中，把所有的变长字段的真实数据占用的字节长度都存放在记录的开头部位，从而形成一个变长字段长度列表，按逆序排放**\n2.NULL值列表：处理过程是这样的，先统计表中哪些列允许存储NULL值(主键列、被NOT NULL修饰的列都是不可以存储NULL值的)，所以在统计的时候不会把这些列算进去，接着如果有的列可以存储NULL值，那么就需要NULL值列表，将每个允许存储NULL的列对应一个二进制位（为1代表该列值为NULL，为0代表不为NULL），其次MySQL规定NULL值列表必须用整数个字节的位表示，如果使用的二进制位个数不是整数个字节，则在字节的高位补0\n3.记录头信息：它是由固定的5个字节组成，不同位代表不同意思\n![QQ截图20221205161836.png](images/5_2.jpg)\n\n- 记录的真实数据\nMySQL会为每个记录默认的添加一些列（也称为隐藏列），具体的列如下：\n![QQ截图20221205162406.png](images/5_3.jpg)\nInnoDB表对主键的生成策略:优先使用用户自定义主键作为主键，如果用户没有定义主键，则选取一个Unique键作为主键，如果表中连Unique键都没有定义的化，则InnoDB会为表默认添加一个名为row_id的隐藏列作为主键\n\n### Redundant行格式\n![QQ截图20221207112201.png](images/5_4.jpg)\n- 记录的额外信息\n1.字段长度偏移列表：与compact行格式相比，没有了变长两个字，多了偏移两个字，Redundant的行格式会把该条记录中所有（包括隐藏列）的长度信息都按照逆序存储到字段长度偏移列表。同时Redundant的行格式是按照两个相邻数值的差值来计算各个列值的长度。\n![QQ截图20221207115628.png](images/5_5.jpg)\n\n- 记录头信息\n![QQ截图20221207113712.png](images/5_6.jpg)\n![QQ截图20221207113735.png](images/5_7.jpg)\n\n对于Compact和Reduntant行格式来说，如果某一列中的数据非常多的话，在本记录的真实数据处只会存储该列的前768个字节的数据和一个指向其它页的地址，然后把剩下的数据存放到其它页中，这个过程叫做**行溢出，存储超出768字节的那些页也被称为溢出页**","slug":"5-InnoDB记录行格式","published":1,"updated":"2023-10-02T01:45:30.038Z","_id":"cln6ws35x000t5gi58q7b8cy8","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"InnoDB页简介\"><a href=\"#InnoDB页简介\" class=\"headerlink\" title=\"InnoDB页简介\"></a>InnoDB页简介</h1><blockquote>\n<p>InnoDB是一个将表中的数据存储到磁盘上的存储引擎。由于磁盘IO和内存IO速度差了几个量级，InnoDB采取的方式是：<strong>将数据划分为若干个页，以页作为磁盘和内存之间的交互的基本单位，InnoDB中页的大小一般为16KB</strong>。</p>\n</blockquote>\n<h1 id=\"InnoDB行格式\"><a href=\"#InnoDB行格式\" class=\"headerlink\" title=\"InnoDB行格式\"></a>InnoDB行格式</h1><blockquote>\n<p>我们平时是以记录为单位来向表中插入数据的，这些记录在磁盘上的存放方式也被称为<strong>行格式</strong>或者<strong>记录格式</strong></p>\n</blockquote>\n<h3 id=\"指定行格式的语法\"><a href=\"#指定行格式的语法\" class=\"headerlink\" title=\"指定行格式的语法\"></a>指定行格式的语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE 表名 (列的信息) ROW_FORMAT=行格式名称</span><br><span class=\"line\">    </span><br><span class=\"line\">ALTER TABLE 表名 ROW_FORMAT=行格式名称</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"COMPACT行格式\"><a href=\"#COMPACT行格式\" class=\"headerlink\" title=\"COMPACT行格式\"></a>COMPACT行格式</h3><p><img src=\"/images/5_1.jpg\" alt=\"QQ截图20221205160357.png\"></p>\n<p>一条完整的记录其实可以被分为记录的额外信息和记录的真实数据两大部分。</p>\n<ul>\n<li><p>记录的额外信息：服务器为了描述这条记录而不得不添加的一些信息，分为3类，变长字段长度列表、NULL值列表、记录头信息<br>1.变长字段长度列表：MySQL支持一些变长的数据类型，比如VARCHAR(M)、VARBINARY(M)、各种TEXT类型，各种BLOB类型，这些变长字段占用的存储空间分为两部分（真正的数据内容和占用的字节数），对于CHAR(M）类型的列来说，当列采用的是定长字符集时，该列占用的字节数不会被加到变长字段长度列表，而如果采用变长字符集时，该列占用的字节数也会被加到变长字段长度列表<br><strong>在COMPACT行格式中，把所有的变长字段的真实数据占用的字节长度都存放在记录的开头部位，从而形成一个变长字段长度列表，按逆序排放</strong><br>2.NULL值列表：处理过程是这样的，先统计表中哪些列允许存储NULL值(主键列、被NOT NULL修饰的列都是不可以存储NULL值的)，所以在统计的时候不会把这些列算进去，接着如果有的列可以存储NULL值，那么就需要NULL值列表，将每个允许存储NULL的列对应一个二进制位（为1代表该列值为NULL，为0代表不为NULL），其次MySQL规定NULL值列表必须用整数个字节的位表示，如果使用的二进制位个数不是整数个字节，则在字节的高位补0<br>3.记录头信息：它是由固定的5个字节组成，不同位代表不同意思<br><img src=\"/images/5_2.jpg\" alt=\"QQ截图20221205161836.png\"></p>\n</li>\n<li><p>记录的真实数据<br>MySQL会为每个记录默认的添加一些列（也称为隐藏列），具体的列如下：<br><img src=\"/images/5_3.jpg\" alt=\"QQ截图20221205162406.png\"><br>InnoDB表对主键的生成策略:优先使用用户自定义主键作为主键，如果用户没有定义主键，则选取一个Unique键作为主键，如果表中连Unique键都没有定义的化，则InnoDB会为表默认添加一个名为row_id的隐藏列作为主键</p>\n</li>\n</ul>\n<h3 id=\"Redundant行格式\"><a href=\"#Redundant行格式\" class=\"headerlink\" title=\"Redundant行格式\"></a>Redundant行格式</h3><p><img src=\"/images/5_4.jpg\" alt=\"QQ截图20221207112201.png\"></p>\n<ul>\n<li><p>记录的额外信息<br>1.字段长度偏移列表：与compact行格式相比，没有了变长两个字，多了偏移两个字，Redundant的行格式会把该条记录中所有（包括隐藏列）的长度信息都按照逆序存储到字段长度偏移列表。同时Redundant的行格式是按照两个相邻数值的差值来计算各个列值的长度。<br><img src=\"/images/5_5.jpg\" alt=\"QQ截图20221207115628.png\"></p>\n</li>\n<li><p>记录头信息<br><img src=\"/images/5_6.jpg\" alt=\"QQ截图20221207113712.png\"><br><img src=\"/images/5_7.jpg\" alt=\"QQ截图20221207113735.png\"></p>\n</li>\n</ul>\n<p>对于Compact和Reduntant行格式来说，如果某一列中的数据非常多的话，在本记录的真实数据处只会存储该列的前768个字节的数据和一个指向其它页的地址，然后把剩下的数据存放到其它页中，这个过程叫做<strong>行溢出，存储超出768字节的那些页也被称为溢出页</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"InnoDB页简介\"><a href=\"#InnoDB页简介\" class=\"headerlink\" title=\"InnoDB页简介\"></a>InnoDB页简介</h1><blockquote>\n<p>InnoDB是一个将表中的数据存储到磁盘上的存储引擎。由于磁盘IO和内存IO速度差了几个量级，InnoDB采取的方式是：<strong>将数据划分为若干个页，以页作为磁盘和内存之间的交互的基本单位，InnoDB中页的大小一般为16KB</strong>。</p>\n</blockquote>\n<h1 id=\"InnoDB行格式\"><a href=\"#InnoDB行格式\" class=\"headerlink\" title=\"InnoDB行格式\"></a>InnoDB行格式</h1><blockquote>\n<p>我们平时是以记录为单位来向表中插入数据的，这些记录在磁盘上的存放方式也被称为<strong>行格式</strong>或者<strong>记录格式</strong></p>\n</blockquote>\n<h3 id=\"指定行格式的语法\"><a href=\"#指定行格式的语法\" class=\"headerlink\" title=\"指定行格式的语法\"></a>指定行格式的语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE 表名 (列的信息) ROW_FORMAT=行格式名称</span><br><span class=\"line\">    </span><br><span class=\"line\">ALTER TABLE 表名 ROW_FORMAT=行格式名称</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"COMPACT行格式\"><a href=\"#COMPACT行格式\" class=\"headerlink\" title=\"COMPACT行格式\"></a>COMPACT行格式</h3><p><img src=\"/images/5_1.jpg\" alt=\"QQ截图20221205160357.png\"></p>\n<p>一条完整的记录其实可以被分为记录的额外信息和记录的真实数据两大部分。</p>\n<ul>\n<li><p>记录的额外信息：服务器为了描述这条记录而不得不添加的一些信息，分为3类，变长字段长度列表、NULL值列表、记录头信息<br>1.变长字段长度列表：MySQL支持一些变长的数据类型，比如VARCHAR(M)、VARBINARY(M)、各种TEXT类型，各种BLOB类型，这些变长字段占用的存储空间分为两部分（真正的数据内容和占用的字节数），对于CHAR(M）类型的列来说，当列采用的是定长字符集时，该列占用的字节数不会被加到变长字段长度列表，而如果采用变长字符集时，该列占用的字节数也会被加到变长字段长度列表<br><strong>在COMPACT行格式中，把所有的变长字段的真实数据占用的字节长度都存放在记录的开头部位，从而形成一个变长字段长度列表，按逆序排放</strong><br>2.NULL值列表：处理过程是这样的，先统计表中哪些列允许存储NULL值(主键列、被NOT NULL修饰的列都是不可以存储NULL值的)，所以在统计的时候不会把这些列算进去，接着如果有的列可以存储NULL值，那么就需要NULL值列表，将每个允许存储NULL的列对应一个二进制位（为1代表该列值为NULL，为0代表不为NULL），其次MySQL规定NULL值列表必须用整数个字节的位表示，如果使用的二进制位个数不是整数个字节，则在字节的高位补0<br>3.记录头信息：它是由固定的5个字节组成，不同位代表不同意思<br><img src=\"/images/5_2.jpg\" alt=\"QQ截图20221205161836.png\"></p>\n</li>\n<li><p>记录的真实数据<br>MySQL会为每个记录默认的添加一些列（也称为隐藏列），具体的列如下：<br><img src=\"/images/5_3.jpg\" alt=\"QQ截图20221205162406.png\"><br>InnoDB表对主键的生成策略:优先使用用户自定义主键作为主键，如果用户没有定义主键，则选取一个Unique键作为主键，如果表中连Unique键都没有定义的化，则InnoDB会为表默认添加一个名为row_id的隐藏列作为主键</p>\n</li>\n</ul>\n<h3 id=\"Redundant行格式\"><a href=\"#Redundant行格式\" class=\"headerlink\" title=\"Redundant行格式\"></a>Redundant行格式</h3><p><img src=\"/images/5_4.jpg\" alt=\"QQ截图20221207112201.png\"></p>\n<ul>\n<li><p>记录的额外信息<br>1.字段长度偏移列表：与compact行格式相比，没有了变长两个字，多了偏移两个字，Redundant的行格式会把该条记录中所有（包括隐藏列）的长度信息都按照逆序存储到字段长度偏移列表。同时Redundant的行格式是按照两个相邻数值的差值来计算各个列值的长度。<br><img src=\"/images/5_5.jpg\" alt=\"QQ截图20221207115628.png\"></p>\n</li>\n<li><p>记录头信息<br><img src=\"/images/5_6.jpg\" alt=\"QQ截图20221207113712.png\"><br><img src=\"/images/5_7.jpg\" alt=\"QQ截图20221207113735.png\"></p>\n</li>\n</ul>\n<p>对于Compact和Reduntant行格式来说，如果某一列中的数据非常多的话，在本记录的真实数据处只会存储该列的前768个字节的数据和一个指向其它页的地址，然后把剩下的数据存放到其它页中，这个过程叫做<strong>行溢出，存储超出768字节的那些页也被称为溢出页</strong></p>\n"},{"title":"6.InnoDB数据页结构","date":"2023-05-27T18:18:38.000Z","_content":"## 数据页结构图\n![QQ截图20221212140703.png](images/6_1.jpg)\n\n>每当我们插入一条记录，都会从Free Space部分，也就是尚未使用的存储空间中申请一个记录大小的空间划分到User Records部分，当Free Space部分的空间全部被User Records部分替代掉之后，也就意味着这个页使用完了，如果还有新的记录插入的话，就需要去申请新的页了\n\n>为了更好的管理在User Records中的这些记录，行格式中的记录头信息至关重要，以下为compact行格式中的记录头信息\n\n![QQ截图20221216113033.png](images/6_2.jpg)\n\n## 页目录（Page Directory)\n1.将所有正常的记录（包括最大和最小记录，不包括标记为已删除的记录）划分为几个组。\n2.每个组的最后一条记录（也就是组内最大的那条记录）的头信息中的n_owned属性表示该记录拥有多少条记录，也就是该组内共有几条记录。\n3.将每个组的最后一条记录的地址偏移量单独提取出来按顺序存储到靠近页的尾部的地方，这个地方就是所谓的Page Directory，也就是页目录（此时应该返回头看看页面各个部分的图）。页面目录中的这些地址偏移量被称为槽（英文名：Slot），所以这个页面目录就是由槽组成的。\n\n![QQ截图20221216113857.png](images/6_3.jpg)\n\n>对于最小记录所在的分组只能有 1 条记录，最大记录所在的分组拥有的记录条数只能在 1~8 条之间，剩下的分组中记录的条数范围只能在是 4~8 条之间。所以分组是按照下面的步骤进行的：\n\n- 初始情况下一个数据页里只有最小记录和最大记录两条记录，它们分属于两个分组。\n- 之后每插入一条记录，都会从页目录中找到主键值比本记录的主键值大并且差值最小的槽，然后把该槽对应的记录的n_owned值加1，表示本组内又添加了一条记录，直到该组中的记录数等于8个\n- 在一个组中的记录数等于8个后再插入一条记录时，会将组中的记录拆分成两个组，一个组中4条记录，另一个5条记录。这个过程会在页目录中新增一个槽来记录这个新增分组中最大的那条记录的偏移量。\n\n在一个数据页中查找指定主键值的记录的过程分为两步：\n1.通过二分法确定该记录所在的槽，并找到该槽中主键值最小的那条记录。\n2.通过记录的next_record属性遍历该槽所在的组中的各个记录。\n\n## 页面头部(Page Header)\n![QQ截图20221216114601.png](images/6_4.jpg)\n\n## 文件头部（File Header)\n![QQ截图20221216114854.png](images/6_5.jpg)\n- FIL_PAGE_TYPE 页的类型\n![QQ截图20221216115011.png](images/6_6.jpg)\n- FIL_PAGE_PREV和FIL_PAGE_NEXT\nInnoDB都是以页为单位存放数据的，有时候我们存放某种类型的数据占用的空间非常大（比方说一张表中可以有成千上万条记录），InnoDB可能不可以一次性为这么多数据分配一个非常大的存储空间，如果分散到多个不连续的页中存储的话需要把这些页关联起来，FIL_PAGE_PREV和FIL_PAGE_NEXT就分别代表本页的上一个和下一个页的页号。\n\n## FILE TAILER\n\nInnoDB会把数据存储到磁盘上，操作数据时，需要以页为单位将数据移动到内存中，如果该页中的数据在内存中被修改了，那么在修改后的某个时间需要把数据同步到磁盘中。但是在同步了一半的时候中断电了咋办?\n-  前4个字节代表页的校验和\n>这个部分是和File Header中的校验和相对应的。每当一个页面在内存中修改了，在同步之前就要把它的校验和算出来，因为File Header在页面的前面，所以校验和会被首先同步到磁盘，当完全写完时，校验和也会被写到页的尾部，如果完全同步成功，则页的首部和尾部的校验和应该是一致的。如果写了一半儿断电了，那么在File Header中的校验和就代表着已经修改过的页，而在File Trialer中的校验和代表着原先的页，二者不同则意味着同步中间出了错。\n- 后4个字节代表页面被最后修改时对应的日志序列位置（LSN）\n> 这个部分也是为了校验页的完整性的，只不过我们目前还没说LSN是个什么意思，所以大家可以先不用管这个属性。这个File Trailer与File Header类似，都是所有类型的页通用的。","source":"_posts/6-InnoDB数据页结构.md","raw":"---\ntitle: 6.InnoDB数据页结构\ndate: 2023-05-27 14:18:38\ntags: [MySQL,MySQL是怎样运行的]\ncategories: 数据库\n---\n## 数据页结构图\n![QQ截图20221212140703.png](images/6_1.jpg)\n\n>每当我们插入一条记录，都会从Free Space部分，也就是尚未使用的存储空间中申请一个记录大小的空间划分到User Records部分，当Free Space部分的空间全部被User Records部分替代掉之后，也就意味着这个页使用完了，如果还有新的记录插入的话，就需要去申请新的页了\n\n>为了更好的管理在User Records中的这些记录，行格式中的记录头信息至关重要，以下为compact行格式中的记录头信息\n\n![QQ截图20221216113033.png](images/6_2.jpg)\n\n## 页目录（Page Directory)\n1.将所有正常的记录（包括最大和最小记录，不包括标记为已删除的记录）划分为几个组。\n2.每个组的最后一条记录（也就是组内最大的那条记录）的头信息中的n_owned属性表示该记录拥有多少条记录，也就是该组内共有几条记录。\n3.将每个组的最后一条记录的地址偏移量单独提取出来按顺序存储到靠近页的尾部的地方，这个地方就是所谓的Page Directory，也就是页目录（此时应该返回头看看页面各个部分的图）。页面目录中的这些地址偏移量被称为槽（英文名：Slot），所以这个页面目录就是由槽组成的。\n\n![QQ截图20221216113857.png](images/6_3.jpg)\n\n>对于最小记录所在的分组只能有 1 条记录，最大记录所在的分组拥有的记录条数只能在 1~8 条之间，剩下的分组中记录的条数范围只能在是 4~8 条之间。所以分组是按照下面的步骤进行的：\n\n- 初始情况下一个数据页里只有最小记录和最大记录两条记录，它们分属于两个分组。\n- 之后每插入一条记录，都会从页目录中找到主键值比本记录的主键值大并且差值最小的槽，然后把该槽对应的记录的n_owned值加1，表示本组内又添加了一条记录，直到该组中的记录数等于8个\n- 在一个组中的记录数等于8个后再插入一条记录时，会将组中的记录拆分成两个组，一个组中4条记录，另一个5条记录。这个过程会在页目录中新增一个槽来记录这个新增分组中最大的那条记录的偏移量。\n\n在一个数据页中查找指定主键值的记录的过程分为两步：\n1.通过二分法确定该记录所在的槽，并找到该槽中主键值最小的那条记录。\n2.通过记录的next_record属性遍历该槽所在的组中的各个记录。\n\n## 页面头部(Page Header)\n![QQ截图20221216114601.png](images/6_4.jpg)\n\n## 文件头部（File Header)\n![QQ截图20221216114854.png](images/6_5.jpg)\n- FIL_PAGE_TYPE 页的类型\n![QQ截图20221216115011.png](images/6_6.jpg)\n- FIL_PAGE_PREV和FIL_PAGE_NEXT\nInnoDB都是以页为单位存放数据的，有时候我们存放某种类型的数据占用的空间非常大（比方说一张表中可以有成千上万条记录），InnoDB可能不可以一次性为这么多数据分配一个非常大的存储空间，如果分散到多个不连续的页中存储的话需要把这些页关联起来，FIL_PAGE_PREV和FIL_PAGE_NEXT就分别代表本页的上一个和下一个页的页号。\n\n## FILE TAILER\n\nInnoDB会把数据存储到磁盘上，操作数据时，需要以页为单位将数据移动到内存中，如果该页中的数据在内存中被修改了，那么在修改后的某个时间需要把数据同步到磁盘中。但是在同步了一半的时候中断电了咋办?\n-  前4个字节代表页的校验和\n>这个部分是和File Header中的校验和相对应的。每当一个页面在内存中修改了，在同步之前就要把它的校验和算出来，因为File Header在页面的前面，所以校验和会被首先同步到磁盘，当完全写完时，校验和也会被写到页的尾部，如果完全同步成功，则页的首部和尾部的校验和应该是一致的。如果写了一半儿断电了，那么在File Header中的校验和就代表着已经修改过的页，而在File Trialer中的校验和代表着原先的页，二者不同则意味着同步中间出了错。\n- 后4个字节代表页面被最后修改时对应的日志序列位置（LSN）\n> 这个部分也是为了校验页的完整性的，只不过我们目前还没说LSN是个什么意思，所以大家可以先不用管这个属性。这个File Trailer与File Header类似，都是所有类型的页通用的。","slug":"6-InnoDB数据页结构","published":1,"updated":"2023-10-01T02:55:45.143Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cln6ws35y000x5gi5f4v6h4hw","content":"<h2 id=\"数据页结构图\"><a href=\"#数据页结构图\" class=\"headerlink\" title=\"数据页结构图\"></a>数据页结构图</h2><p><img src=\"/images/6_1.jpg\" alt=\"QQ截图20221212140703.png\"></p>\n<blockquote>\n<p>每当我们插入一条记录，都会从Free Space部分，也就是尚未使用的存储空间中申请一个记录大小的空间划分到User Records部分，当Free Space部分的空间全部被User Records部分替代掉之后，也就意味着这个页使用完了，如果还有新的记录插入的话，就需要去申请新的页了</p>\n</blockquote>\n<blockquote>\n<p>为了更好的管理在User Records中的这些记录，行格式中的记录头信息至关重要，以下为compact行格式中的记录头信息</p>\n</blockquote>\n<p><img src=\"/images/6_2.jpg\" alt=\"QQ截图20221216113033.png\"></p>\n<h2 id=\"页目录（Page-Directory\"><a href=\"#页目录（Page-Directory\" class=\"headerlink\" title=\"页目录（Page Directory)\"></a>页目录（Page Directory)</h2><p>1.将所有正常的记录（包括最大和最小记录，不包括标记为已删除的记录）划分为几个组。<br>2.每个组的最后一条记录（也就是组内最大的那条记录）的头信息中的n_owned属性表示该记录拥有多少条记录，也就是该组内共有几条记录。<br>3.将每个组的最后一条记录的地址偏移量单独提取出来按顺序存储到靠近页的尾部的地方，这个地方就是所谓的Page Directory，也就是页目录（此时应该返回头看看页面各个部分的图）。页面目录中的这些地址偏移量被称为槽（英文名：Slot），所以这个页面目录就是由槽组成的。</p>\n<p><img src=\"/images/6_3.jpg\" alt=\"QQ截图20221216113857.png\"></p>\n<blockquote>\n<p>对于最小记录所在的分组只能有 1 条记录，最大记录所在的分组拥有的记录条数只能在 1<del>8 条之间，剩下的分组中记录的条数范围只能在是 4</del>8 条之间。所以分组是按照下面的步骤进行的：</p>\n</blockquote>\n<ul>\n<li>初始情况下一个数据页里只有最小记录和最大记录两条记录，它们分属于两个分组。</li>\n<li>之后每插入一条记录，都会从页目录中找到主键值比本记录的主键值大并且差值最小的槽，然后把该槽对应的记录的n_owned值加1，表示本组内又添加了一条记录，直到该组中的记录数等于8个</li>\n<li>在一个组中的记录数等于8个后再插入一条记录时，会将组中的记录拆分成两个组，一个组中4条记录，另一个5条记录。这个过程会在页目录中新增一个槽来记录这个新增分组中最大的那条记录的偏移量。</li>\n</ul>\n<p>在一个数据页中查找指定主键值的记录的过程分为两步：<br>1.通过二分法确定该记录所在的槽，并找到该槽中主键值最小的那条记录。<br>2.通过记录的next_record属性遍历该槽所在的组中的各个记录。</p>\n<h2 id=\"页面头部-Page-Header\"><a href=\"#页面头部-Page-Header\" class=\"headerlink\" title=\"页面头部(Page Header)\"></a>页面头部(Page Header)</h2><p><img src=\"/images/6_4.jpg\" alt=\"QQ截图20221216114601.png\"></p>\n<h2 id=\"文件头部（File-Header\"><a href=\"#文件头部（File-Header\" class=\"headerlink\" title=\"文件头部（File Header)\"></a>文件头部（File Header)</h2><p><img src=\"/images/6_5.jpg\" alt=\"QQ截图20221216114854.png\"></p>\n<ul>\n<li>FIL_PAGE_TYPE 页的类型<br><img src=\"/images/6_6.jpg\" alt=\"QQ截图20221216115011.png\"></li>\n<li>FIL_PAGE_PREV和FIL_PAGE_NEXT<br>InnoDB都是以页为单位存放数据的，有时候我们存放某种类型的数据占用的空间非常大（比方说一张表中可以有成千上万条记录），InnoDB可能不可以一次性为这么多数据分配一个非常大的存储空间，如果分散到多个不连续的页中存储的话需要把这些页关联起来，FIL_PAGE_PREV和FIL_PAGE_NEXT就分别代表本页的上一个和下一个页的页号。</li>\n</ul>\n<h2 id=\"FILE-TAILER\"><a href=\"#FILE-TAILER\" class=\"headerlink\" title=\"FILE TAILER\"></a>FILE TAILER</h2><p>InnoDB会把数据存储到磁盘上，操作数据时，需要以页为单位将数据移动到内存中，如果该页中的数据在内存中被修改了，那么在修改后的某个时间需要把数据同步到磁盘中。但是在同步了一半的时候中断电了咋办?</p>\n<ul>\n<li>前4个字节代表页的校验和<blockquote>\n<p>这个部分是和File Header中的校验和相对应的。每当一个页面在内存中修改了，在同步之前就要把它的校验和算出来，因为File Header在页面的前面，所以校验和会被首先同步到磁盘，当完全写完时，校验和也会被写到页的尾部，如果完全同步成功，则页的首部和尾部的校验和应该是一致的。如果写了一半儿断电了，那么在File Header中的校验和就代表着已经修改过的页，而在File Trialer中的校验和代表着原先的页，二者不同则意味着同步中间出了错。</p>\n</blockquote>\n</li>\n<li>后4个字节代表页面被最后修改时对应的日志序列位置（LSN）<blockquote>\n<p>这个部分也是为了校验页的完整性的，只不过我们目前还没说LSN是个什么意思，所以大家可以先不用管这个属性。这个File Trailer与File Header类似，都是所有类型的页通用的。</p>\n</blockquote>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"数据页结构图\"><a href=\"#数据页结构图\" class=\"headerlink\" title=\"数据页结构图\"></a>数据页结构图</h2><p><img src=\"/images/6_1.jpg\" alt=\"QQ截图20221212140703.png\"></p>\n<blockquote>\n<p>每当我们插入一条记录，都会从Free Space部分，也就是尚未使用的存储空间中申请一个记录大小的空间划分到User Records部分，当Free Space部分的空间全部被User Records部分替代掉之后，也就意味着这个页使用完了，如果还有新的记录插入的话，就需要去申请新的页了</p>\n</blockquote>\n<blockquote>\n<p>为了更好的管理在User Records中的这些记录，行格式中的记录头信息至关重要，以下为compact行格式中的记录头信息</p>\n</blockquote>\n<p><img src=\"/images/6_2.jpg\" alt=\"QQ截图20221216113033.png\"></p>\n<h2 id=\"页目录（Page-Directory\"><a href=\"#页目录（Page-Directory\" class=\"headerlink\" title=\"页目录（Page Directory)\"></a>页目录（Page Directory)</h2><p>1.将所有正常的记录（包括最大和最小记录，不包括标记为已删除的记录）划分为几个组。<br>2.每个组的最后一条记录（也就是组内最大的那条记录）的头信息中的n_owned属性表示该记录拥有多少条记录，也就是该组内共有几条记录。<br>3.将每个组的最后一条记录的地址偏移量单独提取出来按顺序存储到靠近页的尾部的地方，这个地方就是所谓的Page Directory，也就是页目录（此时应该返回头看看页面各个部分的图）。页面目录中的这些地址偏移量被称为槽（英文名：Slot），所以这个页面目录就是由槽组成的。</p>\n<p><img src=\"/images/6_3.jpg\" alt=\"QQ截图20221216113857.png\"></p>\n<blockquote>\n<p>对于最小记录所在的分组只能有 1 条记录，最大记录所在的分组拥有的记录条数只能在 1<del>8 条之间，剩下的分组中记录的条数范围只能在是 4</del>8 条之间。所以分组是按照下面的步骤进行的：</p>\n</blockquote>\n<ul>\n<li>初始情况下一个数据页里只有最小记录和最大记录两条记录，它们分属于两个分组。</li>\n<li>之后每插入一条记录，都会从页目录中找到主键值比本记录的主键值大并且差值最小的槽，然后把该槽对应的记录的n_owned值加1，表示本组内又添加了一条记录，直到该组中的记录数等于8个</li>\n<li>在一个组中的记录数等于8个后再插入一条记录时，会将组中的记录拆分成两个组，一个组中4条记录，另一个5条记录。这个过程会在页目录中新增一个槽来记录这个新增分组中最大的那条记录的偏移量。</li>\n</ul>\n<p>在一个数据页中查找指定主键值的记录的过程分为两步：<br>1.通过二分法确定该记录所在的槽，并找到该槽中主键值最小的那条记录。<br>2.通过记录的next_record属性遍历该槽所在的组中的各个记录。</p>\n<h2 id=\"页面头部-Page-Header\"><a href=\"#页面头部-Page-Header\" class=\"headerlink\" title=\"页面头部(Page Header)\"></a>页面头部(Page Header)</h2><p><img src=\"/images/6_4.jpg\" alt=\"QQ截图20221216114601.png\"></p>\n<h2 id=\"文件头部（File-Header\"><a href=\"#文件头部（File-Header\" class=\"headerlink\" title=\"文件头部（File Header)\"></a>文件头部（File Header)</h2><p><img src=\"/images/6_5.jpg\" alt=\"QQ截图20221216114854.png\"></p>\n<ul>\n<li>FIL_PAGE_TYPE 页的类型<br><img src=\"/images/6_6.jpg\" alt=\"QQ截图20221216115011.png\"></li>\n<li>FIL_PAGE_PREV和FIL_PAGE_NEXT<br>InnoDB都是以页为单位存放数据的，有时候我们存放某种类型的数据占用的空间非常大（比方说一张表中可以有成千上万条记录），InnoDB可能不可以一次性为这么多数据分配一个非常大的存储空间，如果分散到多个不连续的页中存储的话需要把这些页关联起来，FIL_PAGE_PREV和FIL_PAGE_NEXT就分别代表本页的上一个和下一个页的页号。</li>\n</ul>\n<h2 id=\"FILE-TAILER\"><a href=\"#FILE-TAILER\" class=\"headerlink\" title=\"FILE TAILER\"></a>FILE TAILER</h2><p>InnoDB会把数据存储到磁盘上，操作数据时，需要以页为单位将数据移动到内存中，如果该页中的数据在内存中被修改了，那么在修改后的某个时间需要把数据同步到磁盘中。但是在同步了一半的时候中断电了咋办?</p>\n<ul>\n<li>前4个字节代表页的校验和<blockquote>\n<p>这个部分是和File Header中的校验和相对应的。每当一个页面在内存中修改了，在同步之前就要把它的校验和算出来，因为File Header在页面的前面，所以校验和会被首先同步到磁盘，当完全写完时，校验和也会被写到页的尾部，如果完全同步成功，则页的首部和尾部的校验和应该是一致的。如果写了一半儿断电了，那么在File Header中的校验和就代表着已经修改过的页，而在File Trialer中的校验和代表着原先的页，二者不同则意味着同步中间出了错。</p>\n</blockquote>\n</li>\n<li>后4个字节代表页面被最后修改时对应的日志序列位置（LSN）<blockquote>\n<p>这个部分也是为了校验页的完整性的，只不过我们目前还没说LSN是个什么意思，所以大家可以先不用管这个属性。这个File Trailer与File Header类似，都是所有类型的页通用的。</p>\n</blockquote>\n</li>\n</ul>\n"},{"title":"7.B+树索引","date":"2023-05-27T18:19:18.000Z","_content":"\n# 在没有索引的请况下：\n### 在一个页中查找\n- 以主键为搜索条件\n  可以在页目录中使用二分法快速定位到对应的槽，然后再遍历该槽对应分组中的记录即可快速找到指定的记录。\n- 以其它列为搜索条件\n  这种情况下只能从最小记录开始依次遍历单链表中的每条记录，然后对比每条记录是不是符合搜索条件。\n###在很多个页中查找\n>分为两个步骤：\n1.定位到记录所在的页\n2.从所在的页内中查找相应的记录\n\n由于我们并不能快速的定位到记录所在的页，所以只能从第一个页沿着双向链表一直往下找，在每一个页中根据我们刚刚介绍过的查找方式去查找指定的记录,当然这种方法是非常耗时的\n\n# 索引查找\n\n一个简单的索引方案\n- 下一个数据页中用户记录的主键值必须大于上一个页中用户记录的主键值\n- 给所有页建立一个目录项，每个页对应一个目录项，每个目录项包括下面两个部分（页的用户记录中最小的主键值，我们用key来表示。页号，我们用page_no表示。）\n\nInnoDB中的索引方案\n- InnoDB是使用页来作为管理存储空间的基本单位，也就是最多能保证16KB的连续存储空间，而随着表中记录数量的增多，需要非常大的连续的存储空间才能把所有的目录项都放下，这对记录数量非常多的表是不现实的。\n- 我们时常会对记录进行增删，假设我们把页28中的记录都删除了，页28也就没有存在的必要了，那意味着目录项2也就没有存在的必要了，这就需要把目录项2后的目录项都向前移动一下，这种牵一发而动全身的设计不是什么好主意～\n\n所以InnoDB复用了之前存储用户记录的数据页来存储目录项，为了和用户记录做一下区分，我们把这些用来表示目录项的记录称为目录项记录。\nInnoDB就是通过记录头信息中的record_type来进行区分一条普通的记录是普通用户记录还是目录项记录\n\n当为这些存储目录项记录的页再生成一个更高级的目录，就像是一个多级目录一样，大目录里嵌套小目录，小目录里才是实际的数据，随着表中记录的增加，这个目录的层级会继续增加，如果简化一下，那么我们可以用下面这个图来描述它：\n![QQ截图20221216141803.png](images/7_1.jpg)\n一般情况下，我们用到的B+树都不会超过4层，那我们通过主键值去查找某条记录最多只需要做4个页面内的查找（查找3个目录项页和一个用户记录页），又因为在每个页面内有所谓的Page Directory（页目录），所以在页面内也可以通过二分法实现快速定位记录\n\n### 聚簇索引\n我们上面介绍的B+树本身就是一个目录，或者说本身就是一个索引。它有两个特点：\n\n1.使用记录主键值的大小进行记录和页的排序，这包括三个方面的含义：\n- 页内的记录是按照主键的大小顺序排成一个单向链表。\n- 各个存放用户记录的页也是根据页中用户记录的主键大小顺序排成一个双向链表。\n- 存放目录项记录的页分为不同的层次，在同一层次中的页也是根据页中目录项记录的主键大小顺序排成一个双向链表。\n\n2.B+树的叶子节点存储的是完整的用户记录。\n- 所谓完整的用户记录，就是指这个记录中存储了所有列的值（包括隐藏列）。\n\n具有以上两种特性的B+树称为聚簇索引，所有完整的用户记录都存放在这个聚簇索引的叶子节点处。这种索引不需要通过使用INDEX语句去创建。\n\n### 二级索引（辅助索引）\n上面介绍的聚簇索引只能在搜索条件是主键值时才能发挥作用，因为B+树中的数据都是按照主键进行排序的。如果想以别的列作为搜索条件，可以多建立几棵B+树\n在查找数据的过程中，查找完二级索引后只能获得主键值，仍然需要到聚簇索引中再查一遍，这个过程称为回表\n\n### 联合索引\n我们页可以同时以多个列的大小作为排序规则，也就是同时为多个列建立索引，联合索引的本质上也是一个二级索引。\n\n\n# B+树索引注意事项\n### 根页面万年不动窝\n- 每当为某个表创建一个B+树索引（聚簇索引不是人为创建的，默认就有）的时候，都会为这个索引创建一个根节点页面。最开始表中没有数据的时候，每个B+树索引对应的根节点中既没有用户记录，也没有目录项记录\n- 随后向表中插入用户记录时，先把用户记录存储到这个根节点中\n- 当根节点中的可用空间用完时继续插入记录，此时会将根节点中的所有记录复制到一个新的分配页，然后再对这个新页进行页分裂的操作，根节点升级为存储目录项记录的页。\n\n### 内节点中目录项记录的唯一性\n\n### 一个页面最少存储2条记录\n\n# MyISAM中的索引方案\n将索引和数据分开存储\n- 将表中的记录按照记录的插入顺序单独村粗在一个文件中，称之为数据文件。可以通过行号快速访问到一条记录\n- 会将索引信息另外存储到一个称为索引文件的另一个文件中。MyISAM会单独为表的主键创建一个索引，只不过在索引的叶子节点中存储的不是完整的用户记录，而是主键值 + 行号 的组合。先通过索引找到行号，再通过行号去找到对应的记录\n- 如果有需要的话，我们也可以对其它的列分别建立索引或者建立联合索引，原理和InnoDB中的索引差不多，不过在叶子节点处存储的是相应的列 + 行号。这些索引也全部都是二级索引。\n\n# MySQL中创建和删除索引的语句\n我们可以在创建表的时候指定需要建立索引的单个列或者建立联合索引的多个列：\n```\nCREATE TALBE 表名 (\n    各种列的信息 ··· , \n    [KEY|INDEX] 索引名 (需要被索引的单个列或多个列)\n)\n```\n```\nALTER TABLE 表名 ADD [INDEX|KEY] 索引名 (需要被索引的单个列或多个列);\nALTER TABLE 表名 DROP [INDEX|KEY] 索引名;\n```","source":"_posts/7-B-树索引.md","raw":"---\ntitle: 7.B+树索引\ndate: 2023-05-27 14:19:18\ntags: [MySQL,MySQL是怎样运行的]\ncategories: 数据库\n---\n\n# 在没有索引的请况下：\n### 在一个页中查找\n- 以主键为搜索条件\n  可以在页目录中使用二分法快速定位到对应的槽，然后再遍历该槽对应分组中的记录即可快速找到指定的记录。\n- 以其它列为搜索条件\n  这种情况下只能从最小记录开始依次遍历单链表中的每条记录，然后对比每条记录是不是符合搜索条件。\n###在很多个页中查找\n>分为两个步骤：\n1.定位到记录所在的页\n2.从所在的页内中查找相应的记录\n\n由于我们并不能快速的定位到记录所在的页，所以只能从第一个页沿着双向链表一直往下找，在每一个页中根据我们刚刚介绍过的查找方式去查找指定的记录,当然这种方法是非常耗时的\n\n# 索引查找\n\n一个简单的索引方案\n- 下一个数据页中用户记录的主键值必须大于上一个页中用户记录的主键值\n- 给所有页建立一个目录项，每个页对应一个目录项，每个目录项包括下面两个部分（页的用户记录中最小的主键值，我们用key来表示。页号，我们用page_no表示。）\n\nInnoDB中的索引方案\n- InnoDB是使用页来作为管理存储空间的基本单位，也就是最多能保证16KB的连续存储空间，而随着表中记录数量的增多，需要非常大的连续的存储空间才能把所有的目录项都放下，这对记录数量非常多的表是不现实的。\n- 我们时常会对记录进行增删，假设我们把页28中的记录都删除了，页28也就没有存在的必要了，那意味着目录项2也就没有存在的必要了，这就需要把目录项2后的目录项都向前移动一下，这种牵一发而动全身的设计不是什么好主意～\n\n所以InnoDB复用了之前存储用户记录的数据页来存储目录项，为了和用户记录做一下区分，我们把这些用来表示目录项的记录称为目录项记录。\nInnoDB就是通过记录头信息中的record_type来进行区分一条普通的记录是普通用户记录还是目录项记录\n\n当为这些存储目录项记录的页再生成一个更高级的目录，就像是一个多级目录一样，大目录里嵌套小目录，小目录里才是实际的数据，随着表中记录的增加，这个目录的层级会继续增加，如果简化一下，那么我们可以用下面这个图来描述它：\n![QQ截图20221216141803.png](images/7_1.jpg)\n一般情况下，我们用到的B+树都不会超过4层，那我们通过主键值去查找某条记录最多只需要做4个页面内的查找（查找3个目录项页和一个用户记录页），又因为在每个页面内有所谓的Page Directory（页目录），所以在页面内也可以通过二分法实现快速定位记录\n\n### 聚簇索引\n我们上面介绍的B+树本身就是一个目录，或者说本身就是一个索引。它有两个特点：\n\n1.使用记录主键值的大小进行记录和页的排序，这包括三个方面的含义：\n- 页内的记录是按照主键的大小顺序排成一个单向链表。\n- 各个存放用户记录的页也是根据页中用户记录的主键大小顺序排成一个双向链表。\n- 存放目录项记录的页分为不同的层次，在同一层次中的页也是根据页中目录项记录的主键大小顺序排成一个双向链表。\n\n2.B+树的叶子节点存储的是完整的用户记录。\n- 所谓完整的用户记录，就是指这个记录中存储了所有列的值（包括隐藏列）。\n\n具有以上两种特性的B+树称为聚簇索引，所有完整的用户记录都存放在这个聚簇索引的叶子节点处。这种索引不需要通过使用INDEX语句去创建。\n\n### 二级索引（辅助索引）\n上面介绍的聚簇索引只能在搜索条件是主键值时才能发挥作用，因为B+树中的数据都是按照主键进行排序的。如果想以别的列作为搜索条件，可以多建立几棵B+树\n在查找数据的过程中，查找完二级索引后只能获得主键值，仍然需要到聚簇索引中再查一遍，这个过程称为回表\n\n### 联合索引\n我们页可以同时以多个列的大小作为排序规则，也就是同时为多个列建立索引，联合索引的本质上也是一个二级索引。\n\n\n# B+树索引注意事项\n### 根页面万年不动窝\n- 每当为某个表创建一个B+树索引（聚簇索引不是人为创建的，默认就有）的时候，都会为这个索引创建一个根节点页面。最开始表中没有数据的时候，每个B+树索引对应的根节点中既没有用户记录，也没有目录项记录\n- 随后向表中插入用户记录时，先把用户记录存储到这个根节点中\n- 当根节点中的可用空间用完时继续插入记录，此时会将根节点中的所有记录复制到一个新的分配页，然后再对这个新页进行页分裂的操作，根节点升级为存储目录项记录的页。\n\n### 内节点中目录项记录的唯一性\n\n### 一个页面最少存储2条记录\n\n# MyISAM中的索引方案\n将索引和数据分开存储\n- 将表中的记录按照记录的插入顺序单独村粗在一个文件中，称之为数据文件。可以通过行号快速访问到一条记录\n- 会将索引信息另外存储到一个称为索引文件的另一个文件中。MyISAM会单独为表的主键创建一个索引，只不过在索引的叶子节点中存储的不是完整的用户记录，而是主键值 + 行号 的组合。先通过索引找到行号，再通过行号去找到对应的记录\n- 如果有需要的话，我们也可以对其它的列分别建立索引或者建立联合索引，原理和InnoDB中的索引差不多，不过在叶子节点处存储的是相应的列 + 行号。这些索引也全部都是二级索引。\n\n# MySQL中创建和删除索引的语句\n我们可以在创建表的时候指定需要建立索引的单个列或者建立联合索引的多个列：\n```\nCREATE TALBE 表名 (\n    各种列的信息 ··· , \n    [KEY|INDEX] 索引名 (需要被索引的单个列或多个列)\n)\n```\n```\nALTER TABLE 表名 ADD [INDEX|KEY] 索引名 (需要被索引的单个列或多个列);\nALTER TABLE 表名 DROP [INDEX|KEY] 索引名;\n```","slug":"7-B-树索引","published":1,"updated":"2023-10-01T02:55:45.143Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cln6ws35z00105gi57r9p6kq8","content":"<h1 id=\"在没有索引的请况下：\"><a href=\"#在没有索引的请况下：\" class=\"headerlink\" title=\"在没有索引的请况下：\"></a>在没有索引的请况下：</h1><h3 id=\"在一个页中查找\"><a href=\"#在一个页中查找\" class=\"headerlink\" title=\"在一个页中查找\"></a>在一个页中查找</h3><ul>\n<li>以主键为搜索条件<br>可以在页目录中使用二分法快速定位到对应的槽，然后再遍历该槽对应分组中的记录即可快速找到指定的记录。</li>\n<li>以其它列为搜索条件<br>这种情况下只能从最小记录开始依次遍历单链表中的每条记录，然后对比每条记录是不是符合搜索条件。</li>\n</ul>\n<p>###在很多个页中查找</p>\n<blockquote>\n<p>分为两个步骤：<br>1.定位到记录所在的页<br>2.从所在的页内中查找相应的记录</p>\n</blockquote>\n<p>由于我们并不能快速的定位到记录所在的页，所以只能从第一个页沿着双向链表一直往下找，在每一个页中根据我们刚刚介绍过的查找方式去查找指定的记录,当然这种方法是非常耗时的</p>\n<h1 id=\"索引查找\"><a href=\"#索引查找\" class=\"headerlink\" title=\"索引查找\"></a>索引查找</h1><p>一个简单的索引方案</p>\n<ul>\n<li>下一个数据页中用户记录的主键值必须大于上一个页中用户记录的主键值</li>\n<li>给所有页建立一个目录项，每个页对应一个目录项，每个目录项包括下面两个部分（页的用户记录中最小的主键值，我们用key来表示。页号，我们用page_no表示。）</li>\n</ul>\n<p>InnoDB中的索引方案</p>\n<ul>\n<li>InnoDB是使用页来作为管理存储空间的基本单位，也就是最多能保证16KB的连续存储空间，而随着表中记录数量的增多，需要非常大的连续的存储空间才能把所有的目录项都放下，这对记录数量非常多的表是不现实的。</li>\n<li>我们时常会对记录进行增删，假设我们把页28中的记录都删除了，页28也就没有存在的必要了，那意味着目录项2也就没有存在的必要了，这就需要把目录项2后的目录项都向前移动一下，这种牵一发而动全身的设计不是什么好主意～</li>\n</ul>\n<p>所以InnoDB复用了之前存储用户记录的数据页来存储目录项，为了和用户记录做一下区分，我们把这些用来表示目录项的记录称为目录项记录。<br>InnoDB就是通过记录头信息中的record_type来进行区分一条普通的记录是普通用户记录还是目录项记录</p>\n<p>当为这些存储目录项记录的页再生成一个更高级的目录，就像是一个多级目录一样，大目录里嵌套小目录，小目录里才是实际的数据，随着表中记录的增加，这个目录的层级会继续增加，如果简化一下，那么我们可以用下面这个图来描述它：<br><img src=\"/images/7_1.jpg\" alt=\"QQ截图20221216141803.png\"><br>一般情况下，我们用到的B+树都不会超过4层，那我们通过主键值去查找某条记录最多只需要做4个页面内的查找（查找3个目录项页和一个用户记录页），又因为在每个页面内有所谓的Page Directory（页目录），所以在页面内也可以通过二分法实现快速定位记录</p>\n<h3 id=\"聚簇索引\"><a href=\"#聚簇索引\" class=\"headerlink\" title=\"聚簇索引\"></a>聚簇索引</h3><p>我们上面介绍的B+树本身就是一个目录，或者说本身就是一个索引。它有两个特点：</p>\n<p>1.使用记录主键值的大小进行记录和页的排序，这包括三个方面的含义：</p>\n<ul>\n<li>页内的记录是按照主键的大小顺序排成一个单向链表。</li>\n<li>各个存放用户记录的页也是根据页中用户记录的主键大小顺序排成一个双向链表。</li>\n<li>存放目录项记录的页分为不同的层次，在同一层次中的页也是根据页中目录项记录的主键大小顺序排成一个双向链表。</li>\n</ul>\n<p>2.B+树的叶子节点存储的是完整的用户记录。</p>\n<ul>\n<li>所谓完整的用户记录，就是指这个记录中存储了所有列的值（包括隐藏列）。</li>\n</ul>\n<p>具有以上两种特性的B+树称为聚簇索引，所有完整的用户记录都存放在这个聚簇索引的叶子节点处。这种索引不需要通过使用INDEX语句去创建。</p>\n<h3 id=\"二级索引（辅助索引）\"><a href=\"#二级索引（辅助索引）\" class=\"headerlink\" title=\"二级索引（辅助索引）\"></a>二级索引（辅助索引）</h3><p>上面介绍的聚簇索引只能在搜索条件是主键值时才能发挥作用，因为B+树中的数据都是按照主键进行排序的。如果想以别的列作为搜索条件，可以多建立几棵B+树<br>在查找数据的过程中，查找完二级索引后只能获得主键值，仍然需要到聚簇索引中再查一遍，这个过程称为回表</p>\n<h3 id=\"联合索引\"><a href=\"#联合索引\" class=\"headerlink\" title=\"联合索引\"></a>联合索引</h3><p>我们页可以同时以多个列的大小作为排序规则，也就是同时为多个列建立索引，联合索引的本质上也是一个二级索引。</p>\n<h1 id=\"B-树索引注意事项\"><a href=\"#B-树索引注意事项\" class=\"headerlink\" title=\"B+树索引注意事项\"></a>B+树索引注意事项</h1><h3 id=\"根页面万年不动窝\"><a href=\"#根页面万年不动窝\" class=\"headerlink\" title=\"根页面万年不动窝\"></a>根页面万年不动窝</h3><ul>\n<li>每当为某个表创建一个B+树索引（聚簇索引不是人为创建的，默认就有）的时候，都会为这个索引创建一个根节点页面。最开始表中没有数据的时候，每个B+树索引对应的根节点中既没有用户记录，也没有目录项记录</li>\n<li>随后向表中插入用户记录时，先把用户记录存储到这个根节点中</li>\n<li>当根节点中的可用空间用完时继续插入记录，此时会将根节点中的所有记录复制到一个新的分配页，然后再对这个新页进行页分裂的操作，根节点升级为存储目录项记录的页。</li>\n</ul>\n<h3 id=\"内节点中目录项记录的唯一性\"><a href=\"#内节点中目录项记录的唯一性\" class=\"headerlink\" title=\"内节点中目录项记录的唯一性\"></a>内节点中目录项记录的唯一性</h3><h3 id=\"一个页面最少存储2条记录\"><a href=\"#一个页面最少存储2条记录\" class=\"headerlink\" title=\"一个页面最少存储2条记录\"></a>一个页面最少存储2条记录</h3><h1 id=\"MyISAM中的索引方案\"><a href=\"#MyISAM中的索引方案\" class=\"headerlink\" title=\"MyISAM中的索引方案\"></a>MyISAM中的索引方案</h1><p>将索引和数据分开存储</p>\n<ul>\n<li>将表中的记录按照记录的插入顺序单独村粗在一个文件中，称之为数据文件。可以通过行号快速访问到一条记录</li>\n<li>会将索引信息另外存储到一个称为索引文件的另一个文件中。MyISAM会单独为表的主键创建一个索引，只不过在索引的叶子节点中存储的不是完整的用户记录，而是主键值 + 行号 的组合。先通过索引找到行号，再通过行号去找到对应的记录</li>\n<li>如果有需要的话，我们也可以对其它的列分别建立索引或者建立联合索引，原理和InnoDB中的索引差不多，不过在叶子节点处存储的是相应的列 + 行号。这些索引也全部都是二级索引。</li>\n</ul>\n<h1 id=\"MySQL中创建和删除索引的语句\"><a href=\"#MySQL中创建和删除索引的语句\" class=\"headerlink\" title=\"MySQL中创建和删除索引的语句\"></a>MySQL中创建和删除索引的语句</h1><p>我们可以在创建表的时候指定需要建立索引的单个列或者建立联合索引的多个列：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TALBE 表名 (</span><br><span class=\"line\">    各种列的信息 ··· , </span><br><span class=\"line\">    [KEY|INDEX] 索引名 (需要被索引的单个列或多个列)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE 表名 ADD [INDEX|KEY] 索引名 (需要被索引的单个列或多个列);</span><br><span class=\"line\">ALTER TABLE 表名 DROP [INDEX|KEY] 索引名;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"在没有索引的请况下：\"><a href=\"#在没有索引的请况下：\" class=\"headerlink\" title=\"在没有索引的请况下：\"></a>在没有索引的请况下：</h1><h3 id=\"在一个页中查找\"><a href=\"#在一个页中查找\" class=\"headerlink\" title=\"在一个页中查找\"></a>在一个页中查找</h3><ul>\n<li>以主键为搜索条件<br>可以在页目录中使用二分法快速定位到对应的槽，然后再遍历该槽对应分组中的记录即可快速找到指定的记录。</li>\n<li>以其它列为搜索条件<br>这种情况下只能从最小记录开始依次遍历单链表中的每条记录，然后对比每条记录是不是符合搜索条件。</li>\n</ul>\n<p>###在很多个页中查找</p>\n<blockquote>\n<p>分为两个步骤：<br>1.定位到记录所在的页<br>2.从所在的页内中查找相应的记录</p>\n</blockquote>\n<p>由于我们并不能快速的定位到记录所在的页，所以只能从第一个页沿着双向链表一直往下找，在每一个页中根据我们刚刚介绍过的查找方式去查找指定的记录,当然这种方法是非常耗时的</p>\n<h1 id=\"索引查找\"><a href=\"#索引查找\" class=\"headerlink\" title=\"索引查找\"></a>索引查找</h1><p>一个简单的索引方案</p>\n<ul>\n<li>下一个数据页中用户记录的主键值必须大于上一个页中用户记录的主键值</li>\n<li>给所有页建立一个目录项，每个页对应一个目录项，每个目录项包括下面两个部分（页的用户记录中最小的主键值，我们用key来表示。页号，我们用page_no表示。）</li>\n</ul>\n<p>InnoDB中的索引方案</p>\n<ul>\n<li>InnoDB是使用页来作为管理存储空间的基本单位，也就是最多能保证16KB的连续存储空间，而随着表中记录数量的增多，需要非常大的连续的存储空间才能把所有的目录项都放下，这对记录数量非常多的表是不现实的。</li>\n<li>我们时常会对记录进行增删，假设我们把页28中的记录都删除了，页28也就没有存在的必要了，那意味着目录项2也就没有存在的必要了，这就需要把目录项2后的目录项都向前移动一下，这种牵一发而动全身的设计不是什么好主意～</li>\n</ul>\n<p>所以InnoDB复用了之前存储用户记录的数据页来存储目录项，为了和用户记录做一下区分，我们把这些用来表示目录项的记录称为目录项记录。<br>InnoDB就是通过记录头信息中的record_type来进行区分一条普通的记录是普通用户记录还是目录项记录</p>\n<p>当为这些存储目录项记录的页再生成一个更高级的目录，就像是一个多级目录一样，大目录里嵌套小目录，小目录里才是实际的数据，随着表中记录的增加，这个目录的层级会继续增加，如果简化一下，那么我们可以用下面这个图来描述它：<br><img src=\"/images/7_1.jpg\" alt=\"QQ截图20221216141803.png\"><br>一般情况下，我们用到的B+树都不会超过4层，那我们通过主键值去查找某条记录最多只需要做4个页面内的查找（查找3个目录项页和一个用户记录页），又因为在每个页面内有所谓的Page Directory（页目录），所以在页面内也可以通过二分法实现快速定位记录</p>\n<h3 id=\"聚簇索引\"><a href=\"#聚簇索引\" class=\"headerlink\" title=\"聚簇索引\"></a>聚簇索引</h3><p>我们上面介绍的B+树本身就是一个目录，或者说本身就是一个索引。它有两个特点：</p>\n<p>1.使用记录主键值的大小进行记录和页的排序，这包括三个方面的含义：</p>\n<ul>\n<li>页内的记录是按照主键的大小顺序排成一个单向链表。</li>\n<li>各个存放用户记录的页也是根据页中用户记录的主键大小顺序排成一个双向链表。</li>\n<li>存放目录项记录的页分为不同的层次，在同一层次中的页也是根据页中目录项记录的主键大小顺序排成一个双向链表。</li>\n</ul>\n<p>2.B+树的叶子节点存储的是完整的用户记录。</p>\n<ul>\n<li>所谓完整的用户记录，就是指这个记录中存储了所有列的值（包括隐藏列）。</li>\n</ul>\n<p>具有以上两种特性的B+树称为聚簇索引，所有完整的用户记录都存放在这个聚簇索引的叶子节点处。这种索引不需要通过使用INDEX语句去创建。</p>\n<h3 id=\"二级索引（辅助索引）\"><a href=\"#二级索引（辅助索引）\" class=\"headerlink\" title=\"二级索引（辅助索引）\"></a>二级索引（辅助索引）</h3><p>上面介绍的聚簇索引只能在搜索条件是主键值时才能发挥作用，因为B+树中的数据都是按照主键进行排序的。如果想以别的列作为搜索条件，可以多建立几棵B+树<br>在查找数据的过程中，查找完二级索引后只能获得主键值，仍然需要到聚簇索引中再查一遍，这个过程称为回表</p>\n<h3 id=\"联合索引\"><a href=\"#联合索引\" class=\"headerlink\" title=\"联合索引\"></a>联合索引</h3><p>我们页可以同时以多个列的大小作为排序规则，也就是同时为多个列建立索引，联合索引的本质上也是一个二级索引。</p>\n<h1 id=\"B-树索引注意事项\"><a href=\"#B-树索引注意事项\" class=\"headerlink\" title=\"B+树索引注意事项\"></a>B+树索引注意事项</h1><h3 id=\"根页面万年不动窝\"><a href=\"#根页面万年不动窝\" class=\"headerlink\" title=\"根页面万年不动窝\"></a>根页面万年不动窝</h3><ul>\n<li>每当为某个表创建一个B+树索引（聚簇索引不是人为创建的，默认就有）的时候，都会为这个索引创建一个根节点页面。最开始表中没有数据的时候，每个B+树索引对应的根节点中既没有用户记录，也没有目录项记录</li>\n<li>随后向表中插入用户记录时，先把用户记录存储到这个根节点中</li>\n<li>当根节点中的可用空间用完时继续插入记录，此时会将根节点中的所有记录复制到一个新的分配页，然后再对这个新页进行页分裂的操作，根节点升级为存储目录项记录的页。</li>\n</ul>\n<h3 id=\"内节点中目录项记录的唯一性\"><a href=\"#内节点中目录项记录的唯一性\" class=\"headerlink\" title=\"内节点中目录项记录的唯一性\"></a>内节点中目录项记录的唯一性</h3><h3 id=\"一个页面最少存储2条记录\"><a href=\"#一个页面最少存储2条记录\" class=\"headerlink\" title=\"一个页面最少存储2条记录\"></a>一个页面最少存储2条记录</h3><h1 id=\"MyISAM中的索引方案\"><a href=\"#MyISAM中的索引方案\" class=\"headerlink\" title=\"MyISAM中的索引方案\"></a>MyISAM中的索引方案</h1><p>将索引和数据分开存储</p>\n<ul>\n<li>将表中的记录按照记录的插入顺序单独村粗在一个文件中，称之为数据文件。可以通过行号快速访问到一条记录</li>\n<li>会将索引信息另外存储到一个称为索引文件的另一个文件中。MyISAM会单独为表的主键创建一个索引，只不过在索引的叶子节点中存储的不是完整的用户记录，而是主键值 + 行号 的组合。先通过索引找到行号，再通过行号去找到对应的记录</li>\n<li>如果有需要的话，我们也可以对其它的列分别建立索引或者建立联合索引，原理和InnoDB中的索引差不多，不过在叶子节点处存储的是相应的列 + 行号。这些索引也全部都是二级索引。</li>\n</ul>\n<h1 id=\"MySQL中创建和删除索引的语句\"><a href=\"#MySQL中创建和删除索引的语句\" class=\"headerlink\" title=\"MySQL中创建和删除索引的语句\"></a>MySQL中创建和删除索引的语句</h1><p>我们可以在创建表的时候指定需要建立索引的单个列或者建立联合索引的多个列：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TALBE 表名 (</span><br><span class=\"line\">    各种列的信息 ··· , </span><br><span class=\"line\">    [KEY|INDEX] 索引名 (需要被索引的单个列或多个列)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE 表名 ADD [INDEX|KEY] 索引名 (需要被索引的单个列或多个列);</span><br><span class=\"line\">ALTER TABLE 表名 DROP [INDEX|KEY] 索引名;</span><br></pre></td></tr></table></figure>"},{"title":"8.单表访问方法","date":"2023-05-27T18:19:50.000Z","_content":"\n\n> const:\n1.直接利用主键值在聚簇索引中定位对应的用户记录\n2.根据唯一二级索引列来定位一条记录\n\n> ref:\n1.对某个普通的二级索引列与常数进行等值比较\n2.无论是普通二级索引还是唯一二级索引，索引列值为NULL\n3.对于某个包含多个索引列的二级索引来说，只要是最左边的连续索引列是与常数的等值比较\n\n> ref_of_null:\n1.当我们不仅想找出某个二级索引列的值等于某个常数的记录，还想把列的值为NULL的记录也找出来\n\n> range:\n1.利用索引进行范围匹配\n\n> index:\n1.直接遍历二级索引记录\n\n> all:\n1.全表扫描\n\n优化","source":"_posts/8-单表访问方法.md","raw":"---\ntitle: 8.单表访问方法\ndate: 2023-05-27 14:19:50\ntags: [MySQL,MySQL是怎样运行的]\ncategories: 数据库\n---\n\n\n> const:\n1.直接利用主键值在聚簇索引中定位对应的用户记录\n2.根据唯一二级索引列来定位一条记录\n\n> ref:\n1.对某个普通的二级索引列与常数进行等值比较\n2.无论是普通二级索引还是唯一二级索引，索引列值为NULL\n3.对于某个包含多个索引列的二级索引来说，只要是最左边的连续索引列是与常数的等值比较\n\n> ref_of_null:\n1.当我们不仅想找出某个二级索引列的值等于某个常数的记录，还想把列的值为NULL的记录也找出来\n\n> range:\n1.利用索引进行范围匹配\n\n> index:\n1.直接遍历二级索引记录\n\n> all:\n1.全表扫描\n\n优化","slug":"8-单表访问方法","published":1,"updated":"2023-10-01T02:55:45.143Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cln6ws36000145gi57l5ac8yo","content":"<blockquote>\n<p>const:<br>1.直接利用主键值在聚簇索引中定位对应的用户记录<br>2.根据唯一二级索引列来定位一条记录</p>\n</blockquote>\n<blockquote>\n<p>ref:<br>1.对某个普通的二级索引列与常数进行等值比较<br>2.无论是普通二级索引还是唯一二级索引，索引列值为NULL<br>3.对于某个包含多个索引列的二级索引来说，只要是最左边的连续索引列是与常数的等值比较</p>\n</blockquote>\n<blockquote>\n<p>ref_of_null:<br>1.当我们不仅想找出某个二级索引列的值等于某个常数的记录，还想把列的值为NULL的记录也找出来</p>\n</blockquote>\n<blockquote>\n<p>range:<br>1.利用索引进行范围匹配</p>\n</blockquote>\n<blockquote>\n<p>index:<br>1.直接遍历二级索引记录</p>\n</blockquote>\n<blockquote>\n<p>all:<br>1.全表扫描</p>\n</blockquote>\n<p>优化</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>const:<br>1.直接利用主键值在聚簇索引中定位对应的用户记录<br>2.根据唯一二级索引列来定位一条记录</p>\n</blockquote>\n<blockquote>\n<p>ref:<br>1.对某个普通的二级索引列与常数进行等值比较<br>2.无论是普通二级索引还是唯一二级索引，索引列值为NULL<br>3.对于某个包含多个索引列的二级索引来说，只要是最左边的连续索引列是与常数的等值比较</p>\n</blockquote>\n<blockquote>\n<p>ref_of_null:<br>1.当我们不仅想找出某个二级索引列的值等于某个常数的记录，还想把列的值为NULL的记录也找出来</p>\n</blockquote>\n<blockquote>\n<p>range:<br>1.利用索引进行范围匹配</p>\n</blockquote>\n<blockquote>\n<p>index:<br>1.直接遍历二级索引记录</p>\n</blockquote>\n<blockquote>\n<p>all:<br>1.全表扫描</p>\n</blockquote>\n<p>优化</p>\n"},{"title":"9.连接的原理","date":"2023-05-27T18:20:17.000Z","_content":"\n\n### 连接过程简介\n- 涉及单表的条件\n- 涉及两表的条件\n\n1.嵌套循环连接\n2.使用索引加快连接速度\n3.基于块的嵌套循环连接\n","source":"_posts/9-连接的原理.md","raw":"---\ntitle: 9.连接的原理\ndate: 2023-05-27 14:20:17\ntags: [MySQL,MySQL是怎样运行的]\ncategories: 数据库\n---\n\n\n### 连接过程简介\n- 涉及单表的条件\n- 涉及两表的条件\n\n1.嵌套循环连接\n2.使用索引加快连接速度\n3.基于块的嵌套循环连接\n","slug":"9-连接的原理","published":1,"updated":"2023-10-01T02:55:45.143Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cln6ws36100175gi5fhek5d3v","content":"<h3 id=\"连接过程简介\"><a href=\"#连接过程简介\" class=\"headerlink\" title=\"连接过程简介\"></a>连接过程简介</h3><ul>\n<li>涉及单表的条件</li>\n<li>涉及两表的条件</li>\n</ul>\n<p>1.嵌套循环连接<br>2.使用索引加快连接速度<br>3.基于块的嵌套循环连接</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"连接过程简介\"><a href=\"#连接过程简介\" class=\"headerlink\" title=\"连接过程简介\"></a>连接过程简介</h3><ul>\n<li>涉及单表的条件</li>\n<li>涉及两表的条件</li>\n</ul>\n<p>1.嵌套循环连接<br>2.使用索引加快连接速度<br>3.基于块的嵌套循环连接</p>\n"},{"title":"cmake学习","date":"2023-05-28T15:02:55.000Z","_content":"\n语法手册：cmake语法手册及教程_可克的博客-CSDN博客_cmake语法\n\n[哔哩哔哩视频](https://www.bilibili.com/video/BV1vR4y1u77h?spm_id_from=333.337.search-card.all.click)\n\n视频下方有笔记\n\n![图片](images/cmake学习/1.jpg)\n\n\nadd_definitions()添加编译选项\n\n\n\ninclude_directories()将指定目录添加到编译器的头文件搜索路径下\n\n[参考](https://www.jianshu.com/p/e7de3de1b0fa)\n\nadd_library()生成静态库（STATIC)或者动态库（SHARED）\n\nadd_executable()生成可执行文件\n\naux_source_directory(dir VAR) 发现一个目录(dir)下所有的源代码文件并将列表存储在一个变量(VAR)中\n\ntarget_link_libraries( # 目标库 demo # 目标库需要链接的库 ${log-lib} )","source":"_posts/cmake学习.md","raw":"---\ntitle: cmake学习\ndate: 2023-05-28 11:02:55\ntags: cmake\ncategories: cmake\n---\n\n语法手册：cmake语法手册及教程_可克的博客-CSDN博客_cmake语法\n\n[哔哩哔哩视频](https://www.bilibili.com/video/BV1vR4y1u77h?spm_id_from=333.337.search-card.all.click)\n\n视频下方有笔记\n\n![图片](images/cmake学习/1.jpg)\n\n\nadd_definitions()添加编译选项\n\n\n\ninclude_directories()将指定目录添加到编译器的头文件搜索路径下\n\n[参考](https://www.jianshu.com/p/e7de3de1b0fa)\n\nadd_library()生成静态库（STATIC)或者动态库（SHARED）\n\nadd_executable()生成可执行文件\n\naux_source_directory(dir VAR) 发现一个目录(dir)下所有的源代码文件并将列表存储在一个变量(VAR)中\n\ntarget_link_libraries( # 目标库 demo # 目标库需要链接的库 ${log-lib} )","slug":"cmake学习","published":1,"updated":"2023-10-01T02:55:45.143Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cln6ws363001b5gi54r188p0u","content":"<p>语法手册：cmake语法手册及教程_可克的博客-CSDN博客_cmake语法</p>\n<p><a href=\"https://www.bilibili.com/video/BV1vR4y1u77h?spm_id_from=333.337.search-card.all.click\">哔哩哔哩视频</a></p>\n<p>视频下方有笔记</p>\n<p><img src=\"/images/cmake%E5%AD%A6%E4%B9%A0/1.jpg\" alt=\"图片\"></p>\n<p>add_definitions()添加编译选项</p>\n<p>include_directories()将指定目录添加到编译器的头文件搜索路径下</p>\n<p><a href=\"https://www.jianshu.com/p/e7de3de1b0fa\">参考</a></p>\n<p>add_library()生成静态库（STATIC)或者动态库（SHARED）</p>\n<p>add_executable()生成可执行文件</p>\n<p>aux_source_directory(dir VAR) 发现一个目录(dir)下所有的源代码文件并将列表存储在一个变量(VAR)中</p>\n<p>target_link_libraries( # 目标库 demo # 目标库需要链接的库 ${log-lib} )</p>\n","site":{"data":{}},"excerpt":"","more":"<p>语法手册：cmake语法手册及教程_可克的博客-CSDN博客_cmake语法</p>\n<p><a href=\"https://www.bilibili.com/video/BV1vR4y1u77h?spm_id_from=333.337.search-card.all.click\">哔哩哔哩视频</a></p>\n<p>视频下方有笔记</p>\n<p><img src=\"/images/cmake%E5%AD%A6%E4%B9%A0/1.jpg\" alt=\"图片\"></p>\n<p>add_definitions()添加编译选项</p>\n<p>include_directories()将指定目录添加到编译器的头文件搜索路径下</p>\n<p><a href=\"https://www.jianshu.com/p/e7de3de1b0fa\">参考</a></p>\n<p>add_library()生成静态库（STATIC)或者动态库（SHARED）</p>\n<p>add_executable()生成可执行文件</p>\n<p>aux_source_directory(dir VAR) 发现一个目录(dir)下所有的源代码文件并将列表存储在一个变量(VAR)中</p>\n<p>target_link_libraries( # 目标库 demo # 目标库需要链接的库 ${log-lib} )</p>\n"},{"title":"configure命令","date":"2023-05-28T15:06:04.000Z","_content":"\n[参考](https://blog.csdn.net/qq_40941932/article/details/109992151)\n","source":"_posts/configure命令.md","raw":"---\ntitle: configure命令\ndate: 2023-05-28 11:06:04\ntags: configure\ncategories: 随笔\n---\n\n[参考](https://blog.csdn.net/qq_40941932/article/details/109992151)\n","slug":"configure命令","published":1,"updated":"2023-10-01T02:55:45.143Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cln6ws364001e5gi5bikja71v","content":"<p><a href=\"https://blog.csdn.net/qq_40941932/article/details/109992151\">参考</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://blog.csdn.net/qq_40941932/article/details/109992151\">参考</a></p>\n"},{"title":"linux下目录各个文件夹详解","date":"2023-05-28T14:58:33.000Z","_content":"\n[参考](https://blog.csdn.net/qq_39652397/article/details/123794887)\n","source":"_posts/linux下目录各个文件夹详解.md","raw":"---\ntitle: linux下目录各个文件夹详解\ndate: 2023-05-28 10:58:33\ntags: [Linux不同目录详解]\ncategories: Linux\n---\n\n[参考](https://blog.csdn.net/qq_39652397/article/details/123794887)\n","slug":"linux下目录各个文件夹详解","published":1,"updated":"2023-10-01T02:55:45.143Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cln6ws365001j5gi5egpta3x8","content":"<p><a href=\"https://blog.csdn.net/qq_39652397/article/details/123794887\">参考</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://blog.csdn.net/qq_39652397/article/details/123794887\">参考</a></p>\n"},{"title":"linux文件权限和属性","date":"2023-05-28T14:56:48.000Z","_content":"\n如果一个文件被设置了SUID或SGID位，会分别表现在所有者或同组用户的权限的可执行位上。例如：\n\n1、-rwsr-xr-x 表示SUID和所有者权限中可执行位被设置\n\n2、-rwSr–r– 表示SUID被设置，但所有者权限中可执行位没有被设置\n\n3、-rwxr-sr-x 表示SGID和同组用户权限中可执行位被设置\n\n4、-rw-r-Sr– 表示SGID被设置，但同组用户权限中可执行位没有被设置\n\n给文件加SUID和SUID的命令如下：\n\nchmod u+s filename 设置SUID位\n\nchmod u-s filename 去掉SUID设置\n\nchmod g+s filename 设置SGID位\n\nchmod g-s filename 去掉SGID设置\n\n\nSUID属性\n例如/usr/bin/passwd  带有SUID属性 属于root用户 root用户主\n其它用户只有/usr/bin/passwd的可执行权限，在执行这个命令时会暂时获取root权限\n\nSGID属性\n和SUID属性十分相似\n不同的是其它用户在执行有SGID属性的命令时，会暂时获取该程序群组的支持","source":"_posts/linux文件权限和属性.md","raw":"---\ntitle: linux文件权限和属性\ndate: 2023-05-28 10:56:48\ntags: [Linux文件权限]\ncategories: Linux\n---\n\n如果一个文件被设置了SUID或SGID位，会分别表现在所有者或同组用户的权限的可执行位上。例如：\n\n1、-rwsr-xr-x 表示SUID和所有者权限中可执行位被设置\n\n2、-rwSr–r– 表示SUID被设置，但所有者权限中可执行位没有被设置\n\n3、-rwxr-sr-x 表示SGID和同组用户权限中可执行位被设置\n\n4、-rw-r-Sr– 表示SGID被设置，但同组用户权限中可执行位没有被设置\n\n给文件加SUID和SUID的命令如下：\n\nchmod u+s filename 设置SUID位\n\nchmod u-s filename 去掉SUID设置\n\nchmod g+s filename 设置SGID位\n\nchmod g-s filename 去掉SGID设置\n\n\nSUID属性\n例如/usr/bin/passwd  带有SUID属性 属于root用户 root用户主\n其它用户只有/usr/bin/passwd的可执行权限，在执行这个命令时会暂时获取root权限\n\nSGID属性\n和SUID属性十分相似\n不同的是其它用户在执行有SGID属性的命令时，会暂时获取该程序群组的支持","slug":"linux文件权限和属性","published":1,"updated":"2023-10-01T02:55:45.143Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cln6ws366001m5gi54plc52ru","content":"<p>如果一个文件被设置了SUID或SGID位，会分别表现在所有者或同组用户的权限的可执行位上。例如：</p>\n<p>1、-rwsr-xr-x 表示SUID和所有者权限中可执行位被设置</p>\n<p>2、-rwSr–r– 表示SUID被设置，但所有者权限中可执行位没有被设置</p>\n<p>3、-rwxr-sr-x 表示SGID和同组用户权限中可执行位被设置</p>\n<p>4、-rw-r-Sr– 表示SGID被设置，但同组用户权限中可执行位没有被设置</p>\n<p>给文件加SUID和SUID的命令如下：</p>\n<p>chmod u+s filename 设置SUID位</p>\n<p>chmod u-s filename 去掉SUID设置</p>\n<p>chmod g+s filename 设置SGID位</p>\n<p>chmod g-s filename 去掉SGID设置</p>\n<p>SUID属性<br>例如&#x2F;usr&#x2F;bin&#x2F;passwd  带有SUID属性 属于root用户 root用户主<br>其它用户只有&#x2F;usr&#x2F;bin&#x2F;passwd的可执行权限，在执行这个命令时会暂时获取root权限</p>\n<p>SGID属性<br>和SUID属性十分相似<br>不同的是其它用户在执行有SGID属性的命令时，会暂时获取该程序群组的支持</p>\n","site":{"data":{}},"excerpt":"","more":"<p>如果一个文件被设置了SUID或SGID位，会分别表现在所有者或同组用户的权限的可执行位上。例如：</p>\n<p>1、-rwsr-xr-x 表示SUID和所有者权限中可执行位被设置</p>\n<p>2、-rwSr–r– 表示SUID被设置，但所有者权限中可执行位没有被设置</p>\n<p>3、-rwxr-sr-x 表示SGID和同组用户权限中可执行位被设置</p>\n<p>4、-rw-r-Sr– 表示SGID被设置，但同组用户权限中可执行位没有被设置</p>\n<p>给文件加SUID和SUID的命令如下：</p>\n<p>chmod u+s filename 设置SUID位</p>\n<p>chmod u-s filename 去掉SUID设置</p>\n<p>chmod g+s filename 设置SGID位</p>\n<p>chmod g-s filename 去掉SGID设置</p>\n<p>SUID属性<br>例如&#x2F;usr&#x2F;bin&#x2F;passwd  带有SUID属性 属于root用户 root用户主<br>其它用户只有&#x2F;usr&#x2F;bin&#x2F;passwd的可执行权限，在执行这个命令时会暂时获取root权限</p>\n<p>SGID属性<br>和SUID属性十分相似<br>不同的是其它用户在执行有SGID属性的命令时，会暂时获取该程序群组的支持</p>\n"},{"title":"linux配置环境变量","date":"2023-05-28T15:00:18.000Z","_content":"\n[参考](https://blog.csdn.net/an520_/article/details/125220048)\n","source":"_posts/linux配置环境变量.md","raw":"---\ntitle: linux配置环境变量\ndate: 2023-05-28 11:00:18\ntags: [Linux环境变量配置]\ncategories: Linux\n---\n\n[参考](https://blog.csdn.net/an520_/article/details/125220048)\n","slug":"linux配置环境变量","published":1,"updated":"2023-10-01T02:55:45.143Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cln6ws36c001q5gi52aba9dix","content":"<p><a href=\"https://blog.csdn.net/an520_/article/details/125220048\">参考</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://blog.csdn.net/an520_/article/details/125220048\">参考</a></p>\n"},{"title":"动态链接","date":"2023-05-28T15:09:30.000Z","_content":"\n\n### 静态链接浪费内存和磁盘空间并且更新困难。动态链接的基本思想： 把链接过程推迟到运行时进行。\n\n-shared\n>生成动态链接模块时只使用-shared，由于装载时重定位的方法需要修改指令，没有办法做到同一份指令被多个进程共享，因为指令被重定位之后对于每个进程来讲是不同的。\n\n-fPIC 地址无关代码\n>实现的基本思想就是把指令中那些需要被修改的部分分离出来，跟数据部分放在一起，这样指令部分可以保持不变，而数据部分在每个进程中拥有一个副本。这种方案就是地址无关技术\n\nGOT全局偏移表\n>对于动态链接模块中,对于外部符号（数据）的访问的机制，当指令需要访问某个外部变量时，程序会先找到GOT，然后根据GOT中变量所对应的项找到变量的目标地址。每个变量都对应一个4个字节的地址，链接器在装载模块的时候会查找每个变量所在的地址，然后填充GOT中的各个项。由于GOT表本身是放在数据段的，所以它可以在模块装载时被修改，并且每个进程都可以有独立的副本。\n\n-fPIE\n>地址无关代码技术除了可以用在动态链接模块上，它也可以用于可执行文件\n\n共享模块（动态链接模块）的全局变量问题\n>当一个模块引用了定义在共享对象的全局变量的时候，由于可执行文件在之前链接时就必须确定该全局变量的地址，所以连接器会在创建可执行文件时，在它的.bss段创建一个global变量的副本。导致同一变量同时存在于多个位置\n>于是解决的办法只有一个，那就是所有的使用这个变量的指令都指向位于可执行文件中的那个副本。ELF共享库在编译时，默认都把定义在模块内部的全局变量当作定义在其他模块的全局变量，也就是说当作前面的类型四，通过GOT来实现变量的访问。当共享模块被装载时，如果某个全局变量在可执行文件中拥有副本，那么动态链接器就会把GOT中的相应地址指向该副本，这样该变量在运行时实际上最终就只有一个实例。如果变量在共享模块中被初始化，那么动态链接器还需要将该初始化值复制到程序主模块中的变量副本；如果该全局变量在程序主模块中没有副本，那么GOT中的相应地址就指向模块内部的该变量副本。\n\n**默认情况下，如果可执行文件是动态链接的，那么GCC会使用PIC的方法来产生可执行文件的代码段部分，以便于不同的进程能够共享代码段，节省内存。所以动态链接的可执行文件中存在.got段**\n\n延迟绑定\n>由于动态链接下对于全局数据的访问和跨模块的调用都要进行复杂的GOT定位，然后间接寻址或调用，导致程序的运行速度减慢大概1%~%5。又因为动态链接的链接工作在运行时完成，导致程序的启动速度减慢。\n程序运行过程中，会有很多函数没有用到（错误处理函数，没有使用的功能模块等），所以没有必要一开始就把所有函数都链接好，ELF采用延迟绑定的方法，基本思想是当函数第一次被用到时才由动态链接器进行绑定（符号查找，重定位等），没用到的不绑定。这提高了程序的启动速度。\nELF使用PLT（Procedure Linkage Table）来实现延迟绑定,它使用了一些很精巧的指令序列来完成\n\nELF将GOT拆分成了两个表.got和.got.plt，其中.got用来保存全局变量引用的地址，.got.plt用来保存函数引用的地址\nPLT在ELF文件中以独立的段存放，段名通常叫做.plt，因为它本身是一些地址无关代码，所以可以跟代码段合并成同一个可读可写可执行的“Segment\"被载入内存\n[参考链接](https://markrepo.github.io/kernel/2018/08/19/dynamic-link/)","source":"_posts/动态链接.md","raw":"---\ntitle: 动态链接\ndate: 2023-05-28 11:09:30\ntags: 链接、装载与库\ncategories: 随笔\n---\n\n\n### 静态链接浪费内存和磁盘空间并且更新困难。动态链接的基本思想： 把链接过程推迟到运行时进行。\n\n-shared\n>生成动态链接模块时只使用-shared，由于装载时重定位的方法需要修改指令，没有办法做到同一份指令被多个进程共享，因为指令被重定位之后对于每个进程来讲是不同的。\n\n-fPIC 地址无关代码\n>实现的基本思想就是把指令中那些需要被修改的部分分离出来，跟数据部分放在一起，这样指令部分可以保持不变，而数据部分在每个进程中拥有一个副本。这种方案就是地址无关技术\n\nGOT全局偏移表\n>对于动态链接模块中,对于外部符号（数据）的访问的机制，当指令需要访问某个外部变量时，程序会先找到GOT，然后根据GOT中变量所对应的项找到变量的目标地址。每个变量都对应一个4个字节的地址，链接器在装载模块的时候会查找每个变量所在的地址，然后填充GOT中的各个项。由于GOT表本身是放在数据段的，所以它可以在模块装载时被修改，并且每个进程都可以有独立的副本。\n\n-fPIE\n>地址无关代码技术除了可以用在动态链接模块上，它也可以用于可执行文件\n\n共享模块（动态链接模块）的全局变量问题\n>当一个模块引用了定义在共享对象的全局变量的时候，由于可执行文件在之前链接时就必须确定该全局变量的地址，所以连接器会在创建可执行文件时，在它的.bss段创建一个global变量的副本。导致同一变量同时存在于多个位置\n>于是解决的办法只有一个，那就是所有的使用这个变量的指令都指向位于可执行文件中的那个副本。ELF共享库在编译时，默认都把定义在模块内部的全局变量当作定义在其他模块的全局变量，也就是说当作前面的类型四，通过GOT来实现变量的访问。当共享模块被装载时，如果某个全局变量在可执行文件中拥有副本，那么动态链接器就会把GOT中的相应地址指向该副本，这样该变量在运行时实际上最终就只有一个实例。如果变量在共享模块中被初始化，那么动态链接器还需要将该初始化值复制到程序主模块中的变量副本；如果该全局变量在程序主模块中没有副本，那么GOT中的相应地址就指向模块内部的该变量副本。\n\n**默认情况下，如果可执行文件是动态链接的，那么GCC会使用PIC的方法来产生可执行文件的代码段部分，以便于不同的进程能够共享代码段，节省内存。所以动态链接的可执行文件中存在.got段**\n\n延迟绑定\n>由于动态链接下对于全局数据的访问和跨模块的调用都要进行复杂的GOT定位，然后间接寻址或调用，导致程序的运行速度减慢大概1%~%5。又因为动态链接的链接工作在运行时完成，导致程序的启动速度减慢。\n程序运行过程中，会有很多函数没有用到（错误处理函数，没有使用的功能模块等），所以没有必要一开始就把所有函数都链接好，ELF采用延迟绑定的方法，基本思想是当函数第一次被用到时才由动态链接器进行绑定（符号查找，重定位等），没用到的不绑定。这提高了程序的启动速度。\nELF使用PLT（Procedure Linkage Table）来实现延迟绑定,它使用了一些很精巧的指令序列来完成\n\nELF将GOT拆分成了两个表.got和.got.plt，其中.got用来保存全局变量引用的地址，.got.plt用来保存函数引用的地址\nPLT在ELF文件中以独立的段存放，段名通常叫做.plt，因为它本身是一些地址无关代码，所以可以跟代码段合并成同一个可读可写可执行的“Segment\"被载入内存\n[参考链接](https://markrepo.github.io/kernel/2018/08/19/dynamic-link/)","slug":"动态链接","published":1,"updated":"2023-10-02T01:42:26.458Z","_id":"cln6ws36h001u5gi5684t7waz","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"静态链接浪费内存和磁盘空间并且更新困难。动态链接的基本思想：-把链接过程推迟到运行时进行。\"><a href=\"#静态链接浪费内存和磁盘空间并且更新困难。动态链接的基本思想：-把链接过程推迟到运行时进行。\" class=\"headerlink\" title=\"静态链接浪费内存和磁盘空间并且更新困难。动态链接的基本思想： 把链接过程推迟到运行时进行。\"></a>静态链接浪费内存和磁盘空间并且更新困难。动态链接的基本思想： 把链接过程推迟到运行时进行。</h3><p>-shared</p>\n<blockquote>\n<p>生成动态链接模块时只使用-shared，由于装载时重定位的方法需要修改指令，没有办法做到同一份指令被多个进程共享，因为指令被重定位之后对于每个进程来讲是不同的。</p>\n</blockquote>\n<p>-fPIC 地址无关代码</p>\n<blockquote>\n<p>实现的基本思想就是把指令中那些需要被修改的部分分离出来，跟数据部分放在一起，这样指令部分可以保持不变，而数据部分在每个进程中拥有一个副本。这种方案就是地址无关技术</p>\n</blockquote>\n<p>GOT全局偏移表</p>\n<blockquote>\n<p>对于动态链接模块中,对于外部符号（数据）的访问的机制，当指令需要访问某个外部变量时，程序会先找到GOT，然后根据GOT中变量所对应的项找到变量的目标地址。每个变量都对应一个4个字节的地址，链接器在装载模块的时候会查找每个变量所在的地址，然后填充GOT中的各个项。由于GOT表本身是放在数据段的，所以它可以在模块装载时被修改，并且每个进程都可以有独立的副本。</p>\n</blockquote>\n<p>-fPIE</p>\n<blockquote>\n<p>地址无关代码技术除了可以用在动态链接模块上，它也可以用于可执行文件</p>\n</blockquote>\n<p>共享模块（动态链接模块）的全局变量问题</p>\n<blockquote>\n<p>当一个模块引用了定义在共享对象的全局变量的时候，由于可执行文件在之前链接时就必须确定该全局变量的地址，所以连接器会在创建可执行文件时，在它的.bss段创建一个global变量的副本。导致同一变量同时存在于多个位置<br>于是解决的办法只有一个，那就是所有的使用这个变量的指令都指向位于可执行文件中的那个副本。ELF共享库在编译时，默认都把定义在模块内部的全局变量当作定义在其他模块的全局变量，也就是说当作前面的类型四，通过GOT来实现变量的访问。当共享模块被装载时，如果某个全局变量在可执行文件中拥有副本，那么动态链接器就会把GOT中的相应地址指向该副本，这样该变量在运行时实际上最终就只有一个实例。如果变量在共享模块中被初始化，那么动态链接器还需要将该初始化值复制到程序主模块中的变量副本；如果该全局变量在程序主模块中没有副本，那么GOT中的相应地址就指向模块内部的该变量副本。</p>\n</blockquote>\n<p><strong>默认情况下，如果可执行文件是动态链接的，那么GCC会使用PIC的方法来产生可执行文件的代码段部分，以便于不同的进程能够共享代码段，节省内存。所以动态链接的可执行文件中存在.got段</strong></p>\n<p>延迟绑定</p>\n<blockquote>\n<p>由于动态链接下对于全局数据的访问和跨模块的调用都要进行复杂的GOT定位，然后间接寻址或调用，导致程序的运行速度减慢大概1%~%5。又因为动态链接的链接工作在运行时完成，导致程序的启动速度减慢。<br>程序运行过程中，会有很多函数没有用到（错误处理函数，没有使用的功能模块等），所以没有必要一开始就把所有函数都链接好，ELF采用延迟绑定的方法，基本思想是当函数第一次被用到时才由动态链接器进行绑定（符号查找，重定位等），没用到的不绑定。这提高了程序的启动速度。<br>ELF使用PLT（Procedure Linkage Table）来实现延迟绑定,它使用了一些很精巧的指令序列来完成</p>\n</blockquote>\n<p>ELF将GOT拆分成了两个表.got和.got.plt，其中.got用来保存全局变量引用的地址，.got.plt用来保存函数引用的地址<br>PLT在ELF文件中以独立的段存放，段名通常叫做.plt，因为它本身是一些地址无关代码，所以可以跟代码段合并成同一个可读可写可执行的“Segment”被载入内存<br><a href=\"https://markrepo.github.io/kernel/2018/08/19/dynamic-link/\">参考链接</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"静态链接浪费内存和磁盘空间并且更新困难。动态链接的基本思想：-把链接过程推迟到运行时进行。\"><a href=\"#静态链接浪费内存和磁盘空间并且更新困难。动态链接的基本思想：-把链接过程推迟到运行时进行。\" class=\"headerlink\" title=\"静态链接浪费内存和磁盘空间并且更新困难。动态链接的基本思想： 把链接过程推迟到运行时进行。\"></a>静态链接浪费内存和磁盘空间并且更新困难。动态链接的基本思想： 把链接过程推迟到运行时进行。</h3><p>-shared</p>\n<blockquote>\n<p>生成动态链接模块时只使用-shared，由于装载时重定位的方法需要修改指令，没有办法做到同一份指令被多个进程共享，因为指令被重定位之后对于每个进程来讲是不同的。</p>\n</blockquote>\n<p>-fPIC 地址无关代码</p>\n<blockquote>\n<p>实现的基本思想就是把指令中那些需要被修改的部分分离出来，跟数据部分放在一起，这样指令部分可以保持不变，而数据部分在每个进程中拥有一个副本。这种方案就是地址无关技术</p>\n</blockquote>\n<p>GOT全局偏移表</p>\n<blockquote>\n<p>对于动态链接模块中,对于外部符号（数据）的访问的机制，当指令需要访问某个外部变量时，程序会先找到GOT，然后根据GOT中变量所对应的项找到变量的目标地址。每个变量都对应一个4个字节的地址，链接器在装载模块的时候会查找每个变量所在的地址，然后填充GOT中的各个项。由于GOT表本身是放在数据段的，所以它可以在模块装载时被修改，并且每个进程都可以有独立的副本。</p>\n</blockquote>\n<p>-fPIE</p>\n<blockquote>\n<p>地址无关代码技术除了可以用在动态链接模块上，它也可以用于可执行文件</p>\n</blockquote>\n<p>共享模块（动态链接模块）的全局变量问题</p>\n<blockquote>\n<p>当一个模块引用了定义在共享对象的全局变量的时候，由于可执行文件在之前链接时就必须确定该全局变量的地址，所以连接器会在创建可执行文件时，在它的.bss段创建一个global变量的副本。导致同一变量同时存在于多个位置<br>于是解决的办法只有一个，那就是所有的使用这个变量的指令都指向位于可执行文件中的那个副本。ELF共享库在编译时，默认都把定义在模块内部的全局变量当作定义在其他模块的全局变量，也就是说当作前面的类型四，通过GOT来实现变量的访问。当共享模块被装载时，如果某个全局变量在可执行文件中拥有副本，那么动态链接器就会把GOT中的相应地址指向该副本，这样该变量在运行时实际上最终就只有一个实例。如果变量在共享模块中被初始化，那么动态链接器还需要将该初始化值复制到程序主模块中的变量副本；如果该全局变量在程序主模块中没有副本，那么GOT中的相应地址就指向模块内部的该变量副本。</p>\n</blockquote>\n<p><strong>默认情况下，如果可执行文件是动态链接的，那么GCC会使用PIC的方法来产生可执行文件的代码段部分，以便于不同的进程能够共享代码段，节省内存。所以动态链接的可执行文件中存在.got段</strong></p>\n<p>延迟绑定</p>\n<blockquote>\n<p>由于动态链接下对于全局数据的访问和跨模块的调用都要进行复杂的GOT定位，然后间接寻址或调用，导致程序的运行速度减慢大概1%~%5。又因为动态链接的链接工作在运行时完成，导致程序的启动速度减慢。<br>程序运行过程中，会有很多函数没有用到（错误处理函数，没有使用的功能模块等），所以没有必要一开始就把所有函数都链接好，ELF采用延迟绑定的方法，基本思想是当函数第一次被用到时才由动态链接器进行绑定（符号查找，重定位等），没用到的不绑定。这提高了程序的启动速度。<br>ELF使用PLT（Procedure Linkage Table）来实现延迟绑定,它使用了一些很精巧的指令序列来完成</p>\n</blockquote>\n<p>ELF将GOT拆分成了两个表.got和.got.plt，其中.got用来保存全局变量引用的地址，.got.plt用来保存函数引用的地址<br>PLT在ELF文件中以独立的段存放，段名通常叫做.plt，因为它本身是一些地址无关代码，所以可以跟代码段合并成同一个可读可写可执行的“Segment”被载入内存<br><a href=\"https://markrepo.github.io/kernel/2018/08/19/dynamic-link/\">参考链接</a></p>\n"},{"title":"动手深度学习","date":"2023-05-28T14:20:36.000Z","_content":"\n## 正规方程\n\n正规方程是通过求解下面的方程来找出使得代价最小的函数![](images/动手深度学习/1.jpg)\n只适用于线性模型，不适合逻辑回归模型等其它模型\n\n## 过拟合、欠拟合、权重衰退\n### 训练误差和泛化误差\n训练误差：模型在训练数据集上计算得到的误差\n泛化误差：模型应用在同样从原始样本的分布中抽取的无限多数据样本时，模型误差的期望\n>我们永远不能准确地计算出泛化误差。这是因为无限多地数据样本是一个虚构的对象。在实际中，我们只能通过将模型应用于一个独立的测试集来估计泛化误差，该测试集由随机选取的、未曾在训练集中出现的数据样本构成\n\n### 模型复杂度\n几个倾向于影响模型泛化的因素\n1.可调整参数的数量。当可调整参数的数量（自由度）很大时，模型往往更容易过拟合\n2.参数采用的值。当权重的取值范围较大时，模型可能更容易过拟合\n3.训练样本的数量。即使模型很简单，也很容易过拟合只包含一两个样本的数据集。而过拟合一个有数百万个样本的数据集则需要一个极其灵活的模型\n\n\n>正则化是处理过拟合的常用方法：在训练集的损失函数中加入惩罚项，以降低学习到的模型的复杂度\n\n## Unet网络\n[Unet](https://www.jianshu.com/p/14641b79a672)","source":"_posts/动手深度学习.md","raw":"---\ntitle: 动手深度学习\ndate: 2023-05-28 10:20:36\ntags: 深度学习\ncategories: 随笔\n---\n\n## 正规方程\n\n正规方程是通过求解下面的方程来找出使得代价最小的函数![](images/动手深度学习/1.jpg)\n只适用于线性模型，不适合逻辑回归模型等其它模型\n\n## 过拟合、欠拟合、权重衰退\n### 训练误差和泛化误差\n训练误差：模型在训练数据集上计算得到的误差\n泛化误差：模型应用在同样从原始样本的分布中抽取的无限多数据样本时，模型误差的期望\n>我们永远不能准确地计算出泛化误差。这是因为无限多地数据样本是一个虚构的对象。在实际中，我们只能通过将模型应用于一个独立的测试集来估计泛化误差，该测试集由随机选取的、未曾在训练集中出现的数据样本构成\n\n### 模型复杂度\n几个倾向于影响模型泛化的因素\n1.可调整参数的数量。当可调整参数的数量（自由度）很大时，模型往往更容易过拟合\n2.参数采用的值。当权重的取值范围较大时，模型可能更容易过拟合\n3.训练样本的数量。即使模型很简单，也很容易过拟合只包含一两个样本的数据集。而过拟合一个有数百万个样本的数据集则需要一个极其灵活的模型\n\n\n>正则化是处理过拟合的常用方法：在训练集的损失函数中加入惩罚项，以降低学习到的模型的复杂度\n\n## Unet网络\n[Unet](https://www.jianshu.com/p/14641b79a672)","slug":"动手深度学习","published":1,"updated":"2023-10-01T02:55:45.143Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cln6ws36j001y5gi550uw5kg3","content":"<h2 id=\"正规方程\"><a href=\"#正规方程\" class=\"headerlink\" title=\"正规方程\"></a>正规方程</h2><p>正规方程是通过求解下面的方程来找出使得代价最小的函数<img src=\"/images/%E5%8A%A8%E6%89%8B%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/1.jpg\"><br>只适用于线性模型，不适合逻辑回归模型等其它模型</p>\n<h2 id=\"过拟合、欠拟合、权重衰退\"><a href=\"#过拟合、欠拟合、权重衰退\" class=\"headerlink\" title=\"过拟合、欠拟合、权重衰退\"></a>过拟合、欠拟合、权重衰退</h2><h3 id=\"训练误差和泛化误差\"><a href=\"#训练误差和泛化误差\" class=\"headerlink\" title=\"训练误差和泛化误差\"></a>训练误差和泛化误差</h3><p>训练误差：模型在训练数据集上计算得到的误差<br>泛化误差：模型应用在同样从原始样本的分布中抽取的无限多数据样本时，模型误差的期望</p>\n<blockquote>\n<p>我们永远不能准确地计算出泛化误差。这是因为无限多地数据样本是一个虚构的对象。在实际中，我们只能通过将模型应用于一个独立的测试集来估计泛化误差，该测试集由随机选取的、未曾在训练集中出现的数据样本构成</p>\n</blockquote>\n<h3 id=\"模型复杂度\"><a href=\"#模型复杂度\" class=\"headerlink\" title=\"模型复杂度\"></a>模型复杂度</h3><p>几个倾向于影响模型泛化的因素<br>1.可调整参数的数量。当可调整参数的数量（自由度）很大时，模型往往更容易过拟合<br>2.参数采用的值。当权重的取值范围较大时，模型可能更容易过拟合<br>3.训练样本的数量。即使模型很简单，也很容易过拟合只包含一两个样本的数据集。而过拟合一个有数百万个样本的数据集则需要一个极其灵活的模型</p>\n<blockquote>\n<p>正则化是处理过拟合的常用方法：在训练集的损失函数中加入惩罚项，以降低学习到的模型的复杂度</p>\n</blockquote>\n<h2 id=\"Unet网络\"><a href=\"#Unet网络\" class=\"headerlink\" title=\"Unet网络\"></a>Unet网络</h2><p><a href=\"https://www.jianshu.com/p/14641b79a672\">Unet</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"正规方程\"><a href=\"#正规方程\" class=\"headerlink\" title=\"正规方程\"></a>正规方程</h2><p>正规方程是通过求解下面的方程来找出使得代价最小的函数<img src=\"/images/%E5%8A%A8%E6%89%8B%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/1.jpg\"><br>只适用于线性模型，不适合逻辑回归模型等其它模型</p>\n<h2 id=\"过拟合、欠拟合、权重衰退\"><a href=\"#过拟合、欠拟合、权重衰退\" class=\"headerlink\" title=\"过拟合、欠拟合、权重衰退\"></a>过拟合、欠拟合、权重衰退</h2><h3 id=\"训练误差和泛化误差\"><a href=\"#训练误差和泛化误差\" class=\"headerlink\" title=\"训练误差和泛化误差\"></a>训练误差和泛化误差</h3><p>训练误差：模型在训练数据集上计算得到的误差<br>泛化误差：模型应用在同样从原始样本的分布中抽取的无限多数据样本时，模型误差的期望</p>\n<blockquote>\n<p>我们永远不能准确地计算出泛化误差。这是因为无限多地数据样本是一个虚构的对象。在实际中，我们只能通过将模型应用于一个独立的测试集来估计泛化误差，该测试集由随机选取的、未曾在训练集中出现的数据样本构成</p>\n</blockquote>\n<h3 id=\"模型复杂度\"><a href=\"#模型复杂度\" class=\"headerlink\" title=\"模型复杂度\"></a>模型复杂度</h3><p>几个倾向于影响模型泛化的因素<br>1.可调整参数的数量。当可调整参数的数量（自由度）很大时，模型往往更容易过拟合<br>2.参数采用的值。当权重的取值范围较大时，模型可能更容易过拟合<br>3.训练样本的数量。即使模型很简单，也很容易过拟合只包含一两个样本的数据集。而过拟合一个有数百万个样本的数据集则需要一个极其灵活的模型</p>\n<blockquote>\n<p>正则化是处理过拟合的常用方法：在训练集的损失函数中加入惩罚项，以降低学习到的模型的复杂度</p>\n</blockquote>\n<h2 id=\"Unet网络\"><a href=\"#Unet网络\" class=\"headerlink\" title=\"Unet网络\"></a>Unet网络</h2><p><a href=\"https://www.jianshu.com/p/14641b79a672\">Unet</a></p>\n"},{"title":"静态链接","date":"2023-05-28T15:07:37.000Z","_content":">连接器采用“两部链接”的方法，将链接过程分为两部：\n\n1.空间和地址分配：扫描所有的输入目标文件，获得各个节的长度、属性、位置并将它们合并，计算合并后各个段的长度与位置，建立映射关系。收集所有输入目标文件中符号表中所有的符号定义和符号引用，统一放到全局符号表中\n2.符号解析与重定位：使用第一步中收集到的所有信息，读取输入文件中节的数据、重定位信息，并且进行符号解析与重定位、调整代码中的地址等。\n\n**重定位过程是链接过程的核心**\n\n## 符号解析与重定位\n#### 符号解析\n>重定位的过程伴随着符号解析过程，每个目标文件都可能定义一些符号，也可能引用到定义在其他目标文件的符号。重定位过程中，每个重定位的入口都是一个外部符号的引用，当链接器需要对某个符号的引用进行重定位时，他就要确定这个符号的目标地址。这时候链接器会去查找有所有输入目标文件的符号表组成的全局符号表，找到相应的符号后进行重定位，如果没有找到，就会报符号未定义的错误。\n\n#### 重定位\n>对于32位 x86平台下的ELF文件的重定位入口所修正的指令寻址方式只有两种：\n\n1.绝对近址32位寻址\n2.相对近址32为寻址\n>这两种重定位指令修正方式每个被修正的位置的长度都为32位，即4字节。而且都是近址寻址，不用考虑Intel的段间远址寻址。\n\nX86基本重定位类型：\n![QQ截图20221203153333.png](images/静态链接/1.jpg)\n","source":"_posts/静态链接.md","raw":"---\ntitle: 静态链接\ndate: 2023-05-28 11:07:37\ntags: 链接、装载与库\ncategories: 随笔\n---\n>连接器采用“两部链接”的方法，将链接过程分为两部：\n\n1.空间和地址分配：扫描所有的输入目标文件，获得各个节的长度、属性、位置并将它们合并，计算合并后各个段的长度与位置，建立映射关系。收集所有输入目标文件中符号表中所有的符号定义和符号引用，统一放到全局符号表中\n2.符号解析与重定位：使用第一步中收集到的所有信息，读取输入文件中节的数据、重定位信息，并且进行符号解析与重定位、调整代码中的地址等。\n\n**重定位过程是链接过程的核心**\n\n## 符号解析与重定位\n#### 符号解析\n>重定位的过程伴随着符号解析过程，每个目标文件都可能定义一些符号，也可能引用到定义在其他目标文件的符号。重定位过程中，每个重定位的入口都是一个外部符号的引用，当链接器需要对某个符号的引用进行重定位时，他就要确定这个符号的目标地址。这时候链接器会去查找有所有输入目标文件的符号表组成的全局符号表，找到相应的符号后进行重定位，如果没有找到，就会报符号未定义的错误。\n\n#### 重定位\n>对于32位 x86平台下的ELF文件的重定位入口所修正的指令寻址方式只有两种：\n\n1.绝对近址32位寻址\n2.相对近址32为寻址\n>这两种重定位指令修正方式每个被修正的位置的长度都为32位，即4字节。而且都是近址寻址，不用考虑Intel的段间远址寻址。\n\nX86基本重定位类型：\n![QQ截图20221203153333.png](images/静态链接/1.jpg)\n","slug":"静态链接","published":1,"updated":"2023-10-01T02:55:45.143Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cln6ws36j00225gi52ygl6qer","content":"<blockquote>\n<p>连接器采用“两部链接”的方法，将链接过程分为两部：</p>\n</blockquote>\n<p>1.空间和地址分配：扫描所有的输入目标文件，获得各个节的长度、属性、位置并将它们合并，计算合并后各个段的长度与位置，建立映射关系。收集所有输入目标文件中符号表中所有的符号定义和符号引用，统一放到全局符号表中<br>2.符号解析与重定位：使用第一步中收集到的所有信息，读取输入文件中节的数据、重定位信息，并且进行符号解析与重定位、调整代码中的地址等。</p>\n<p><strong>重定位过程是链接过程的核心</strong></p>\n<h2 id=\"符号解析与重定位\"><a href=\"#符号解析与重定位\" class=\"headerlink\" title=\"符号解析与重定位\"></a>符号解析与重定位</h2><h4 id=\"符号解析\"><a href=\"#符号解析\" class=\"headerlink\" title=\"符号解析\"></a>符号解析</h4><blockquote>\n<p>重定位的过程伴随着符号解析过程，每个目标文件都可能定义一些符号，也可能引用到定义在其他目标文件的符号。重定位过程中，每个重定位的入口都是一个外部符号的引用，当链接器需要对某个符号的引用进行重定位时，他就要确定这个符号的目标地址。这时候链接器会去查找有所有输入目标文件的符号表组成的全局符号表，找到相应的符号后进行重定位，如果没有找到，就会报符号未定义的错误。</p>\n</blockquote>\n<h4 id=\"重定位\"><a href=\"#重定位\" class=\"headerlink\" title=\"重定位\"></a>重定位</h4><blockquote>\n<p>对于32位 x86平台下的ELF文件的重定位入口所修正的指令寻址方式只有两种：</p>\n</blockquote>\n<p>1.绝对近址32位寻址<br>2.相对近址32为寻址</p>\n<blockquote>\n<p>这两种重定位指令修正方式每个被修正的位置的长度都为32位，即4字节。而且都是近址寻址，不用考虑Intel的段间远址寻址。</p>\n</blockquote>\n<p>X86基本重定位类型：<br><img src=\"/images/%E9%9D%99%E6%80%81%E9%93%BE%E6%8E%A5/1.jpg\" alt=\"QQ截图20221203153333.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>连接器采用“两部链接”的方法，将链接过程分为两部：</p>\n</blockquote>\n<p>1.空间和地址分配：扫描所有的输入目标文件，获得各个节的长度、属性、位置并将它们合并，计算合并后各个段的长度与位置，建立映射关系。收集所有输入目标文件中符号表中所有的符号定义和符号引用，统一放到全局符号表中<br>2.符号解析与重定位：使用第一步中收集到的所有信息，读取输入文件中节的数据、重定位信息，并且进行符号解析与重定位、调整代码中的地址等。</p>\n<p><strong>重定位过程是链接过程的核心</strong></p>\n<h2 id=\"符号解析与重定位\"><a href=\"#符号解析与重定位\" class=\"headerlink\" title=\"符号解析与重定位\"></a>符号解析与重定位</h2><h4 id=\"符号解析\"><a href=\"#符号解析\" class=\"headerlink\" title=\"符号解析\"></a>符号解析</h4><blockquote>\n<p>重定位的过程伴随着符号解析过程，每个目标文件都可能定义一些符号，也可能引用到定义在其他目标文件的符号。重定位过程中，每个重定位的入口都是一个外部符号的引用，当链接器需要对某个符号的引用进行重定位时，他就要确定这个符号的目标地址。这时候链接器会去查找有所有输入目标文件的符号表组成的全局符号表，找到相应的符号后进行重定位，如果没有找到，就会报符号未定义的错误。</p>\n</blockquote>\n<h4 id=\"重定位\"><a href=\"#重定位\" class=\"headerlink\" title=\"重定位\"></a>重定位</h4><blockquote>\n<p>对于32位 x86平台下的ELF文件的重定位入口所修正的指令寻址方式只有两种：</p>\n</blockquote>\n<p>1.绝对近址32位寻址<br>2.相对近址32为寻址</p>\n<blockquote>\n<p>这两种重定位指令修正方式每个被修正的位置的长度都为32位，即4字节。而且都是近址寻址，不用考虑Intel的段间远址寻址。</p>\n</blockquote>\n<p>X86基本重定位类型：<br><img src=\"/images/%E9%9D%99%E6%80%81%E9%93%BE%E6%8E%A5/1.jpg\" alt=\"QQ截图20221203153333.png\"></p>\n"},{"title":"ALEX-An-Updatable-Adaptive-Learned-Index","date":"2023-10-02T04:47:41.000Z","_content":"\n\nALEX：An Updatable Adaptive Learned Index\n\n## 应用场景：\n在DBMS中代替传统的索引结构，类似于B树、B+树之类的变种\n\n## 问题描述：\nALEX索引需要实现点查找、范围查询、插入、删除和批量载入\nALEX的目标是\n1.比B+树写数据更快\n2.比B+树和learned index读数据要更快\n3.索引大小要比B+树和learned Index要小\n\n## 难点与分析过程：\n- 写数据时：B+树插入到数据节点时需要进行大量的移位操作，对于一个dense Array 它的插入时间复杂度为O(n)\n- 写数据时：B+树插入到数据节点时，根据节点是否已满的条件来将数据节点分裂，分裂到根节点会导致树高的增加\n- 读数据时：B+树遍历到数据节点后，使用二分查找确定带查找的key的position，它的时间复杂度为O（log2n)\n- 读数据时：最初的Learned Index是先将数据排序好之后，再在该数据上创建模型，这样用最后的数据节点来预测key的位置时会有较大出错的概率，并且还需要存储Error Bound\n\n## 方法：\n- **写数据时**：ALEX使用一个gap array（间隙数组），这样在插入过程中需要更少的移位操作，它的时间复杂度近似于O（log2n）\n- **写数据时**：插入已满数据节点时，使用一个intra-node cost model模型来决定将数据节点扩展（如果没有）或者是分裂\nIntra-node cost model根据每个数据节点存储的两个信息（1.**平均每次操作指数搜索的迭代次数** 2.**平均每次插入时的移位操作次数**）计算经验成本，再和数据节点的预期成本（节点创建时预期的成本）比较\n如果经验成本与预期成本没有较大的偏离（超过50%）则执行节点扩展（不会超过节点最大大小限制），否则执行节点分裂\n- **读数据时**：ALEX使用指数查找，先用数据节点的线性模型预测一个position，再判断该position上的key是否大于或者小于待查找的key，以此判断指数查找的方向\n\n![img](../images/ALEX-An-Updatable-Adaptive-Learned-Index/1.png)\n指数查找的时间复杂度分析如下\n![img](../images/ALEX-An-Updatable-Adaptive-Learned-Index/2.png)\n并且使用指数查找算法后，也不需要在数据节点模型中存储error bound。\n\n- **读数据时**：ALEX在创建数据节点时使用基于模型的插入，先训练好模型之后，再将模型尽量插入预测的位置，这样可以大大减少预测错误的概率\n\n**ALEX的节点：**\n**Internal node：**\n线性模型（slope intercept）、point array\n**Leaf node：**\n线性模型（slope intercept）、gap array 、bitmap\n\n**查找：**\n![img](../images/ALEX-An-Updatable-Adaptive-Learned-Index/3.png)\n\n**插入：**\n**未满节点:** 按照查找逻辑找到应该插入的数据节点，有必要的情况下用指数查找来找到正确的位置。\n**已满节点：** 已满节点的定义（有一个上下限密度dl du）\n节点扩展机制：\n![img](../images/ALEX-An-Updatable-Adaptive-Learned-Index/4.png)\n节点分裂机制：\na.有冗余指针指向数据节点，可以用它分别指向另外两个数据节点\n![img](../images/ALEX-An-Updatable-Adaptive-Learned-Index/5.png)\n\nb.如果父节点满了，像B+树那样进行拆分，分类一直可以传播到根节点\n![img](../images/ALEX-An-Updatable-Adaptive-Learned-Index/6.png)\n\n**删除：**\n简单删除key和payload，如果Data Node由于删除而达到密度下限dl，那么我们将收缩Data Node避免低空间利用率（思考：是否可以引入合并操作）\n\n**更新：**\nDelete和Insert操作结合\n\n**界外插入：**\n首先，当ALEX检测到现有key空间之外的插入时，将扩展root节点；如果此扩展将导致根节点超过最大节点大小，ALEX则会创建一个新的root节点，并为新root节点的每个其他指针槽创建一个新的数据节点。\n![img](../images/ALEX-An-Updatable-Adaptive-Learned-Index/7.png)\n其次，ALEX最右边的数据节点通过记录节点中的最大键的值和插入超过该最大值的计数器来检测插入行为。如果多次插入都超过该最大值，这意味着这是一个只追加行为，因此数据节点向右扩展，扩展的空间用来更多类似于追加的插入\n\n**批量加载**\nRMI成本是通过TraverseToLeaf和intra-node cost model来计算的\n![img](../images/ALEX-An-Updatable-Adaptive-Learned-Index/8.png) \n![img](../images/ALEX-An-Updatable-Adaptive-Learned-Index/9.png)\n每个node为internal node或者leaf node由fanout tree决定，\n决定每一个node的类型时都独自创建一棵fanout tree\n\n\n## 结果\n数据集选取：\n使用某个数据集的8字节的key运行所有的实验，并随机生成固定大小的payload。\n我们在4个数据集上评估了ALEX，其特征和CDF如下所示\n经度数据集由Open Street Maps中世界各地的经度组成\nLonglat数据集由复合键组成（k=180*floor(longitude)+latitude, 经纬度也是来自Open Street Maps)\nLognormal数据集的值是根据对数正态分布N（0，4）生成的，并乘上10^9，再四舍五入到最接近的整数。\nYCSB数据集表示根据YCSB基准生成的用户ID的值，这些值均匀分布在整个64位域中，并使用80字节的有效载荷\n![img](../images/ALEX-An-Updatable-Adaptive-Learned-Index/10.png)\n工作负载：我们评估ALEX的主要指标是平均吞吐量（指定时间内完成的插入或读取量），评估了5个工作负载的吞吐量\n（1）只读工作负载 （2）具有95%的读取和5%插入的读取繁重的工作负载（3）具有50%的读取和50%的插入的写繁重的工作负载（4）具有95%读取和5%插入的读取的短范围查询的工作负载（5）只写工作负载\n![img](../images/ALEX-An-Updatable-Adaptive-Learned-Index/11.png)\nALEX和learned Index；B+ Tree；模型增强B+ Tree；ART对比\n- 在只读工作负载上，ALEX比B+树、learned index、模型增强B+树和ART在吞吐量上高4.1x、2.2x、2.9x、3.0x和在索引大小上小800x、15x、160x、8000x\n- 在读写工作负载上，ALEX比B+树、模型增强B+树和ART在吞吐量上高4.0x、2.7x、2.7x，\n在索引大小上小2000x、475x、36000x\n","source":"_posts/ALEX-An-Updatable-Adaptive-Learned-Index.md","raw":"---\ntitle: ALEX-An-Updatable-Adaptive-Learned-Index\ndate: 2023-10-01 21:47:41\ntags: Learned Index\ncategories: Learned Index\n---\n\n\nALEX：An Updatable Adaptive Learned Index\n\n## 应用场景：\n在DBMS中代替传统的索引结构，类似于B树、B+树之类的变种\n\n## 问题描述：\nALEX索引需要实现点查找、范围查询、插入、删除和批量载入\nALEX的目标是\n1.比B+树写数据更快\n2.比B+树和learned index读数据要更快\n3.索引大小要比B+树和learned Index要小\n\n## 难点与分析过程：\n- 写数据时：B+树插入到数据节点时需要进行大量的移位操作，对于一个dense Array 它的插入时间复杂度为O(n)\n- 写数据时：B+树插入到数据节点时，根据节点是否已满的条件来将数据节点分裂，分裂到根节点会导致树高的增加\n- 读数据时：B+树遍历到数据节点后，使用二分查找确定带查找的key的position，它的时间复杂度为O（log2n)\n- 读数据时：最初的Learned Index是先将数据排序好之后，再在该数据上创建模型，这样用最后的数据节点来预测key的位置时会有较大出错的概率，并且还需要存储Error Bound\n\n## 方法：\n- **写数据时**：ALEX使用一个gap array（间隙数组），这样在插入过程中需要更少的移位操作，它的时间复杂度近似于O（log2n）\n- **写数据时**：插入已满数据节点时，使用一个intra-node cost model模型来决定将数据节点扩展（如果没有）或者是分裂\nIntra-node cost model根据每个数据节点存储的两个信息（1.**平均每次操作指数搜索的迭代次数** 2.**平均每次插入时的移位操作次数**）计算经验成本，再和数据节点的预期成本（节点创建时预期的成本）比较\n如果经验成本与预期成本没有较大的偏离（超过50%）则执行节点扩展（不会超过节点最大大小限制），否则执行节点分裂\n- **读数据时**：ALEX使用指数查找，先用数据节点的线性模型预测一个position，再判断该position上的key是否大于或者小于待查找的key，以此判断指数查找的方向\n\n![img](../images/ALEX-An-Updatable-Adaptive-Learned-Index/1.png)\n指数查找的时间复杂度分析如下\n![img](../images/ALEX-An-Updatable-Adaptive-Learned-Index/2.png)\n并且使用指数查找算法后，也不需要在数据节点模型中存储error bound。\n\n- **读数据时**：ALEX在创建数据节点时使用基于模型的插入，先训练好模型之后，再将模型尽量插入预测的位置，这样可以大大减少预测错误的概率\n\n**ALEX的节点：**\n**Internal node：**\n线性模型（slope intercept）、point array\n**Leaf node：**\n线性模型（slope intercept）、gap array 、bitmap\n\n**查找：**\n![img](../images/ALEX-An-Updatable-Adaptive-Learned-Index/3.png)\n\n**插入：**\n**未满节点:** 按照查找逻辑找到应该插入的数据节点，有必要的情况下用指数查找来找到正确的位置。\n**已满节点：** 已满节点的定义（有一个上下限密度dl du）\n节点扩展机制：\n![img](../images/ALEX-An-Updatable-Adaptive-Learned-Index/4.png)\n节点分裂机制：\na.有冗余指针指向数据节点，可以用它分别指向另外两个数据节点\n![img](../images/ALEX-An-Updatable-Adaptive-Learned-Index/5.png)\n\nb.如果父节点满了，像B+树那样进行拆分，分类一直可以传播到根节点\n![img](../images/ALEX-An-Updatable-Adaptive-Learned-Index/6.png)\n\n**删除：**\n简单删除key和payload，如果Data Node由于删除而达到密度下限dl，那么我们将收缩Data Node避免低空间利用率（思考：是否可以引入合并操作）\n\n**更新：**\nDelete和Insert操作结合\n\n**界外插入：**\n首先，当ALEX检测到现有key空间之外的插入时，将扩展root节点；如果此扩展将导致根节点超过最大节点大小，ALEX则会创建一个新的root节点，并为新root节点的每个其他指针槽创建一个新的数据节点。\n![img](../images/ALEX-An-Updatable-Adaptive-Learned-Index/7.png)\n其次，ALEX最右边的数据节点通过记录节点中的最大键的值和插入超过该最大值的计数器来检测插入行为。如果多次插入都超过该最大值，这意味着这是一个只追加行为，因此数据节点向右扩展，扩展的空间用来更多类似于追加的插入\n\n**批量加载**\nRMI成本是通过TraverseToLeaf和intra-node cost model来计算的\n![img](../images/ALEX-An-Updatable-Adaptive-Learned-Index/8.png) \n![img](../images/ALEX-An-Updatable-Adaptive-Learned-Index/9.png)\n每个node为internal node或者leaf node由fanout tree决定，\n决定每一个node的类型时都独自创建一棵fanout tree\n\n\n## 结果\n数据集选取：\n使用某个数据集的8字节的key运行所有的实验，并随机生成固定大小的payload。\n我们在4个数据集上评估了ALEX，其特征和CDF如下所示\n经度数据集由Open Street Maps中世界各地的经度组成\nLonglat数据集由复合键组成（k=180*floor(longitude)+latitude, 经纬度也是来自Open Street Maps)\nLognormal数据集的值是根据对数正态分布N（0，4）生成的，并乘上10^9，再四舍五入到最接近的整数。\nYCSB数据集表示根据YCSB基准生成的用户ID的值，这些值均匀分布在整个64位域中，并使用80字节的有效载荷\n![img](../images/ALEX-An-Updatable-Adaptive-Learned-Index/10.png)\n工作负载：我们评估ALEX的主要指标是平均吞吐量（指定时间内完成的插入或读取量），评估了5个工作负载的吞吐量\n（1）只读工作负载 （2）具有95%的读取和5%插入的读取繁重的工作负载（3）具有50%的读取和50%的插入的写繁重的工作负载（4）具有95%读取和5%插入的读取的短范围查询的工作负载（5）只写工作负载\n![img](../images/ALEX-An-Updatable-Adaptive-Learned-Index/11.png)\nALEX和learned Index；B+ Tree；模型增强B+ Tree；ART对比\n- 在只读工作负载上，ALEX比B+树、learned index、模型增强B+树和ART在吞吐量上高4.1x、2.2x、2.9x、3.0x和在索引大小上小800x、15x、160x、8000x\n- 在读写工作负载上，ALEX比B+树、模型增强B+树和ART在吞吐量上高4.0x、2.7x、2.7x，\n在索引大小上小2000x、475x、36000x\n","slug":"ALEX-An-Updatable-Adaptive-Learned-Index","published":1,"updated":"2024-02-26T07:45:34.714Z","_id":"cln88vsea0000zqi5g90x41r0","comments":1,"layout":"post","photos":[],"link":"","content":"<p>ALEX：An Updatable Adaptive Learned Index</p>\n<h2 id=\"应用场景：\"><a href=\"#应用场景：\" class=\"headerlink\" title=\"应用场景：\"></a>应用场景：</h2><p>在DBMS中代替传统的索引结构，类似于B树、B+树之类的变种</p>\n<h2 id=\"问题描述：\"><a href=\"#问题描述：\" class=\"headerlink\" title=\"问题描述：\"></a>问题描述：</h2><p>ALEX索引需要实现点查找、范围查询、插入、删除和批量载入<br>ALEX的目标是<br>1.比B+树写数据更快<br>2.比B+树和learned index读数据要更快<br>3.索引大小要比B+树和learned Index要小</p>\n<h2 id=\"难点与分析过程：\"><a href=\"#难点与分析过程：\" class=\"headerlink\" title=\"难点与分析过程：\"></a>难点与分析过程：</h2><ul>\n<li>写数据时：B+树插入到数据节点时需要进行大量的移位操作，对于一个dense Array 它的插入时间复杂度为O(n)</li>\n<li>写数据时：B+树插入到数据节点时，根据节点是否已满的条件来将数据节点分裂，分裂到根节点会导致树高的增加</li>\n<li>读数据时：B+树遍历到数据节点后，使用二分查找确定带查找的key的position，它的时间复杂度为O（log2n)</li>\n<li>读数据时：最初的Learned Index是先将数据排序好之后，再在该数据上创建模型，这样用最后的数据节点来预测key的位置时会有较大出错的概率，并且还需要存储Error Bound</li>\n</ul>\n<h2 id=\"方法：\"><a href=\"#方法：\" class=\"headerlink\" title=\"方法：\"></a>方法：</h2><ul>\n<li><strong>写数据时</strong>：ALEX使用一个gap array（间隙数组），这样在插入过程中需要更少的移位操作，它的时间复杂度近似于O（log2n）</li>\n<li><strong>写数据时</strong>：插入已满数据节点时，使用一个intra-node cost model模型来决定将数据节点扩展（如果没有）或者是分裂<br>Intra-node cost model根据每个数据节点存储的两个信息（1.<strong>平均每次操作指数搜索的迭代次数</strong> 2.<strong>平均每次插入时的移位操作次数</strong>）计算经验成本，再和数据节点的预期成本（节点创建时预期的成本）比较<br>如果经验成本与预期成本没有较大的偏离（超过50%）则执行节点扩展（不会超过节点最大大小限制），否则执行节点分裂</li>\n<li><strong>读数据时</strong>：ALEX使用指数查找，先用数据节点的线性模型预测一个position，再判断该position上的key是否大于或者小于待查找的key，以此判断指数查找的方向</li>\n</ul>\n<p><img src=\"/../images/ALEX-An-Updatable-Adaptive-Learned-Index/1.png\" alt=\"img\"><br>指数查找的时间复杂度分析如下<br><img src=\"/../images/ALEX-An-Updatable-Adaptive-Learned-Index/2.png\" alt=\"img\"><br>并且使用指数查找算法后，也不需要在数据节点模型中存储error bound。</p>\n<ul>\n<li><strong>读数据时</strong>：ALEX在创建数据节点时使用基于模型的插入，先训练好模型之后，再将模型尽量插入预测的位置，这样可以大大减少预测错误的概率</li>\n</ul>\n<p><strong>ALEX的节点：</strong><br><strong>Internal node：</strong><br>线性模型（slope intercept）、point array<br><strong>Leaf node：</strong><br>线性模型（slope intercept）、gap array 、bitmap</p>\n<p><strong>查找：</strong><br><img src=\"/../images/ALEX-An-Updatable-Adaptive-Learned-Index/3.png\" alt=\"img\"></p>\n<p><strong>插入：</strong><br><strong>未满节点:</strong> 按照查找逻辑找到应该插入的数据节点，有必要的情况下用指数查找来找到正确的位置。<br><strong>已满节点：</strong> 已满节点的定义（有一个上下限密度dl du）<br>节点扩展机制：<br><img src=\"/../images/ALEX-An-Updatable-Adaptive-Learned-Index/4.png\" alt=\"img\"><br>节点分裂机制：<br>a.有冗余指针指向数据节点，可以用它分别指向另外两个数据节点<br><img src=\"/../images/ALEX-An-Updatable-Adaptive-Learned-Index/5.png\" alt=\"img\"></p>\n<p>b.如果父节点满了，像B+树那样进行拆分，分类一直可以传播到根节点<br><img src=\"/../images/ALEX-An-Updatable-Adaptive-Learned-Index/6.png\" alt=\"img\"></p>\n<p><strong>删除：</strong><br>简单删除key和payload，如果Data Node由于删除而达到密度下限dl，那么我们将收缩Data Node避免低空间利用率（思考：是否可以引入合并操作）</p>\n<p><strong>更新：</strong><br>Delete和Insert操作结合</p>\n<p><strong>界外插入：</strong><br>首先，当ALEX检测到现有key空间之外的插入时，将扩展root节点；如果此扩展将导致根节点超过最大节点大小，ALEX则会创建一个新的root节点，并为新root节点的每个其他指针槽创建一个新的数据节点。<br><img src=\"/../images/ALEX-An-Updatable-Adaptive-Learned-Index/7.png\" alt=\"img\"><br>其次，ALEX最右边的数据节点通过记录节点中的最大键的值和插入超过该最大值的计数器来检测插入行为。如果多次插入都超过该最大值，这意味着这是一个只追加行为，因此数据节点向右扩展，扩展的空间用来更多类似于追加的插入</p>\n<p><strong>批量加载</strong><br>RMI成本是通过TraverseToLeaf和intra-node cost model来计算的<br><img src=\"/../images/ALEX-An-Updatable-Adaptive-Learned-Index/8.png\" alt=\"img\"><br><img src=\"/../images/ALEX-An-Updatable-Adaptive-Learned-Index/9.png\" alt=\"img\"><br>每个node为internal node或者leaf node由fanout tree决定，<br>决定每一个node的类型时都独自创建一棵fanout tree</p>\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><p>数据集选取：<br>使用某个数据集的8字节的key运行所有的实验，并随机生成固定大小的payload。<br>我们在4个数据集上评估了ALEX，其特征和CDF如下所示<br>经度数据集由Open Street Maps中世界各地的经度组成<br>Longlat数据集由复合键组成（k&#x3D;180*floor(longitude)+latitude, 经纬度也是来自Open Street Maps)<br>Lognormal数据集的值是根据对数正态分布N（0，4）生成的，并乘上10^9，再四舍五入到最接近的整数。<br>YCSB数据集表示根据YCSB基准生成的用户ID的值，这些值均匀分布在整个64位域中，并使用80字节的有效载荷<br><img src=\"/../images/ALEX-An-Updatable-Adaptive-Learned-Index/10.png\" alt=\"img\"><br>工作负载：我们评估ALEX的主要指标是平均吞吐量（指定时间内完成的插入或读取量），评估了5个工作负载的吞吐量<br>（1）只读工作负载 （2）具有95%的读取和5%插入的读取繁重的工作负载（3）具有50%的读取和50%的插入的写繁重的工作负载（4）具有95%读取和5%插入的读取的短范围查询的工作负载（5）只写工作负载<br><img src=\"/../images/ALEX-An-Updatable-Adaptive-Learned-Index/11.png\" alt=\"img\"><br>ALEX和learned Index；B+ Tree；模型增强B+ Tree；ART对比</p>\n<ul>\n<li>在只读工作负载上，ALEX比B+树、learned index、模型增强B+树和ART在吞吐量上高4.1x、2.2x、2.9x、3.0x和在索引大小上小800x、15x、160x、8000x</li>\n<li>在读写工作负载上，ALEX比B+树、模型增强B+树和ART在吞吐量上高4.0x、2.7x、2.7x，<br>在索引大小上小2000x、475x、36000x</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>ALEX：An Updatable Adaptive Learned Index</p>\n<h2 id=\"应用场景：\"><a href=\"#应用场景：\" class=\"headerlink\" title=\"应用场景：\"></a>应用场景：</h2><p>在DBMS中代替传统的索引结构，类似于B树、B+树之类的变种</p>\n<h2 id=\"问题描述：\"><a href=\"#问题描述：\" class=\"headerlink\" title=\"问题描述：\"></a>问题描述：</h2><p>ALEX索引需要实现点查找、范围查询、插入、删除和批量载入<br>ALEX的目标是<br>1.比B+树写数据更快<br>2.比B+树和learned index读数据要更快<br>3.索引大小要比B+树和learned Index要小</p>\n<h2 id=\"难点与分析过程：\"><a href=\"#难点与分析过程：\" class=\"headerlink\" title=\"难点与分析过程：\"></a>难点与分析过程：</h2><ul>\n<li>写数据时：B+树插入到数据节点时需要进行大量的移位操作，对于一个dense Array 它的插入时间复杂度为O(n)</li>\n<li>写数据时：B+树插入到数据节点时，根据节点是否已满的条件来将数据节点分裂，分裂到根节点会导致树高的增加</li>\n<li>读数据时：B+树遍历到数据节点后，使用二分查找确定带查找的key的position，它的时间复杂度为O（log2n)</li>\n<li>读数据时：最初的Learned Index是先将数据排序好之后，再在该数据上创建模型，这样用最后的数据节点来预测key的位置时会有较大出错的概率，并且还需要存储Error Bound</li>\n</ul>\n<h2 id=\"方法：\"><a href=\"#方法：\" class=\"headerlink\" title=\"方法：\"></a>方法：</h2><ul>\n<li><strong>写数据时</strong>：ALEX使用一个gap array（间隙数组），这样在插入过程中需要更少的移位操作，它的时间复杂度近似于O（log2n）</li>\n<li><strong>写数据时</strong>：插入已满数据节点时，使用一个intra-node cost model模型来决定将数据节点扩展（如果没有）或者是分裂<br>Intra-node cost model根据每个数据节点存储的两个信息（1.<strong>平均每次操作指数搜索的迭代次数</strong> 2.<strong>平均每次插入时的移位操作次数</strong>）计算经验成本，再和数据节点的预期成本（节点创建时预期的成本）比较<br>如果经验成本与预期成本没有较大的偏离（超过50%）则执行节点扩展（不会超过节点最大大小限制），否则执行节点分裂</li>\n<li><strong>读数据时</strong>：ALEX使用指数查找，先用数据节点的线性模型预测一个position，再判断该position上的key是否大于或者小于待查找的key，以此判断指数查找的方向</li>\n</ul>\n<p><img src=\"/../images/ALEX-An-Updatable-Adaptive-Learned-Index/1.png\" alt=\"img\"><br>指数查找的时间复杂度分析如下<br><img src=\"/../images/ALEX-An-Updatable-Adaptive-Learned-Index/2.png\" alt=\"img\"><br>并且使用指数查找算法后，也不需要在数据节点模型中存储error bound。</p>\n<ul>\n<li><strong>读数据时</strong>：ALEX在创建数据节点时使用基于模型的插入，先训练好模型之后，再将模型尽量插入预测的位置，这样可以大大减少预测错误的概率</li>\n</ul>\n<p><strong>ALEX的节点：</strong><br><strong>Internal node：</strong><br>线性模型（slope intercept）、point array<br><strong>Leaf node：</strong><br>线性模型（slope intercept）、gap array 、bitmap</p>\n<p><strong>查找：</strong><br><img src=\"/../images/ALEX-An-Updatable-Adaptive-Learned-Index/3.png\" alt=\"img\"></p>\n<p><strong>插入：</strong><br><strong>未满节点:</strong> 按照查找逻辑找到应该插入的数据节点，有必要的情况下用指数查找来找到正确的位置。<br><strong>已满节点：</strong> 已满节点的定义（有一个上下限密度dl du）<br>节点扩展机制：<br><img src=\"/../images/ALEX-An-Updatable-Adaptive-Learned-Index/4.png\" alt=\"img\"><br>节点分裂机制：<br>a.有冗余指针指向数据节点，可以用它分别指向另外两个数据节点<br><img src=\"/../images/ALEX-An-Updatable-Adaptive-Learned-Index/5.png\" alt=\"img\"></p>\n<p>b.如果父节点满了，像B+树那样进行拆分，分类一直可以传播到根节点<br><img src=\"/../images/ALEX-An-Updatable-Adaptive-Learned-Index/6.png\" alt=\"img\"></p>\n<p><strong>删除：</strong><br>简单删除key和payload，如果Data Node由于删除而达到密度下限dl，那么我们将收缩Data Node避免低空间利用率（思考：是否可以引入合并操作）</p>\n<p><strong>更新：</strong><br>Delete和Insert操作结合</p>\n<p><strong>界外插入：</strong><br>首先，当ALEX检测到现有key空间之外的插入时，将扩展root节点；如果此扩展将导致根节点超过最大节点大小，ALEX则会创建一个新的root节点，并为新root节点的每个其他指针槽创建一个新的数据节点。<br><img src=\"/../images/ALEX-An-Updatable-Adaptive-Learned-Index/7.png\" alt=\"img\"><br>其次，ALEX最右边的数据节点通过记录节点中的最大键的值和插入超过该最大值的计数器来检测插入行为。如果多次插入都超过该最大值，这意味着这是一个只追加行为，因此数据节点向右扩展，扩展的空间用来更多类似于追加的插入</p>\n<p><strong>批量加载</strong><br>RMI成本是通过TraverseToLeaf和intra-node cost model来计算的<br><img src=\"/../images/ALEX-An-Updatable-Adaptive-Learned-Index/8.png\" alt=\"img\"><br><img src=\"/../images/ALEX-An-Updatable-Adaptive-Learned-Index/9.png\" alt=\"img\"><br>每个node为internal node或者leaf node由fanout tree决定，<br>决定每一个node的类型时都独自创建一棵fanout tree</p>\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><p>数据集选取：<br>使用某个数据集的8字节的key运行所有的实验，并随机生成固定大小的payload。<br>我们在4个数据集上评估了ALEX，其特征和CDF如下所示<br>经度数据集由Open Street Maps中世界各地的经度组成<br>Longlat数据集由复合键组成（k&#x3D;180*floor(longitude)+latitude, 经纬度也是来自Open Street Maps)<br>Lognormal数据集的值是根据对数正态分布N（0，4）生成的，并乘上10^9，再四舍五入到最接近的整数。<br>YCSB数据集表示根据YCSB基准生成的用户ID的值，这些值均匀分布在整个64位域中，并使用80字节的有效载荷<br><img src=\"/../images/ALEX-An-Updatable-Adaptive-Learned-Index/10.png\" alt=\"img\"><br>工作负载：我们评估ALEX的主要指标是平均吞吐量（指定时间内完成的插入或读取量），评估了5个工作负载的吞吐量<br>（1）只读工作负载 （2）具有95%的读取和5%插入的读取繁重的工作负载（3）具有50%的读取和50%的插入的写繁重的工作负载（4）具有95%读取和5%插入的读取的短范围查询的工作负载（5）只写工作负载<br><img src=\"/../images/ALEX-An-Updatable-Adaptive-Learned-Index/11.png\" alt=\"img\"><br>ALEX和learned Index；B+ Tree；模型增强B+ Tree；ART对比</p>\n<ul>\n<li>在只读工作负载上，ALEX比B+树、learned index、模型增强B+树和ART在吞吐量上高4.1x、2.2x、2.9x、3.0x和在索引大小上小800x、15x、160x、8000x</li>\n<li>在读写工作负载上，ALEX比B+树、模型增强B+树和ART在吞吐量上高4.0x、2.7x、2.7x，<br>在索引大小上小2000x、475x、36000x</li>\n</ul>\n"},{"title":"RadixSpline-A-Single-Pass-Learned-Index","date":"2023-10-03T05:30:05.000Z","_content":"\n## RadixSpline\n\n### 组成部分\n>1. a set of spline points\n> 2. a radix table\n\n### 构建\n> 1. Build Spline\n>> 首先建立一个Spline Model S\n>> S(ki) = pi +/- e  \n>> (ki, pi)为要查找的key和真实的position e为error\n模型的计算如下，其中(kleft,pleft)和(kright, pright)为两个spline point\n![img](../images/RadixSpline-A-Single-Pass-Learned-Index/1.png)\n\n> 2.Build Radix Tablle\n>> **作用：** 用于所定查找key的附近的两个spline point\n>> ![img](../images/RadixSpline-A-Single-Pass-Learned-Index/2.png)\n>> **过程：** 确定使用的key的prefix的长度r，分配2^r长度的数组，遍历所有的spline points，碰到新的prefix，就插入该数组 ","source":"_posts/RadixSpline-A-Single-Pass-Learned-Index.md","raw":"---\ntitle: RadixSpline-A-Single-Pass-Learned-Index\ndate: 2023-10-03 01:30:05\ntags: Learned Index\ncategories: Learned Index\n---\n\n## RadixSpline\n\n### 组成部分\n>1. a set of spline points\n> 2. a radix table\n\n### 构建\n> 1. Build Spline\n>> 首先建立一个Spline Model S\n>> S(ki) = pi +/- e  \n>> (ki, pi)为要查找的key和真实的position e为error\n模型的计算如下，其中(kleft,pleft)和(kright, pright)为两个spline point\n![img](../images/RadixSpline-A-Single-Pass-Learned-Index/1.png)\n\n> 2.Build Radix Tablle\n>> **作用：** 用于所定查找key的附近的两个spline point\n>> ![img](../images/RadixSpline-A-Single-Pass-Learned-Index/2.png)\n>> **过程：** 确定使用的key的prefix的长度r，分配2^r长度的数组，遍历所有的spline points，碰到新的prefix，就插入该数组 ","slug":"RadixSpline-A-Single-Pass-Learned-Index","published":1,"updated":"2023-10-03T06:00:05.340Z","_id":"cln9wo74900006qi5cz6z45gx","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"RadixSpline\"><a href=\"#RadixSpline\" class=\"headerlink\" title=\"RadixSpline\"></a>RadixSpline</h2><h3 id=\"组成部分\"><a href=\"#组成部分\" class=\"headerlink\" title=\"组成部分\"></a>组成部分</h3><blockquote>\n<ol>\n<li>a set of spline points</li>\n<li>a radix table</li>\n</ol>\n</blockquote>\n<h3 id=\"构建\"><a href=\"#构建\" class=\"headerlink\" title=\"构建\"></a>构建</h3><blockquote>\n<ol>\n<li>Build Spline<blockquote>\n<p>首先建立一个Spline Model S<br>S(ki) &#x3D; pi +&#x2F;- e<br>(ki, pi)为要查找的key和真实的position e为error<br>模型的计算如下，其中(kleft,pleft)和(kright, pright)为两个spline point<br><img src=\"/../images/RadixSpline-A-Single-Pass-Learned-Index/1.png\" alt=\"img\"></p>\n</blockquote>\n</li>\n</ol>\n</blockquote>\n<blockquote>\n<p>2.Build Radix Tablle</p>\n<blockquote>\n<p><strong>作用：</strong> 用于所定查找key的附近的两个spline point<br><img src=\"/../images/RadixSpline-A-Single-Pass-Learned-Index/2.png\" alt=\"img\"><br><strong>过程：</strong> 确定使用的key的prefix的长度r，分配2^r长度的数组，遍历所有的spline points，碰到新的prefix，就插入该数组 </p>\n</blockquote>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"RadixSpline\"><a href=\"#RadixSpline\" class=\"headerlink\" title=\"RadixSpline\"></a>RadixSpline</h2><h3 id=\"组成部分\"><a href=\"#组成部分\" class=\"headerlink\" title=\"组成部分\"></a>组成部分</h3><blockquote>\n<ol>\n<li>a set of spline points</li>\n<li>a radix table</li>\n</ol>\n</blockquote>\n<h3 id=\"构建\"><a href=\"#构建\" class=\"headerlink\" title=\"构建\"></a>构建</h3><blockquote>\n<ol>\n<li>Build Spline<blockquote>\n<p>首先建立一个Spline Model S<br>S(ki) &#x3D; pi +&#x2F;- e<br>(ki, pi)为要查找的key和真实的position e为error<br>模型的计算如下，其中(kleft,pleft)和(kright, pright)为两个spline point<br><img src=\"/../images/RadixSpline-A-Single-Pass-Learned-Index/1.png\" alt=\"img\"></p>\n</blockquote>\n</li>\n</ol>\n</blockquote>\n<blockquote>\n<p>2.Build Radix Tablle</p>\n<blockquote>\n<p><strong>作用：</strong> 用于所定查找key的附近的两个spline point<br><img src=\"/../images/RadixSpline-A-Single-Pass-Learned-Index/2.png\" alt=\"img\"><br><strong>过程：</strong> 确定使用的key的prefix的长度r，分配2^r长度的数组，遍历所有的spline points，碰到新的prefix，就插入该数组 </p>\n</blockquote>\n</blockquote>\n"},{"title":"Bounding-the-Last-Mile-Efficient-Learned-String-Indexing","date":"2023-10-10T10:47:58.000Z","_content":"\n## INTRODUCTION\nReadOnly\n对字符串的学习索引最重要的问题是 last-mile-search,并且这种搜索在字符串场景中特别昂贵。\n\n两个原因\n> 1. 由于难以建模真实世界的数据（许多真实世界的数据集具有很长的共同前缀以及每个字节相对较低的鉴别内容，CDF似乎是循序渐近的，这样传统的学习模型很难准确捕获和预测），这些场景的平均模型误差往往很高\n> 2. 最后一英里的搜索是很慢的，每次比较是昂贵的，字符串的大尺寸减少了适合在缓存中的键的数量\n\n这项研究的基础： Bounded Error（这样就可以使用二分查找代替指数搜索）\n\n## SPLING STRINGS\n问题描述：对于字符串而言，需要满足两种操作\n1. 确定性查找，找到完全匹配的字符\n2. 模糊匹配，找到第一个满足匹配条件的元素（下届）\n\n### RADIX STRING SPLINE\nRSS是一棵树，每个节点包含三个部分：\n![img](../imgaes/../images/Bounding-the-Last-Mile-Efficient-Learned-String-Indexing/2.png)\n- bounds: 可操作的数据下标范围\n- 重定向map(指针):包含并指向了一些key，这些key因为不满足当前节点的error bound，因而被分配到了其他节点\n- 一个使用K个byte作为前缀，错误范围为E的RadixSpline模型\n\n#### 如何构建？\n1. 首先，对数据集中所有字符串构建一个RadixSpline(使用前k个字节)。然后，遍历所有唯一的k字节前缀，并检查估计的位置是否在前缀的第一次出现和最后一次出现时都在规定的误差范围内。\n2. 对于每个测试失败的前缀，我们将其添加到重定向表中，并在有问题前缀的所有字符串中构建一个新的RSS，从字节k开始而不是0\n3. 这个过程递归地继续进行，直到每个key都得到满足为止。\n\n#### 如何查询\n\n![img](../images/Bounding-the-Last-Mile-Efficient-Learned-String-Indexing/1.png)\n首先提取字符串的前k个字节，然后对重定向器进行二分查找，如果找到重定向新的RSS节点，就重新开始对下一个k字节进行操作；如果没有找到，那么就在当前节点使用适当的字符串前缀查找并返回结果。\n\n## HASH CORRECTOR\n待更新","source":"_posts/Bounding-the-Last-Mile-Efficient-Learned-String-Indexing.md","raw":"---\ntitle: Bounding-the-Last-Mile-Efficient-Learned-String-Indexing\ndate: 2023-10-10 03:47:58\ntags: Learned Index\ncategories: Learned Index\n---\n\n## INTRODUCTION\nReadOnly\n对字符串的学习索引最重要的问题是 last-mile-search,并且这种搜索在字符串场景中特别昂贵。\n\n两个原因\n> 1. 由于难以建模真实世界的数据（许多真实世界的数据集具有很长的共同前缀以及每个字节相对较低的鉴别内容，CDF似乎是循序渐近的，这样传统的学习模型很难准确捕获和预测），这些场景的平均模型误差往往很高\n> 2. 最后一英里的搜索是很慢的，每次比较是昂贵的，字符串的大尺寸减少了适合在缓存中的键的数量\n\n这项研究的基础： Bounded Error（这样就可以使用二分查找代替指数搜索）\n\n## SPLING STRINGS\n问题描述：对于字符串而言，需要满足两种操作\n1. 确定性查找，找到完全匹配的字符\n2. 模糊匹配，找到第一个满足匹配条件的元素（下届）\n\n### RADIX STRING SPLINE\nRSS是一棵树，每个节点包含三个部分：\n![img](../imgaes/../images/Bounding-the-Last-Mile-Efficient-Learned-String-Indexing/2.png)\n- bounds: 可操作的数据下标范围\n- 重定向map(指针):包含并指向了一些key，这些key因为不满足当前节点的error bound，因而被分配到了其他节点\n- 一个使用K个byte作为前缀，错误范围为E的RadixSpline模型\n\n#### 如何构建？\n1. 首先，对数据集中所有字符串构建一个RadixSpline(使用前k个字节)。然后，遍历所有唯一的k字节前缀，并检查估计的位置是否在前缀的第一次出现和最后一次出现时都在规定的误差范围内。\n2. 对于每个测试失败的前缀，我们将其添加到重定向表中，并在有问题前缀的所有字符串中构建一个新的RSS，从字节k开始而不是0\n3. 这个过程递归地继续进行，直到每个key都得到满足为止。\n\n#### 如何查询\n\n![img](../images/Bounding-the-Last-Mile-Efficient-Learned-String-Indexing/1.png)\n首先提取字符串的前k个字节，然后对重定向器进行二分查找，如果找到重定向新的RSS节点，就重新开始对下一个k字节进行操作；如果没有找到，那么就在当前节点使用适当的字符串前缀查找并返回结果。\n\n## HASH CORRECTOR\n待更新","slug":"Bounding-the-Last-Mile-Efficient-Learned-String-Indexing","published":1,"updated":"2024-02-26T07:45:34.714Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt2vlxyc00004ijx7d5nb9h8","content":"<h2 id=\"INTRODUCTION\"><a href=\"#INTRODUCTION\" class=\"headerlink\" title=\"INTRODUCTION\"></a>INTRODUCTION</h2><p>ReadOnly<br>对字符串的学习索引最重要的问题是 last-mile-search,并且这种搜索在字符串场景中特别昂贵。</p>\n<p>两个原因</p>\n<blockquote>\n<ol>\n<li>由于难以建模真实世界的数据（许多真实世界的数据集具有很长的共同前缀以及每个字节相对较低的鉴别内容，CDF似乎是循序渐近的，这样传统的学习模型很难准确捕获和预测），这些场景的平均模型误差往往很高</li>\n<li>最后一英里的搜索是很慢的，每次比较是昂贵的，字符串的大尺寸减少了适合在缓存中的键的数量</li>\n</ol>\n</blockquote>\n<p>这项研究的基础： Bounded Error（这样就可以使用二分查找代替指数搜索）</p>\n<h2 id=\"SPLING-STRINGS\"><a href=\"#SPLING-STRINGS\" class=\"headerlink\" title=\"SPLING STRINGS\"></a>SPLING STRINGS</h2><p>问题描述：对于字符串而言，需要满足两种操作</p>\n<ol>\n<li>确定性查找，找到完全匹配的字符</li>\n<li>模糊匹配，找到第一个满足匹配条件的元素（下届）</li>\n</ol>\n<h3 id=\"RADIX-STRING-SPLINE\"><a href=\"#RADIX-STRING-SPLINE\" class=\"headerlink\" title=\"RADIX STRING SPLINE\"></a>RADIX STRING SPLINE</h3><p>RSS是一棵树，每个节点包含三个部分：<br><img src=\"/../imgaes/../images/Bounding-the-Last-Mile-Efficient-Learned-String-Indexing/2.png\" alt=\"img\"></p>\n<ul>\n<li>bounds: 可操作的数据下标范围</li>\n<li>重定向map(指针):包含并指向了一些key，这些key因为不满足当前节点的error bound，因而被分配到了其他节点</li>\n<li>一个使用K个byte作为前缀，错误范围为E的RadixSpline模型</li>\n</ul>\n<h4 id=\"如何构建？\"><a href=\"#如何构建？\" class=\"headerlink\" title=\"如何构建？\"></a>如何构建？</h4><ol>\n<li>首先，对数据集中所有字符串构建一个RadixSpline(使用前k个字节)。然后，遍历所有唯一的k字节前缀，并检查估计的位置是否在前缀的第一次出现和最后一次出现时都在规定的误差范围内。</li>\n<li>对于每个测试失败的前缀，我们将其添加到重定向表中，并在有问题前缀的所有字符串中构建一个新的RSS，从字节k开始而不是0</li>\n<li>这个过程递归地继续进行，直到每个key都得到满足为止。</li>\n</ol>\n<h4 id=\"如何查询\"><a href=\"#如何查询\" class=\"headerlink\" title=\"如何查询\"></a>如何查询</h4><p><img src=\"/../images/Bounding-the-Last-Mile-Efficient-Learned-String-Indexing/1.png\" alt=\"img\"><br>首先提取字符串的前k个字节，然后对重定向器进行二分查找，如果找到重定向新的RSS节点，就重新开始对下一个k字节进行操作；如果没有找到，那么就在当前节点使用适当的字符串前缀查找并返回结果。</p>\n<h2 id=\"HASH-CORRECTOR\"><a href=\"#HASH-CORRECTOR\" class=\"headerlink\" title=\"HASH CORRECTOR\"></a>HASH CORRECTOR</h2><p>待更新</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"INTRODUCTION\"><a href=\"#INTRODUCTION\" class=\"headerlink\" title=\"INTRODUCTION\"></a>INTRODUCTION</h2><p>ReadOnly<br>对字符串的学习索引最重要的问题是 last-mile-search,并且这种搜索在字符串场景中特别昂贵。</p>\n<p>两个原因</p>\n<blockquote>\n<ol>\n<li>由于难以建模真实世界的数据（许多真实世界的数据集具有很长的共同前缀以及每个字节相对较低的鉴别内容，CDF似乎是循序渐近的，这样传统的学习模型很难准确捕获和预测），这些场景的平均模型误差往往很高</li>\n<li>最后一英里的搜索是很慢的，每次比较是昂贵的，字符串的大尺寸减少了适合在缓存中的键的数量</li>\n</ol>\n</blockquote>\n<p>这项研究的基础： Bounded Error（这样就可以使用二分查找代替指数搜索）</p>\n<h2 id=\"SPLING-STRINGS\"><a href=\"#SPLING-STRINGS\" class=\"headerlink\" title=\"SPLING STRINGS\"></a>SPLING STRINGS</h2><p>问题描述：对于字符串而言，需要满足两种操作</p>\n<ol>\n<li>确定性查找，找到完全匹配的字符</li>\n<li>模糊匹配，找到第一个满足匹配条件的元素（下届）</li>\n</ol>\n<h3 id=\"RADIX-STRING-SPLINE\"><a href=\"#RADIX-STRING-SPLINE\" class=\"headerlink\" title=\"RADIX STRING SPLINE\"></a>RADIX STRING SPLINE</h3><p>RSS是一棵树，每个节点包含三个部分：<br><img src=\"/../imgaes/../images/Bounding-the-Last-Mile-Efficient-Learned-String-Indexing/2.png\" alt=\"img\"></p>\n<ul>\n<li>bounds: 可操作的数据下标范围</li>\n<li>重定向map(指针):包含并指向了一些key，这些key因为不满足当前节点的error bound，因而被分配到了其他节点</li>\n<li>一个使用K个byte作为前缀，错误范围为E的RadixSpline模型</li>\n</ul>\n<h4 id=\"如何构建？\"><a href=\"#如何构建？\" class=\"headerlink\" title=\"如何构建？\"></a>如何构建？</h4><ol>\n<li>首先，对数据集中所有字符串构建一个RadixSpline(使用前k个字节)。然后，遍历所有唯一的k字节前缀，并检查估计的位置是否在前缀的第一次出现和最后一次出现时都在规定的误差范围内。</li>\n<li>对于每个测试失败的前缀，我们将其添加到重定向表中，并在有问题前缀的所有字符串中构建一个新的RSS，从字节k开始而不是0</li>\n<li>这个过程递归地继续进行，直到每个key都得到满足为止。</li>\n</ol>\n<h4 id=\"如何查询\"><a href=\"#如何查询\" class=\"headerlink\" title=\"如何查询\"></a>如何查询</h4><p><img src=\"/../images/Bounding-the-Last-Mile-Efficient-Learned-String-Indexing/1.png\" alt=\"img\"><br>首先提取字符串的前k个字节，然后对重定向器进行二分查找，如果找到重定向新的RSS节点，就重新开始对下一个k字节进行操作；如果没有找到，那么就在当前节点使用适当的字符串前缀查找并返回结果。</p>\n<h2 id=\"HASH-CORRECTOR\"><a href=\"#HASH-CORRECTOR\" class=\"headerlink\" title=\"HASH CORRECTOR\"></a>HASH CORRECTOR</h2><p>待更新</p>\n"},{"title":"DILI-A-Distribution-Driven-Learned-Index","date":"2023-12-28T15:07:45.000Z","_content":"\n## 应用场景\n需要有一批数据用于批量加载构建初始数据，不支持从0开始构建（一个key一个key插入），支持读写操作。\n\n## 问题描述\n在一棵树中查找一个key，包含两部分；找到包含key的leaf node，leaf node的local search\n查找性能取决于leaf node的深度和线性回归模型的accuracy\n\n## 方法和结果\n提出一种two-phase bulk loading算法，先构建一棵BU（bottom-up）-Tree，它的node布局由greedy merging 算法（考虑了leaf node的深度和线性回归模型的accuracy）决定，接着根据BU-Tree的node布局构建DILI.\nBU-Tree中internal node的range并不是被它的child平分\nDILI与LIPP相比，每个leaf node的keys分布更接近线性，发生冲突的概率更低\n![img](../images/DILI-A-Distribution-Driven-Learned-Index/1.png)\n\nSearch without Optimization\n![img](../images/DILI-A-Distribution-Driven-Learned-Index/2.png)\n\nBuilding BU-Tree\n难点：确定nh的大小和nh - 1个breakpoints\n![img](../images/DILI-A-Distribution-Driven-Learned-Index/3.png)\n![img](../images/DILI-A-Distribution-Driven-Learned-Index/4.png)\n![img](../images/DILI-A-Distribution-Driven-Learned-Index/5.png)\n![img](../images/DILI-A-Distribution-Driven-Learned-Index/6.png)\n![img](../images/DILI-A-Distribution-Driven-Learned-Index/7.png)\n![img](../images/DILI-A-Distribution-Driven-Learned-Index/8.png)\n![img](../images/DILI-A-Distribution-Driven-Learned-Index/9.png)\n![img](../images/DILI-A-Distribution-Driven-Learned-Index/10.png)\n![img](../images/DILI-A-Distribution-Driven-Learned-Index/11.png)\n![img](../images/DILI-A-Distribution-Driven-Learned-Index/12.png)\n![img](../images/DILI-A-Distribution-Driven-Learned-Index/13.png)","source":"_posts/DILI-A-Distribution-Driven-Learned-Index.md","raw":"---\ntitle: DILI-A-Distribution-Driven-Learned-Index\ndate: 2023-12-28 07:07:45\ntags: Learned Index\ncategories: Learned Index\n---\n\n## 应用场景\n需要有一批数据用于批量加载构建初始数据，不支持从0开始构建（一个key一个key插入），支持读写操作。\n\n## 问题描述\n在一棵树中查找一个key，包含两部分；找到包含key的leaf node，leaf node的local search\n查找性能取决于leaf node的深度和线性回归模型的accuracy\n\n## 方法和结果\n提出一种two-phase bulk loading算法，先构建一棵BU（bottom-up）-Tree，它的node布局由greedy merging 算法（考虑了leaf node的深度和线性回归模型的accuracy）决定，接着根据BU-Tree的node布局构建DILI.\nBU-Tree中internal node的range并不是被它的child平分\nDILI与LIPP相比，每个leaf node的keys分布更接近线性，发生冲突的概率更低\n![img](../images/DILI-A-Distribution-Driven-Learned-Index/1.png)\n\nSearch without Optimization\n![img](../images/DILI-A-Distribution-Driven-Learned-Index/2.png)\n\nBuilding BU-Tree\n难点：确定nh的大小和nh - 1个breakpoints\n![img](../images/DILI-A-Distribution-Driven-Learned-Index/3.png)\n![img](../images/DILI-A-Distribution-Driven-Learned-Index/4.png)\n![img](../images/DILI-A-Distribution-Driven-Learned-Index/5.png)\n![img](../images/DILI-A-Distribution-Driven-Learned-Index/6.png)\n![img](../images/DILI-A-Distribution-Driven-Learned-Index/7.png)\n![img](../images/DILI-A-Distribution-Driven-Learned-Index/8.png)\n![img](../images/DILI-A-Distribution-Driven-Learned-Index/9.png)\n![img](../images/DILI-A-Distribution-Driven-Learned-Index/10.png)\n![img](../images/DILI-A-Distribution-Driven-Learned-Index/11.png)\n![img](../images/DILI-A-Distribution-Driven-Learned-Index/12.png)\n![img](../images/DILI-A-Distribution-Driven-Learned-Index/13.png)","slug":"DILI-A-Distribution-Driven-Learned-Index","published":1,"updated":"2024-02-26T07:45:34.714Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt2vlxyf00014ijxaplt9niw","content":"<h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><p>需要有一批数据用于批量加载构建初始数据，不支持从0开始构建（一个key一个key插入），支持读写操作。</p>\n<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>在一棵树中查找一个key，包含两部分；找到包含key的leaf node，leaf node的local search<br>查找性能取决于leaf node的深度和线性回归模型的accuracy</p>\n<h2 id=\"方法和结果\"><a href=\"#方法和结果\" class=\"headerlink\" title=\"方法和结果\"></a>方法和结果</h2><p>提出一种two-phase bulk loading算法，先构建一棵BU（bottom-up）-Tree，它的node布局由greedy merging 算法（考虑了leaf node的深度和线性回归模型的accuracy）决定，接着根据BU-Tree的node布局构建DILI.<br>BU-Tree中internal node的range并不是被它的child平分<br>DILI与LIPP相比，每个leaf node的keys分布更接近线性，发生冲突的概率更低<br><img src=\"/../images/DILI-A-Distribution-Driven-Learned-Index/1.png\" alt=\"img\"></p>\n<p>Search without Optimization<br><img src=\"/../images/DILI-A-Distribution-Driven-Learned-Index/2.png\" alt=\"img\"></p>\n<p>Building BU-Tree<br>难点：确定nh的大小和nh - 1个breakpoints<br><img src=\"/../images/DILI-A-Distribution-Driven-Learned-Index/3.png\" alt=\"img\"><br><img src=\"/../images/DILI-A-Distribution-Driven-Learned-Index/4.png\" alt=\"img\"><br><img src=\"/../images/DILI-A-Distribution-Driven-Learned-Index/5.png\" alt=\"img\"><br><img src=\"/../images/DILI-A-Distribution-Driven-Learned-Index/6.png\" alt=\"img\"><br><img src=\"/../images/DILI-A-Distribution-Driven-Learned-Index/7.png\" alt=\"img\"><br><img src=\"/../images/DILI-A-Distribution-Driven-Learned-Index/8.png\" alt=\"img\"><br><img src=\"/../images/DILI-A-Distribution-Driven-Learned-Index/9.png\" alt=\"img\"><br><img src=\"/../images/DILI-A-Distribution-Driven-Learned-Index/10.png\" alt=\"img\"><br><img src=\"/../images/DILI-A-Distribution-Driven-Learned-Index/11.png\" alt=\"img\"><br><img src=\"/../images/DILI-A-Distribution-Driven-Learned-Index/12.png\" alt=\"img\"><br><img src=\"/../images/DILI-A-Distribution-Driven-Learned-Index/13.png\" alt=\"img\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><p>需要有一批数据用于批量加载构建初始数据，不支持从0开始构建（一个key一个key插入），支持读写操作。</p>\n<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>在一棵树中查找一个key，包含两部分；找到包含key的leaf node，leaf node的local search<br>查找性能取决于leaf node的深度和线性回归模型的accuracy</p>\n<h2 id=\"方法和结果\"><a href=\"#方法和结果\" class=\"headerlink\" title=\"方法和结果\"></a>方法和结果</h2><p>提出一种two-phase bulk loading算法，先构建一棵BU（bottom-up）-Tree，它的node布局由greedy merging 算法（考虑了leaf node的深度和线性回归模型的accuracy）决定，接着根据BU-Tree的node布局构建DILI.<br>BU-Tree中internal node的range并不是被它的child平分<br>DILI与LIPP相比，每个leaf node的keys分布更接近线性，发生冲突的概率更低<br><img src=\"/../images/DILI-A-Distribution-Driven-Learned-Index/1.png\" alt=\"img\"></p>\n<p>Search without Optimization<br><img src=\"/../images/DILI-A-Distribution-Driven-Learned-Index/2.png\" alt=\"img\"></p>\n<p>Building BU-Tree<br>难点：确定nh的大小和nh - 1个breakpoints<br><img src=\"/../images/DILI-A-Distribution-Driven-Learned-Index/3.png\" alt=\"img\"><br><img src=\"/../images/DILI-A-Distribution-Driven-Learned-Index/4.png\" alt=\"img\"><br><img src=\"/../images/DILI-A-Distribution-Driven-Learned-Index/5.png\" alt=\"img\"><br><img src=\"/../images/DILI-A-Distribution-Driven-Learned-Index/6.png\" alt=\"img\"><br><img src=\"/../images/DILI-A-Distribution-Driven-Learned-Index/7.png\" alt=\"img\"><br><img src=\"/../images/DILI-A-Distribution-Driven-Learned-Index/8.png\" alt=\"img\"><br><img src=\"/../images/DILI-A-Distribution-Driven-Learned-Index/9.png\" alt=\"img\"><br><img src=\"/../images/DILI-A-Distribution-Driven-Learned-Index/10.png\" alt=\"img\"><br><img src=\"/../images/DILI-A-Distribution-Driven-Learned-Index/11.png\" alt=\"img\"><br><img src=\"/../images/DILI-A-Distribution-Driven-Learned-Index/12.png\" alt=\"img\"><br><img src=\"/../images/DILI-A-Distribution-Driven-Learned-Index/13.png\" alt=\"img\"></p>\n"},{"title":"FITing-Tree-A-Data-aware-Index-Structure","date":"2023-10-03T12:51:28.000Z","_content":"\n## Introduction\n1. 一种新的索引结构，它使用分段线性函数紧凑地捕捉数据中的趋势，并通过此减少索引的内存大小\n2. 这个索引结构的核心是一个参数error(查找key的预测position和实际position之间的最大距离)\n3. 为了实现查找性能和空间之间的trade-off，我们提出了一种cost model在给定查找延迟需求(eg 500ns)和存储预算(eg 100MB)的情况下帮助DBA选择合适的error参数\n\n与最初的提出的技术相比，有以下优点：\n(1)绑定最坏的查找性能 \n(2)有效地支持插入\n(3)启动分页(所有数据不必驻留在一个连续的内存区域)\n\n另一个有趣的点：\n由于FITing-Tree的内部节点是树形结构，仍然可以应用前缀和后缀截断的技术来进一步减少索引的大小\n\n## OverView\n### Function Representation\n使用分段线性函数拟合数据相比于更复杂的函数的优点\n(分段线性函数近似的计算成本要低得多)\n(1) 初始索引构建成本低\n(2) 插入新的key延迟低\n![img](../images/FiTing-Tree-A-Data-aware-Index-Structure/1.png)\n分段线性函数仍然存在误差error\n![img](../images/FiTing-Tree-A-Data-aware-Index-Structure/2.png)\n通过以上公式，我们可以定义一个segment(一组排序好的数据)\n分割过程结束后，FITing-Tree将每个segment的边界和斜率存储在叶子节点中，减少了索引的总体内存占用\n\n### FITing-Tree Design\n#### Clusted Indexes\n![img](../images/FiTing-Tree-A-Data-aware-Index-Structure/3.png)\n#### Non-clusted Indexes\n![img](../images/FiTing-Tree-A-Data-aware-Index-Structure/4.png)\n\n## SEGMENTATION\n### Design Choices\n下图是我们分段算法需要实现的目标，使得分段后满足最大的error\n![img](../images/FiTing-Tree-A-Data-aware-Index-Structure/5.png)\n为了高效地构建索引和支持插入，需要一个高效地one-pass linear algorithm\n\n### Segment Definition\n当一个segment添加一个key时，违反了这个max-error，则定义这个segment已经达到最大了\n> 定理:最大segment所覆盖的最小位置数为max-error + 1\n\n### Segmentation Algorithm (思考: 可以不以用一个新的分段算法,或者在这个分段算法之上对这个进行改进)\n![img](../images/FiTing-Tree-A-Data-aware-Index-Structure/6.png)\n如图5所示，说明了圆锥体的更新方式:点1时圆锥体的原点。点2更新了高斜坡和低斜坡。点3在原锥内，但是它只更新圆锥的上界（点3的小于下界之上的误差）。点4在更新锥的外部，因此将是新段的第一个点\n![img](../images/FiTing-Tree-A-Data-aware-Index-Structure/7.png)\n\n### Algorithm Analysis\n虽然以上收缩锥体算法的运行时间复杂度为O(n),但是它不是最优的。\n\n## INDEX LOOKUPS\n### Point Queries\n![img](../images/FiTing-Tree-A-Data-aware-Index-Structure/8.png)\n### Range Queries\n\n## INDEX INSERTS\n### In-place Insert Strategy\n类似于页面的填充因子，我们将指定的误差分成两个部分：分割误差e和插入预算x \n通过为每个segment保留插入预算x，可以确保插入新元素不会违反页面的错误\n\n更具体地说，给定一个段，页面的总大小为|s| + 2*x(|s|为该段中的位置数,数据被放置在新页面的中间)，在页面的开始和结束处产生x个空位置。在插入过程中如果所有的空白都被填满，那么就需要重新执行分割算法\n\n### Delta Insert Algorithm\n- 就地插入策略的成本可能很高\n- 为了减小插入时页面内数据移动的开销，每个segment包含一个额外的固定大小的缓冲区，此缓冲区保持排序，以实现有效的搜索和合并操作，一旦缓冲区达到预定的大小(buff)，它与段中的数据进行合并，再次执行分割算法\n- 另外，由于为每个段添加缓冲区可能违反FITing-Tree的max-error，我们透明地将缓冲区地大小合并到分割过程地错误阐述中，即分割过程中地错误阈值为(error -buff)\n![img](../images/FiTing-Tree-A-Data-aware-Index-Structure/9.png)\n\n## COST MODEL\n由于指定的错误阈值error会影响查找和插入的性能以及索引的大小\n提供cost model的目的就是帮助DBA在不同的工作负载下选择合适的错误阈值error\n\n### Latency Guarantee\n查找延迟保证\n\n由于查找需要找到相关的segment,然后搜索segment(数据+缓冲区)，并且error的值会影响创建的段的数量(即更小的error会产生更多的段),我们使用一个函数，它返回为给定数据集创建的segment数量和error值。我们使用Se来表示指定数据集在给定错误阈值e下生成的segment的数量。\n\nerror值为e的总估计查找延迟可以用以下表达式来建模,其中b是tree的fanout,buff是segment的最大buffer大小\n![img](../images/FiTing-Tree-A-Data-aware-Index-Structure/10.png)\n\n满足给定延迟要求并且存储占用最小的索引由以下表达式给出,其中E表示一组可能的错误值\n![img](../images/FiTing-Tree-A-Data-aware-Index-Structure/11.png)\n\n### Space Budget\n空间预算\n可以用以下函数来估计给定的错误阈值e下的只读聚类索引的大小(byte)\n![img](../images/FiTing-Tree-A-Data-aware-Index-Structure/12.png)\n因此满足给定存储预算的最小误差阈值由以下表达式给出\n![img](../images/FiTing-Tree-A-Data-aware-Index-Structure/13.png)\n","source":"_posts/FiTing-Tree-A-Data-aware-Index-Structure.md","raw":"---\ntitle: FITing-Tree-A-Data-aware-Index-Structure\ndate: 2023-10-03 05:51:28\ntags: Learned Index\ncategories: Learned Index\n---\n\n## Introduction\n1. 一种新的索引结构，它使用分段线性函数紧凑地捕捉数据中的趋势，并通过此减少索引的内存大小\n2. 这个索引结构的核心是一个参数error(查找key的预测position和实际position之间的最大距离)\n3. 为了实现查找性能和空间之间的trade-off，我们提出了一种cost model在给定查找延迟需求(eg 500ns)和存储预算(eg 100MB)的情况下帮助DBA选择合适的error参数\n\n与最初的提出的技术相比，有以下优点：\n(1)绑定最坏的查找性能 \n(2)有效地支持插入\n(3)启动分页(所有数据不必驻留在一个连续的内存区域)\n\n另一个有趣的点：\n由于FITing-Tree的内部节点是树形结构，仍然可以应用前缀和后缀截断的技术来进一步减少索引的大小\n\n## OverView\n### Function Representation\n使用分段线性函数拟合数据相比于更复杂的函数的优点\n(分段线性函数近似的计算成本要低得多)\n(1) 初始索引构建成本低\n(2) 插入新的key延迟低\n![img](../images/FiTing-Tree-A-Data-aware-Index-Structure/1.png)\n分段线性函数仍然存在误差error\n![img](../images/FiTing-Tree-A-Data-aware-Index-Structure/2.png)\n通过以上公式，我们可以定义一个segment(一组排序好的数据)\n分割过程结束后，FITing-Tree将每个segment的边界和斜率存储在叶子节点中，减少了索引的总体内存占用\n\n### FITing-Tree Design\n#### Clusted Indexes\n![img](../images/FiTing-Tree-A-Data-aware-Index-Structure/3.png)\n#### Non-clusted Indexes\n![img](../images/FiTing-Tree-A-Data-aware-Index-Structure/4.png)\n\n## SEGMENTATION\n### Design Choices\n下图是我们分段算法需要实现的目标，使得分段后满足最大的error\n![img](../images/FiTing-Tree-A-Data-aware-Index-Structure/5.png)\n为了高效地构建索引和支持插入，需要一个高效地one-pass linear algorithm\n\n### Segment Definition\n当一个segment添加一个key时，违反了这个max-error，则定义这个segment已经达到最大了\n> 定理:最大segment所覆盖的最小位置数为max-error + 1\n\n### Segmentation Algorithm (思考: 可以不以用一个新的分段算法,或者在这个分段算法之上对这个进行改进)\n![img](../images/FiTing-Tree-A-Data-aware-Index-Structure/6.png)\n如图5所示，说明了圆锥体的更新方式:点1时圆锥体的原点。点2更新了高斜坡和低斜坡。点3在原锥内，但是它只更新圆锥的上界（点3的小于下界之上的误差）。点4在更新锥的外部，因此将是新段的第一个点\n![img](../images/FiTing-Tree-A-Data-aware-Index-Structure/7.png)\n\n### Algorithm Analysis\n虽然以上收缩锥体算法的运行时间复杂度为O(n),但是它不是最优的。\n\n## INDEX LOOKUPS\n### Point Queries\n![img](../images/FiTing-Tree-A-Data-aware-Index-Structure/8.png)\n### Range Queries\n\n## INDEX INSERTS\n### In-place Insert Strategy\n类似于页面的填充因子，我们将指定的误差分成两个部分：分割误差e和插入预算x \n通过为每个segment保留插入预算x，可以确保插入新元素不会违反页面的错误\n\n更具体地说，给定一个段，页面的总大小为|s| + 2*x(|s|为该段中的位置数,数据被放置在新页面的中间)，在页面的开始和结束处产生x个空位置。在插入过程中如果所有的空白都被填满，那么就需要重新执行分割算法\n\n### Delta Insert Algorithm\n- 就地插入策略的成本可能很高\n- 为了减小插入时页面内数据移动的开销，每个segment包含一个额外的固定大小的缓冲区，此缓冲区保持排序，以实现有效的搜索和合并操作，一旦缓冲区达到预定的大小(buff)，它与段中的数据进行合并，再次执行分割算法\n- 另外，由于为每个段添加缓冲区可能违反FITing-Tree的max-error，我们透明地将缓冲区地大小合并到分割过程地错误阐述中，即分割过程中地错误阈值为(error -buff)\n![img](../images/FiTing-Tree-A-Data-aware-Index-Structure/9.png)\n\n## COST MODEL\n由于指定的错误阈值error会影响查找和插入的性能以及索引的大小\n提供cost model的目的就是帮助DBA在不同的工作负载下选择合适的错误阈值error\n\n### Latency Guarantee\n查找延迟保证\n\n由于查找需要找到相关的segment,然后搜索segment(数据+缓冲区)，并且error的值会影响创建的段的数量(即更小的error会产生更多的段),我们使用一个函数，它返回为给定数据集创建的segment数量和error值。我们使用Se来表示指定数据集在给定错误阈值e下生成的segment的数量。\n\nerror值为e的总估计查找延迟可以用以下表达式来建模,其中b是tree的fanout,buff是segment的最大buffer大小\n![img](../images/FiTing-Tree-A-Data-aware-Index-Structure/10.png)\n\n满足给定延迟要求并且存储占用最小的索引由以下表达式给出,其中E表示一组可能的错误值\n![img](../images/FiTing-Tree-A-Data-aware-Index-Structure/11.png)\n\n### Space Budget\n空间预算\n可以用以下函数来估计给定的错误阈值e下的只读聚类索引的大小(byte)\n![img](../images/FiTing-Tree-A-Data-aware-Index-Structure/12.png)\n因此满足给定存储预算的最小误差阈值由以下表达式给出\n![img](../images/FiTing-Tree-A-Data-aware-Index-Structure/13.png)\n","slug":"FiTing-Tree-A-Data-aware-Index-Structure","published":1,"updated":"2024-02-26T07:45:34.714Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt2vlxyg00034ijxgg4b0blp","content":"<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><ol>\n<li>一种新的索引结构，它使用分段线性函数紧凑地捕捉数据中的趋势，并通过此减少索引的内存大小</li>\n<li>这个索引结构的核心是一个参数error(查找key的预测position和实际position之间的最大距离)</li>\n<li>为了实现查找性能和空间之间的trade-off，我们提出了一种cost model在给定查找延迟需求(eg 500ns)和存储预算(eg 100MB)的情况下帮助DBA选择合适的error参数</li>\n</ol>\n<p>与最初的提出的技术相比，有以下优点：<br>(1)绑定最坏的查找性能<br>(2)有效地支持插入<br>(3)启动分页(所有数据不必驻留在一个连续的内存区域)</p>\n<p>另一个有趣的点：<br>由于FITing-Tree的内部节点是树形结构，仍然可以应用前缀和后缀截断的技术来进一步减少索引的大小</p>\n<h2 id=\"OverView\"><a href=\"#OverView\" class=\"headerlink\" title=\"OverView\"></a>OverView</h2><h3 id=\"Function-Representation\"><a href=\"#Function-Representation\" class=\"headerlink\" title=\"Function Representation\"></a>Function Representation</h3><p>使用分段线性函数拟合数据相比于更复杂的函数的优点<br>(分段线性函数近似的计算成本要低得多)<br>(1) 初始索引构建成本低<br>(2) 插入新的key延迟低<br><img src=\"/../images/FiTing-Tree-A-Data-aware-Index-Structure/1.png\" alt=\"img\"><br>分段线性函数仍然存在误差error<br><img src=\"/../images/FiTing-Tree-A-Data-aware-Index-Structure/2.png\" alt=\"img\"><br>通过以上公式，我们可以定义一个segment(一组排序好的数据)<br>分割过程结束后，FITing-Tree将每个segment的边界和斜率存储在叶子节点中，减少了索引的总体内存占用</p>\n<h3 id=\"FITing-Tree-Design\"><a href=\"#FITing-Tree-Design\" class=\"headerlink\" title=\"FITing-Tree Design\"></a>FITing-Tree Design</h3><h4 id=\"Clusted-Indexes\"><a href=\"#Clusted-Indexes\" class=\"headerlink\" title=\"Clusted Indexes\"></a>Clusted Indexes</h4><p><img src=\"/../images/FiTing-Tree-A-Data-aware-Index-Structure/3.png\" alt=\"img\"></p>\n<h4 id=\"Non-clusted-Indexes\"><a href=\"#Non-clusted-Indexes\" class=\"headerlink\" title=\"Non-clusted Indexes\"></a>Non-clusted Indexes</h4><p><img src=\"/../images/FiTing-Tree-A-Data-aware-Index-Structure/4.png\" alt=\"img\"></p>\n<h2 id=\"SEGMENTATION\"><a href=\"#SEGMENTATION\" class=\"headerlink\" title=\"SEGMENTATION\"></a>SEGMENTATION</h2><h3 id=\"Design-Choices\"><a href=\"#Design-Choices\" class=\"headerlink\" title=\"Design Choices\"></a>Design Choices</h3><p>下图是我们分段算法需要实现的目标，使得分段后满足最大的error<br><img src=\"/../images/FiTing-Tree-A-Data-aware-Index-Structure/5.png\" alt=\"img\"><br>为了高效地构建索引和支持插入，需要一个高效地one-pass linear algorithm</p>\n<h3 id=\"Segment-Definition\"><a href=\"#Segment-Definition\" class=\"headerlink\" title=\"Segment Definition\"></a>Segment Definition</h3><p>当一个segment添加一个key时，违反了这个max-error，则定义这个segment已经达到最大了</p>\n<blockquote>\n<p>定理:最大segment所覆盖的最小位置数为max-error + 1</p>\n</blockquote>\n<h3 id=\"Segmentation-Algorithm-思考-可以不以用一个新的分段算法-或者在这个分段算法之上对这个进行改进\"><a href=\"#Segmentation-Algorithm-思考-可以不以用一个新的分段算法-或者在这个分段算法之上对这个进行改进\" class=\"headerlink\" title=\"Segmentation Algorithm (思考: 可以不以用一个新的分段算法,或者在这个分段算法之上对这个进行改进)\"></a>Segmentation Algorithm (思考: 可以不以用一个新的分段算法,或者在这个分段算法之上对这个进行改进)</h3><p><img src=\"/../images/FiTing-Tree-A-Data-aware-Index-Structure/6.png\" alt=\"img\"><br>如图5所示，说明了圆锥体的更新方式:点1时圆锥体的原点。点2更新了高斜坡和低斜坡。点3在原锥内，但是它只更新圆锥的上界（点3的小于下界之上的误差）。点4在更新锥的外部，因此将是新段的第一个点<br><img src=\"/../images/FiTing-Tree-A-Data-aware-Index-Structure/7.png\" alt=\"img\"></p>\n<h3 id=\"Algorithm-Analysis\"><a href=\"#Algorithm-Analysis\" class=\"headerlink\" title=\"Algorithm Analysis\"></a>Algorithm Analysis</h3><p>虽然以上收缩锥体算法的运行时间复杂度为O(n),但是它不是最优的。</p>\n<h2 id=\"INDEX-LOOKUPS\"><a href=\"#INDEX-LOOKUPS\" class=\"headerlink\" title=\"INDEX LOOKUPS\"></a>INDEX LOOKUPS</h2><h3 id=\"Point-Queries\"><a href=\"#Point-Queries\" class=\"headerlink\" title=\"Point Queries\"></a>Point Queries</h3><p><img src=\"/../images/FiTing-Tree-A-Data-aware-Index-Structure/8.png\" alt=\"img\"></p>\n<h3 id=\"Range-Queries\"><a href=\"#Range-Queries\" class=\"headerlink\" title=\"Range Queries\"></a>Range Queries</h3><h2 id=\"INDEX-INSERTS\"><a href=\"#INDEX-INSERTS\" class=\"headerlink\" title=\"INDEX INSERTS\"></a>INDEX INSERTS</h2><h3 id=\"In-place-Insert-Strategy\"><a href=\"#In-place-Insert-Strategy\" class=\"headerlink\" title=\"In-place Insert Strategy\"></a>In-place Insert Strategy</h3><p>类似于页面的填充因子，我们将指定的误差分成两个部分：分割误差e和插入预算x<br>通过为每个segment保留插入预算x，可以确保插入新元素不会违反页面的错误</p>\n<p>更具体地说，给定一个段，页面的总大小为|s| + 2*x(|s|为该段中的位置数,数据被放置在新页面的中间)，在页面的开始和结束处产生x个空位置。在插入过程中如果所有的空白都被填满，那么就需要重新执行分割算法</p>\n<h3 id=\"Delta-Insert-Algorithm\"><a href=\"#Delta-Insert-Algorithm\" class=\"headerlink\" title=\"Delta Insert Algorithm\"></a>Delta Insert Algorithm</h3><ul>\n<li>就地插入策略的成本可能很高</li>\n<li>为了减小插入时页面内数据移动的开销，每个segment包含一个额外的固定大小的缓冲区，此缓冲区保持排序，以实现有效的搜索和合并操作，一旦缓冲区达到预定的大小(buff)，它与段中的数据进行合并，再次执行分割算法</li>\n<li>另外，由于为每个段添加缓冲区可能违反FITing-Tree的max-error，我们透明地将缓冲区地大小合并到分割过程地错误阐述中，即分割过程中地错误阈值为(error -buff)<br><img src=\"/../images/FiTing-Tree-A-Data-aware-Index-Structure/9.png\" alt=\"img\"></li>\n</ul>\n<h2 id=\"COST-MODEL\"><a href=\"#COST-MODEL\" class=\"headerlink\" title=\"COST MODEL\"></a>COST MODEL</h2><p>由于指定的错误阈值error会影响查找和插入的性能以及索引的大小<br>提供cost model的目的就是帮助DBA在不同的工作负载下选择合适的错误阈值error</p>\n<h3 id=\"Latency-Guarantee\"><a href=\"#Latency-Guarantee\" class=\"headerlink\" title=\"Latency Guarantee\"></a>Latency Guarantee</h3><p>查找延迟保证</p>\n<p>由于查找需要找到相关的segment,然后搜索segment(数据+缓冲区)，并且error的值会影响创建的段的数量(即更小的error会产生更多的段),我们使用一个函数，它返回为给定数据集创建的segment数量和error值。我们使用Se来表示指定数据集在给定错误阈值e下生成的segment的数量。</p>\n<p>error值为e的总估计查找延迟可以用以下表达式来建模,其中b是tree的fanout,buff是segment的最大buffer大小<br><img src=\"/../images/FiTing-Tree-A-Data-aware-Index-Structure/10.png\" alt=\"img\"></p>\n<p>满足给定延迟要求并且存储占用最小的索引由以下表达式给出,其中E表示一组可能的错误值<br><img src=\"/../images/FiTing-Tree-A-Data-aware-Index-Structure/11.png\" alt=\"img\"></p>\n<h3 id=\"Space-Budget\"><a href=\"#Space-Budget\" class=\"headerlink\" title=\"Space Budget\"></a>Space Budget</h3><p>空间预算<br>可以用以下函数来估计给定的错误阈值e下的只读聚类索引的大小(byte)<br><img src=\"/../images/FiTing-Tree-A-Data-aware-Index-Structure/12.png\" alt=\"img\"><br>因此满足给定存储预算的最小误差阈值由以下表达式给出<br><img src=\"/../images/FiTing-Tree-A-Data-aware-Index-Structure/13.png\" alt=\"img\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><ol>\n<li>一种新的索引结构，它使用分段线性函数紧凑地捕捉数据中的趋势，并通过此减少索引的内存大小</li>\n<li>这个索引结构的核心是一个参数error(查找key的预测position和实际position之间的最大距离)</li>\n<li>为了实现查找性能和空间之间的trade-off，我们提出了一种cost model在给定查找延迟需求(eg 500ns)和存储预算(eg 100MB)的情况下帮助DBA选择合适的error参数</li>\n</ol>\n<p>与最初的提出的技术相比，有以下优点：<br>(1)绑定最坏的查找性能<br>(2)有效地支持插入<br>(3)启动分页(所有数据不必驻留在一个连续的内存区域)</p>\n<p>另一个有趣的点：<br>由于FITing-Tree的内部节点是树形结构，仍然可以应用前缀和后缀截断的技术来进一步减少索引的大小</p>\n<h2 id=\"OverView\"><a href=\"#OverView\" class=\"headerlink\" title=\"OverView\"></a>OverView</h2><h3 id=\"Function-Representation\"><a href=\"#Function-Representation\" class=\"headerlink\" title=\"Function Representation\"></a>Function Representation</h3><p>使用分段线性函数拟合数据相比于更复杂的函数的优点<br>(分段线性函数近似的计算成本要低得多)<br>(1) 初始索引构建成本低<br>(2) 插入新的key延迟低<br><img src=\"/../images/FiTing-Tree-A-Data-aware-Index-Structure/1.png\" alt=\"img\"><br>分段线性函数仍然存在误差error<br><img src=\"/../images/FiTing-Tree-A-Data-aware-Index-Structure/2.png\" alt=\"img\"><br>通过以上公式，我们可以定义一个segment(一组排序好的数据)<br>分割过程结束后，FITing-Tree将每个segment的边界和斜率存储在叶子节点中，减少了索引的总体内存占用</p>\n<h3 id=\"FITing-Tree-Design\"><a href=\"#FITing-Tree-Design\" class=\"headerlink\" title=\"FITing-Tree Design\"></a>FITing-Tree Design</h3><h4 id=\"Clusted-Indexes\"><a href=\"#Clusted-Indexes\" class=\"headerlink\" title=\"Clusted Indexes\"></a>Clusted Indexes</h4><p><img src=\"/../images/FiTing-Tree-A-Data-aware-Index-Structure/3.png\" alt=\"img\"></p>\n<h4 id=\"Non-clusted-Indexes\"><a href=\"#Non-clusted-Indexes\" class=\"headerlink\" title=\"Non-clusted Indexes\"></a>Non-clusted Indexes</h4><p><img src=\"/../images/FiTing-Tree-A-Data-aware-Index-Structure/4.png\" alt=\"img\"></p>\n<h2 id=\"SEGMENTATION\"><a href=\"#SEGMENTATION\" class=\"headerlink\" title=\"SEGMENTATION\"></a>SEGMENTATION</h2><h3 id=\"Design-Choices\"><a href=\"#Design-Choices\" class=\"headerlink\" title=\"Design Choices\"></a>Design Choices</h3><p>下图是我们分段算法需要实现的目标，使得分段后满足最大的error<br><img src=\"/../images/FiTing-Tree-A-Data-aware-Index-Structure/5.png\" alt=\"img\"><br>为了高效地构建索引和支持插入，需要一个高效地one-pass linear algorithm</p>\n<h3 id=\"Segment-Definition\"><a href=\"#Segment-Definition\" class=\"headerlink\" title=\"Segment Definition\"></a>Segment Definition</h3><p>当一个segment添加一个key时，违反了这个max-error，则定义这个segment已经达到最大了</p>\n<blockquote>\n<p>定理:最大segment所覆盖的最小位置数为max-error + 1</p>\n</blockquote>\n<h3 id=\"Segmentation-Algorithm-思考-可以不以用一个新的分段算法-或者在这个分段算法之上对这个进行改进\"><a href=\"#Segmentation-Algorithm-思考-可以不以用一个新的分段算法-或者在这个分段算法之上对这个进行改进\" class=\"headerlink\" title=\"Segmentation Algorithm (思考: 可以不以用一个新的分段算法,或者在这个分段算法之上对这个进行改进)\"></a>Segmentation Algorithm (思考: 可以不以用一个新的分段算法,或者在这个分段算法之上对这个进行改进)</h3><p><img src=\"/../images/FiTing-Tree-A-Data-aware-Index-Structure/6.png\" alt=\"img\"><br>如图5所示，说明了圆锥体的更新方式:点1时圆锥体的原点。点2更新了高斜坡和低斜坡。点3在原锥内，但是它只更新圆锥的上界（点3的小于下界之上的误差）。点4在更新锥的外部，因此将是新段的第一个点<br><img src=\"/../images/FiTing-Tree-A-Data-aware-Index-Structure/7.png\" alt=\"img\"></p>\n<h3 id=\"Algorithm-Analysis\"><a href=\"#Algorithm-Analysis\" class=\"headerlink\" title=\"Algorithm Analysis\"></a>Algorithm Analysis</h3><p>虽然以上收缩锥体算法的运行时间复杂度为O(n),但是它不是最优的。</p>\n<h2 id=\"INDEX-LOOKUPS\"><a href=\"#INDEX-LOOKUPS\" class=\"headerlink\" title=\"INDEX LOOKUPS\"></a>INDEX LOOKUPS</h2><h3 id=\"Point-Queries\"><a href=\"#Point-Queries\" class=\"headerlink\" title=\"Point Queries\"></a>Point Queries</h3><p><img src=\"/../images/FiTing-Tree-A-Data-aware-Index-Structure/8.png\" alt=\"img\"></p>\n<h3 id=\"Range-Queries\"><a href=\"#Range-Queries\" class=\"headerlink\" title=\"Range Queries\"></a>Range Queries</h3><h2 id=\"INDEX-INSERTS\"><a href=\"#INDEX-INSERTS\" class=\"headerlink\" title=\"INDEX INSERTS\"></a>INDEX INSERTS</h2><h3 id=\"In-place-Insert-Strategy\"><a href=\"#In-place-Insert-Strategy\" class=\"headerlink\" title=\"In-place Insert Strategy\"></a>In-place Insert Strategy</h3><p>类似于页面的填充因子，我们将指定的误差分成两个部分：分割误差e和插入预算x<br>通过为每个segment保留插入预算x，可以确保插入新元素不会违反页面的错误</p>\n<p>更具体地说，给定一个段，页面的总大小为|s| + 2*x(|s|为该段中的位置数,数据被放置在新页面的中间)，在页面的开始和结束处产生x个空位置。在插入过程中如果所有的空白都被填满，那么就需要重新执行分割算法</p>\n<h3 id=\"Delta-Insert-Algorithm\"><a href=\"#Delta-Insert-Algorithm\" class=\"headerlink\" title=\"Delta Insert Algorithm\"></a>Delta Insert Algorithm</h3><ul>\n<li>就地插入策略的成本可能很高</li>\n<li>为了减小插入时页面内数据移动的开销，每个segment包含一个额外的固定大小的缓冲区，此缓冲区保持排序，以实现有效的搜索和合并操作，一旦缓冲区达到预定的大小(buff)，它与段中的数据进行合并，再次执行分割算法</li>\n<li>另外，由于为每个段添加缓冲区可能违反FITing-Tree的max-error，我们透明地将缓冲区地大小合并到分割过程地错误阐述中，即分割过程中地错误阈值为(error -buff)<br><img src=\"/../images/FiTing-Tree-A-Data-aware-Index-Structure/9.png\" alt=\"img\"></li>\n</ul>\n<h2 id=\"COST-MODEL\"><a href=\"#COST-MODEL\" class=\"headerlink\" title=\"COST MODEL\"></a>COST MODEL</h2><p>由于指定的错误阈值error会影响查找和插入的性能以及索引的大小<br>提供cost model的目的就是帮助DBA在不同的工作负载下选择合适的错误阈值error</p>\n<h3 id=\"Latency-Guarantee\"><a href=\"#Latency-Guarantee\" class=\"headerlink\" title=\"Latency Guarantee\"></a>Latency Guarantee</h3><p>查找延迟保证</p>\n<p>由于查找需要找到相关的segment,然后搜索segment(数据+缓冲区)，并且error的值会影响创建的段的数量(即更小的error会产生更多的段),我们使用一个函数，它返回为给定数据集创建的segment数量和error值。我们使用Se来表示指定数据集在给定错误阈值e下生成的segment的数量。</p>\n<p>error值为e的总估计查找延迟可以用以下表达式来建模,其中b是tree的fanout,buff是segment的最大buffer大小<br><img src=\"/../images/FiTing-Tree-A-Data-aware-Index-Structure/10.png\" alt=\"img\"></p>\n<p>满足给定延迟要求并且存储占用最小的索引由以下表达式给出,其中E表示一组可能的错误值<br><img src=\"/../images/FiTing-Tree-A-Data-aware-Index-Structure/11.png\" alt=\"img\"></p>\n<h3 id=\"Space-Budget\"><a href=\"#Space-Budget\" class=\"headerlink\" title=\"Space Budget\"></a>Space Budget</h3><p>空间预算<br>可以用以下函数来估计给定的错误阈值e下的只读聚类索引的大小(byte)<br><img src=\"/../images/FiTing-Tree-A-Data-aware-Index-Structure/12.png\" alt=\"img\"><br>因此满足给定存储预算的最小误差阈值由以下表达式给出<br><img src=\"/../images/FiTing-Tree-A-Data-aware-Index-Structure/13.png\" alt=\"img\"></p>\n"},{"title":"NFL-Robust-Learned-Index-via-Distribution-Transformation","date":"2023-12-06T05:37:11.000Z","_content":"\n\n## 应用场景：\n- 只读负载\n- 读写负载，但是数据分布变化不大（即CDF随着key的插入删除变化较小）\n\n## 问题描述：\n之前的学习索引通过设计更好的启发式方法来划分key空间，使得每一份被分割的sub key空间可以更好地被线性模型拟合。\n缺点：\n- 为了达到这个目的，学习索引必须构建更深的层次结构，从而产生更多的遍历时间和预测数量\n（类似于用一个分段线性函数去拟合数据分布CDF）。\n\n## 难点和分析过程：\n本文提出了学习索引NFL（包括两个结构Normalizing Flow 和 Learned Index ）\n\n![img](../images/NFL-Robust-Learned-Index-via-Distribution-Transformation/1.jpg)\n思想： 先用分布转换模型将复杂key分布转换为近似均匀的分布，然后利用转换的key构建学习索引\n\n**难点**\n\n（1）Efficacy of Normalizing flow:\n- 由于key的数字数据特征有限，分布转换模型表现不佳\n- 均匀分布很难作为训练目标（我们设计了一个具有丰富特征空间的分布转换模型和一个易于操作的训练目标）\n  \n（2）Efficiency of normalizing flow\n  - 分布转化必须是高效的在线步骤，这样就限制了NF的复杂性。但是直接减少参数数量标准化流程可能会降低转换质量（这样会导致学习索引需要更深的层次结构和更多的模型来近似CDF），（我们设计了一套效率优化方案，并且保证NF的功效）\n\n（3）Lack of proper indexes for transformed keys：\n- numerica NF的转换使线性模型拟合地更好，学习索引应该以新的视角重新思考。（我们提出了After-Flow Learned Index（AFLI），充分利用转换后的key）\n  \n**方法**\n![img](../images/NFL-Robust-Learned-Index-via-Distribution-Transformation/1.jpg)\n以下两个是评价模型转换质量的指标\n![img](../images/NFL-Robust-Learned-Index-via-Distribution-Transformation/2.jpg)\n\nTail conflict degree：\n\nNumerical Normalizing Flow:\nFeature Space Expansion:现有的NF大多用在cv和nlp领域，用于处理高纬的图片和文本，这些数据都有丰富的特征。然而keys都是数值数据，含有的特征较少。\n使用Algorithm 3.1分布转换算法（对keys的数值特征进行扩展）\n![img](../images/NFL-Robust-Learned-Index-via-Distribution-Transformation/3.jpg)\n\n特征扩展的时间复杂度为O（n x d）\n\n![img](../images/NFL-Robust-Learned-Index-via-Distribution-Transformation/4.png)\n\n\nStructure of AFLI：\n![img](../images/NFL-Robust-Learned-Index-via-Distribution-Transformation/5.jpg)\n\n\n**Model node:**\nEmpty Slot：unused slot\nData Slot：key payload\nBucket Pointer: 指向一个bucket\nNode Pointer：指向一个model node或者dense node\n**Bucket:**\na short data array.它的size由tail conflict degree决定，但将保持在预设阈值范围内。我们提供两种桶，线性桶（默认）和有序桶\n\n**Dense node：**\nAlso a data array，比bucket大一点，但是比Model node小很多，是一个ordered and gapped array, gap的最大值由tail conflict degree\n\n**Analysis:**\n当索引无法建立模型节点时，因为节点中的所有键都太近（即拟合线性模型的斜率为0），索引会分配一个dense array\n\n**Queries:**\n（1）从root node开始查找，如果是model node，先用linear model预测position，判断它的类型，如果是empty slot，表示不存在；如果是data slot，比较是否是相同的key；如果是bucket pointer，在bucket中查找；如果是node pointer，递归操作\n（2）如果node是dense node，使用二分查找查找这个结果。\n\n\n**Insertions:**\n（1）如果key-payload pair被插入model node，先用linear model预测position\n- 如果是empty slot，直接存储key-payload\n- 如果是data slot，表明发生冲突，创建一个bucket来存储这两个key\n- 如果是bucket pointer或者node pointer，插入key-payload到bucket或者child node中\n（2）插入到bucket中时，将key-payload会直接被加到sorted data的末尾；如果bucket是一个ordered mode，将会执行一次插入排序。\n（3）插入到dense node中时，先在array上执行二分查找，如果那个position是一个empty slot，我们会直接插入key-payload pair；，否则会移动到最近的empty slot再插入。\n\n如果bucket或者dense node没有empty slots，我们尽量通过一个modeling operation将它转换为model node\n![img](../images/NFL-Robust-Learned-Index-via-Distribution-Transformation/6.jpg)\n\n![img](../images/NFL-Robust-Learned-Index-via-Distribution-Transformation/7.jpg)\n![img](../images/NFL-Robust-Learned-Index-via-Distribution-Transformation/8.jpg)\n\n我们首先一个使用线性回归创建线性模型（Line 1）\n如果slope 为0（所有key被映射到一个相同的position），我们为创建一个dense node（Line 2 - 4）\n否则如果我们成功创建一个linear model，就计算model node所有位置的conflict degree（Line 6）\n然后我们遍历所有预测的位置，决定每个pos的entry type。如果conflict degree为1，我们直接在data slot存储该key；如果conflict degree大于1但是比bucket的tail confict degree小，存储在一个bucket中（Line 14 - 17）；\n否则，如果某个position的confict degree比bucket的tail conflict degree大，找到下一个conflict degree也大于tail conflict degree的position或者到末尾，并将经过的position的key都收集起来，并分配一个新的节点来处理它们（第18 - 21行）\nBulkLoad：首先计算tail conflict degree. The returned result is the root node.\nUpdate: lookup + in-place update\nDelete\n\n\n## 结果：\n**数据集：**\n选取了7个不同的数据集进行评估\n（Key的类型为double     payload的类型是int64）\n\n对每种类型的数据集构建了四种类型的工作负载\n\n每种工作负载包括 批量加载和运行阶段\n我们使用批量加载操作来加载数据集的50%的key；在运行阶段，根据不同的操作比率生成请求\n- 只读\n- 读80% 写20%\n- 写 20% 读80%\n- 只写\n\n将NFL与LIPP、ALEX、PGM-index、B-Tree、an efficient B-Tree对比\n\n**平均吞吐量**\n![img](../images/NFL-Robust-Learned-Index-via-Distribution-Transformation/9.jpg)\n\n- 只读：NFL与LIPP、ALEX、PGM、B-Tree相比，平均吞吐量分别提高了2.34倍、2.46倍、3.82倍、7.45倍；对于具有大冲突程度的工作负载（即LLT和FB），可以分别实现比LIPP、ALEX高2.41x和3.70x的吞吐量。\n- 重读：与LIPP、ALEX、PGM、B-Tree相比，NFL在吞吐量上分别提高72.22%、101.05%、611.48%、389.45%\n- 重写：与LIPP、ALEX、PGM、B-Tree相比，NFL在吞吐量上分别提高29.10%、39.28%、50.88%、162.92%\n- 只写：与LIPP、ALEX、B-Tree相比，NFL在吞吐量上分别提高22.65%、28.30%和131.58%\n\n**延迟**\n![img](../images/NFL-Robust-Learned-Index-via-Distribution-Transformation/10.jpg)\n- 只读：与LIPP、ALEX、PGM index、B-Tree相比，NFL可以将延迟分别降低58.68%、32.89%、62.73%和80.77%\n- 读写：与LIPP、ALEX、PGM index和B-Tree相比，NFL可以将延迟分别降低26.64%、45.05%、59.49%、65.31%\n- 只写：与LIPP、ALEX、B-Tree相比，NFL可以将延迟减少2.26%、27.92%、50.48%\n\n\n**批量加载时间**\n![img](../images/NFL-Robust-Learned-Index-via-Distribution-Transformation/11.jpg)\n\n与LIPP、ALEX、B-Tree相比，NFL需要2.25倍、0.86倍、2.81倍的大容量加载时间，其中77%的时间是用来转换key的\n\n**索引大小：**\n![img](../images/NFL-Robust-Learned-Index-via-Distribution-Transformation/12.jpg)\nNFL的指数大小分别是ALEX和PGM的2.26倍和3.1倍；然而，NFL的大小仅为LIPP大小的0.51","source":"_posts/NFL-Robust-Learned-Index-via-Distribution-Transformation.md","raw":"---\ntitle: NFL-Robust-Learned-Index-via-Distribution-Transformation\ndate: 2023-12-05 21:37:11\ntags: Learned Index\ncategories: Learned Index\n---\n\n\n## 应用场景：\n- 只读负载\n- 读写负载，但是数据分布变化不大（即CDF随着key的插入删除变化较小）\n\n## 问题描述：\n之前的学习索引通过设计更好的启发式方法来划分key空间，使得每一份被分割的sub key空间可以更好地被线性模型拟合。\n缺点：\n- 为了达到这个目的，学习索引必须构建更深的层次结构，从而产生更多的遍历时间和预测数量\n（类似于用一个分段线性函数去拟合数据分布CDF）。\n\n## 难点和分析过程：\n本文提出了学习索引NFL（包括两个结构Normalizing Flow 和 Learned Index ）\n\n![img](../images/NFL-Robust-Learned-Index-via-Distribution-Transformation/1.jpg)\n思想： 先用分布转换模型将复杂key分布转换为近似均匀的分布，然后利用转换的key构建学习索引\n\n**难点**\n\n（1）Efficacy of Normalizing flow:\n- 由于key的数字数据特征有限，分布转换模型表现不佳\n- 均匀分布很难作为训练目标（我们设计了一个具有丰富特征空间的分布转换模型和一个易于操作的训练目标）\n  \n（2）Efficiency of normalizing flow\n  - 分布转化必须是高效的在线步骤，这样就限制了NF的复杂性。但是直接减少参数数量标准化流程可能会降低转换质量（这样会导致学习索引需要更深的层次结构和更多的模型来近似CDF），（我们设计了一套效率优化方案，并且保证NF的功效）\n\n（3）Lack of proper indexes for transformed keys：\n- numerica NF的转换使线性模型拟合地更好，学习索引应该以新的视角重新思考。（我们提出了After-Flow Learned Index（AFLI），充分利用转换后的key）\n  \n**方法**\n![img](../images/NFL-Robust-Learned-Index-via-Distribution-Transformation/1.jpg)\n以下两个是评价模型转换质量的指标\n![img](../images/NFL-Robust-Learned-Index-via-Distribution-Transformation/2.jpg)\n\nTail conflict degree：\n\nNumerical Normalizing Flow:\nFeature Space Expansion:现有的NF大多用在cv和nlp领域，用于处理高纬的图片和文本，这些数据都有丰富的特征。然而keys都是数值数据，含有的特征较少。\n使用Algorithm 3.1分布转换算法（对keys的数值特征进行扩展）\n![img](../images/NFL-Robust-Learned-Index-via-Distribution-Transformation/3.jpg)\n\n特征扩展的时间复杂度为O（n x d）\n\n![img](../images/NFL-Robust-Learned-Index-via-Distribution-Transformation/4.png)\n\n\nStructure of AFLI：\n![img](../images/NFL-Robust-Learned-Index-via-Distribution-Transformation/5.jpg)\n\n\n**Model node:**\nEmpty Slot：unused slot\nData Slot：key payload\nBucket Pointer: 指向一个bucket\nNode Pointer：指向一个model node或者dense node\n**Bucket:**\na short data array.它的size由tail conflict degree决定，但将保持在预设阈值范围内。我们提供两种桶，线性桶（默认）和有序桶\n\n**Dense node：**\nAlso a data array，比bucket大一点，但是比Model node小很多，是一个ordered and gapped array, gap的最大值由tail conflict degree\n\n**Analysis:**\n当索引无法建立模型节点时，因为节点中的所有键都太近（即拟合线性模型的斜率为0），索引会分配一个dense array\n\n**Queries:**\n（1）从root node开始查找，如果是model node，先用linear model预测position，判断它的类型，如果是empty slot，表示不存在；如果是data slot，比较是否是相同的key；如果是bucket pointer，在bucket中查找；如果是node pointer，递归操作\n（2）如果node是dense node，使用二分查找查找这个结果。\n\n\n**Insertions:**\n（1）如果key-payload pair被插入model node，先用linear model预测position\n- 如果是empty slot，直接存储key-payload\n- 如果是data slot，表明发生冲突，创建一个bucket来存储这两个key\n- 如果是bucket pointer或者node pointer，插入key-payload到bucket或者child node中\n（2）插入到bucket中时，将key-payload会直接被加到sorted data的末尾；如果bucket是一个ordered mode，将会执行一次插入排序。\n（3）插入到dense node中时，先在array上执行二分查找，如果那个position是一个empty slot，我们会直接插入key-payload pair；，否则会移动到最近的empty slot再插入。\n\n如果bucket或者dense node没有empty slots，我们尽量通过一个modeling operation将它转换为model node\n![img](../images/NFL-Robust-Learned-Index-via-Distribution-Transformation/6.jpg)\n\n![img](../images/NFL-Robust-Learned-Index-via-Distribution-Transformation/7.jpg)\n![img](../images/NFL-Robust-Learned-Index-via-Distribution-Transformation/8.jpg)\n\n我们首先一个使用线性回归创建线性模型（Line 1）\n如果slope 为0（所有key被映射到一个相同的position），我们为创建一个dense node（Line 2 - 4）\n否则如果我们成功创建一个linear model，就计算model node所有位置的conflict degree（Line 6）\n然后我们遍历所有预测的位置，决定每个pos的entry type。如果conflict degree为1，我们直接在data slot存储该key；如果conflict degree大于1但是比bucket的tail confict degree小，存储在一个bucket中（Line 14 - 17）；\n否则，如果某个position的confict degree比bucket的tail conflict degree大，找到下一个conflict degree也大于tail conflict degree的position或者到末尾，并将经过的position的key都收集起来，并分配一个新的节点来处理它们（第18 - 21行）\nBulkLoad：首先计算tail conflict degree. The returned result is the root node.\nUpdate: lookup + in-place update\nDelete\n\n\n## 结果：\n**数据集：**\n选取了7个不同的数据集进行评估\n（Key的类型为double     payload的类型是int64）\n\n对每种类型的数据集构建了四种类型的工作负载\n\n每种工作负载包括 批量加载和运行阶段\n我们使用批量加载操作来加载数据集的50%的key；在运行阶段，根据不同的操作比率生成请求\n- 只读\n- 读80% 写20%\n- 写 20% 读80%\n- 只写\n\n将NFL与LIPP、ALEX、PGM-index、B-Tree、an efficient B-Tree对比\n\n**平均吞吐量**\n![img](../images/NFL-Robust-Learned-Index-via-Distribution-Transformation/9.jpg)\n\n- 只读：NFL与LIPP、ALEX、PGM、B-Tree相比，平均吞吐量分别提高了2.34倍、2.46倍、3.82倍、7.45倍；对于具有大冲突程度的工作负载（即LLT和FB），可以分别实现比LIPP、ALEX高2.41x和3.70x的吞吐量。\n- 重读：与LIPP、ALEX、PGM、B-Tree相比，NFL在吞吐量上分别提高72.22%、101.05%、611.48%、389.45%\n- 重写：与LIPP、ALEX、PGM、B-Tree相比，NFL在吞吐量上分别提高29.10%、39.28%、50.88%、162.92%\n- 只写：与LIPP、ALEX、B-Tree相比，NFL在吞吐量上分别提高22.65%、28.30%和131.58%\n\n**延迟**\n![img](../images/NFL-Robust-Learned-Index-via-Distribution-Transformation/10.jpg)\n- 只读：与LIPP、ALEX、PGM index、B-Tree相比，NFL可以将延迟分别降低58.68%、32.89%、62.73%和80.77%\n- 读写：与LIPP、ALEX、PGM index和B-Tree相比，NFL可以将延迟分别降低26.64%、45.05%、59.49%、65.31%\n- 只写：与LIPP、ALEX、B-Tree相比，NFL可以将延迟减少2.26%、27.92%、50.48%\n\n\n**批量加载时间**\n![img](../images/NFL-Robust-Learned-Index-via-Distribution-Transformation/11.jpg)\n\n与LIPP、ALEX、B-Tree相比，NFL需要2.25倍、0.86倍、2.81倍的大容量加载时间，其中77%的时间是用来转换key的\n\n**索引大小：**\n![img](../images/NFL-Robust-Learned-Index-via-Distribution-Transformation/12.jpg)\nNFL的指数大小分别是ALEX和PGM的2.26倍和3.1倍；然而，NFL的大小仅为LIPP大小的0.51","slug":"NFL-Robust-Learned-Index-via-Distribution-Transformation","published":1,"updated":"2024-02-26T07:45:34.714Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt2vlxyh00054ijxbjschbu3","content":"<h2 id=\"应用场景：\"><a href=\"#应用场景：\" class=\"headerlink\" title=\"应用场景：\"></a>应用场景：</h2><ul>\n<li>只读负载</li>\n<li>读写负载，但是数据分布变化不大（即CDF随着key的插入删除变化较小）</li>\n</ul>\n<h2 id=\"问题描述：\"><a href=\"#问题描述：\" class=\"headerlink\" title=\"问题描述：\"></a>问题描述：</h2><p>之前的学习索引通过设计更好的启发式方法来划分key空间，使得每一份被分割的sub key空间可以更好地被线性模型拟合。<br>缺点：</p>\n<ul>\n<li>为了达到这个目的，学习索引必须构建更深的层次结构，从而产生更多的遍历时间和预测数量<br>（类似于用一个分段线性函数去拟合数据分布CDF）。</li>\n</ul>\n<h2 id=\"难点和分析过程：\"><a href=\"#难点和分析过程：\" class=\"headerlink\" title=\"难点和分析过程：\"></a>难点和分析过程：</h2><p>本文提出了学习索引NFL（包括两个结构Normalizing Flow 和 Learned Index ）</p>\n<p><img src=\"/../images/NFL-Robust-Learned-Index-via-Distribution-Transformation/1.jpg\" alt=\"img\"><br>思想： 先用分布转换模型将复杂key分布转换为近似均匀的分布，然后利用转换的key构建学习索引</p>\n<p><strong>难点</strong></p>\n<p>（1）Efficacy of Normalizing flow:</p>\n<ul>\n<li>由于key的数字数据特征有限，分布转换模型表现不佳</li>\n<li>均匀分布很难作为训练目标（我们设计了一个具有丰富特征空间的分布转换模型和一个易于操作的训练目标）</li>\n</ul>\n<p>（2）Efficiency of normalizing flow</p>\n<ul>\n<li>分布转化必须是高效的在线步骤，这样就限制了NF的复杂性。但是直接减少参数数量标准化流程可能会降低转换质量（这样会导致学习索引需要更深的层次结构和更多的模型来近似CDF），（我们设计了一套效率优化方案，并且保证NF的功效）</li>\n</ul>\n<p>（3）Lack of proper indexes for transformed keys：</p>\n<ul>\n<li>numerica NF的转换使线性模型拟合地更好，学习索引应该以新的视角重新思考。（我们提出了After-Flow Learned Index（AFLI），充分利用转换后的key）</li>\n</ul>\n<p><strong>方法</strong><br><img src=\"/../images/NFL-Robust-Learned-Index-via-Distribution-Transformation/1.jpg\" alt=\"img\"><br>以下两个是评价模型转换质量的指标<br><img src=\"/../images/NFL-Robust-Learned-Index-via-Distribution-Transformation/2.jpg\" alt=\"img\"></p>\n<p>Tail conflict degree：</p>\n<p>Numerical Normalizing Flow:<br>Feature Space Expansion:现有的NF大多用在cv和nlp领域，用于处理高纬的图片和文本，这些数据都有丰富的特征。然而keys都是数值数据，含有的特征较少。<br>使用Algorithm 3.1分布转换算法（对keys的数值特征进行扩展）<br><img src=\"/../images/NFL-Robust-Learned-Index-via-Distribution-Transformation/3.jpg\" alt=\"img\"></p>\n<p>特征扩展的时间复杂度为O（n x d）</p>\n<p><img src=\"/../images/NFL-Robust-Learned-Index-via-Distribution-Transformation/4.png\" alt=\"img\"></p>\n<p>Structure of AFLI：<br><img src=\"/../images/NFL-Robust-Learned-Index-via-Distribution-Transformation/5.jpg\" alt=\"img\"></p>\n<p><strong>Model node:</strong><br>Empty Slot：unused slot<br>Data Slot：key payload<br>Bucket Pointer: 指向一个bucket<br>Node Pointer：指向一个model node或者dense node<br><strong>Bucket:</strong><br>a short data array.它的size由tail conflict degree决定，但将保持在预设阈值范围内。我们提供两种桶，线性桶（默认）和有序桶</p>\n<p><strong>Dense node：</strong><br>Also a data array，比bucket大一点，但是比Model node小很多，是一个ordered and gapped array, gap的最大值由tail conflict degree</p>\n<p><strong>Analysis:</strong><br>当索引无法建立模型节点时，因为节点中的所有键都太近（即拟合线性模型的斜率为0），索引会分配一个dense array</p>\n<p><strong>Queries:</strong><br>（1）从root node开始查找，如果是model node，先用linear model预测position，判断它的类型，如果是empty slot，表示不存在；如果是data slot，比较是否是相同的key；如果是bucket pointer，在bucket中查找；如果是node pointer，递归操作<br>（2）如果node是dense node，使用二分查找查找这个结果。</p>\n<p><strong>Insertions:</strong><br>（1）如果key-payload pair被插入model node，先用linear model预测position</p>\n<ul>\n<li>如果是empty slot，直接存储key-payload</li>\n<li>如果是data slot，表明发生冲突，创建一个bucket来存储这两个key</li>\n<li>如果是bucket pointer或者node pointer，插入key-payload到bucket或者child node中<br>（2）插入到bucket中时，将key-payload会直接被加到sorted data的末尾；如果bucket是一个ordered mode，将会执行一次插入排序。<br>（3）插入到dense node中时，先在array上执行二分查找，如果那个position是一个empty slot，我们会直接插入key-payload pair；，否则会移动到最近的empty slot再插入。</li>\n</ul>\n<p>如果bucket或者dense node没有empty slots，我们尽量通过一个modeling operation将它转换为model node<br><img src=\"/../images/NFL-Robust-Learned-Index-via-Distribution-Transformation/6.jpg\" alt=\"img\"></p>\n<p><img src=\"/../images/NFL-Robust-Learned-Index-via-Distribution-Transformation/7.jpg\" alt=\"img\"><br><img src=\"/../images/NFL-Robust-Learned-Index-via-Distribution-Transformation/8.jpg\" alt=\"img\"></p>\n<p>我们首先一个使用线性回归创建线性模型（Line 1）<br>如果slope 为0（所有key被映射到一个相同的position），我们为创建一个dense node（Line 2 - 4）<br>否则如果我们成功创建一个linear model，就计算model node所有位置的conflict degree（Line 6）<br>然后我们遍历所有预测的位置，决定每个pos的entry type。如果conflict degree为1，我们直接在data slot存储该key；如果conflict degree大于1但是比bucket的tail confict degree小，存储在一个bucket中（Line 14 - 17）；<br>否则，如果某个position的confict degree比bucket的tail conflict degree大，找到下一个conflict degree也大于tail conflict degree的position或者到末尾，并将经过的position的key都收集起来，并分配一个新的节点来处理它们（第18 - 21行）<br>BulkLoad：首先计算tail conflict degree. The returned result is the root node.<br>Update: lookup + in-place update<br>Delete</p>\n<h2 id=\"结果：\"><a href=\"#结果：\" class=\"headerlink\" title=\"结果：\"></a>结果：</h2><p><strong>数据集：</strong><br>选取了7个不同的数据集进行评估<br>（Key的类型为double     payload的类型是int64）</p>\n<p>对每种类型的数据集构建了四种类型的工作负载</p>\n<p>每种工作负载包括 批量加载和运行阶段<br>我们使用批量加载操作来加载数据集的50%的key；在运行阶段，根据不同的操作比率生成请求</p>\n<ul>\n<li>只读</li>\n<li>读80% 写20%</li>\n<li>写 20% 读80%</li>\n<li>只写</li>\n</ul>\n<p>将NFL与LIPP、ALEX、PGM-index、B-Tree、an efficient B-Tree对比</p>\n<p><strong>平均吞吐量</strong><br><img src=\"/../images/NFL-Robust-Learned-Index-via-Distribution-Transformation/9.jpg\" alt=\"img\"></p>\n<ul>\n<li>只读：NFL与LIPP、ALEX、PGM、B-Tree相比，平均吞吐量分别提高了2.34倍、2.46倍、3.82倍、7.45倍；对于具有大冲突程度的工作负载（即LLT和FB），可以分别实现比LIPP、ALEX高2.41x和3.70x的吞吐量。</li>\n<li>重读：与LIPP、ALEX、PGM、B-Tree相比，NFL在吞吐量上分别提高72.22%、101.05%、611.48%、389.45%</li>\n<li>重写：与LIPP、ALEX、PGM、B-Tree相比，NFL在吞吐量上分别提高29.10%、39.28%、50.88%、162.92%</li>\n<li>只写：与LIPP、ALEX、B-Tree相比，NFL在吞吐量上分别提高22.65%、28.30%和131.58%</li>\n</ul>\n<p><strong>延迟</strong><br><img src=\"/../images/NFL-Robust-Learned-Index-via-Distribution-Transformation/10.jpg\" alt=\"img\"></p>\n<ul>\n<li>只读：与LIPP、ALEX、PGM index、B-Tree相比，NFL可以将延迟分别降低58.68%、32.89%、62.73%和80.77%</li>\n<li>读写：与LIPP、ALEX、PGM index和B-Tree相比，NFL可以将延迟分别降低26.64%、45.05%、59.49%、65.31%</li>\n<li>只写：与LIPP、ALEX、B-Tree相比，NFL可以将延迟减少2.26%、27.92%、50.48%</li>\n</ul>\n<p><strong>批量加载时间</strong><br><img src=\"/../images/NFL-Robust-Learned-Index-via-Distribution-Transformation/11.jpg\" alt=\"img\"></p>\n<p>与LIPP、ALEX、B-Tree相比，NFL需要2.25倍、0.86倍、2.81倍的大容量加载时间，其中77%的时间是用来转换key的</p>\n<p><strong>索引大小：</strong><br><img src=\"/../images/NFL-Robust-Learned-Index-via-Distribution-Transformation/12.jpg\" alt=\"img\"><br>NFL的指数大小分别是ALEX和PGM的2.26倍和3.1倍；然而，NFL的大小仅为LIPP大小的0.51</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"应用场景：\"><a href=\"#应用场景：\" class=\"headerlink\" title=\"应用场景：\"></a>应用场景：</h2><ul>\n<li>只读负载</li>\n<li>读写负载，但是数据分布变化不大（即CDF随着key的插入删除变化较小）</li>\n</ul>\n<h2 id=\"问题描述：\"><a href=\"#问题描述：\" class=\"headerlink\" title=\"问题描述：\"></a>问题描述：</h2><p>之前的学习索引通过设计更好的启发式方法来划分key空间，使得每一份被分割的sub key空间可以更好地被线性模型拟合。<br>缺点：</p>\n<ul>\n<li>为了达到这个目的，学习索引必须构建更深的层次结构，从而产生更多的遍历时间和预测数量<br>（类似于用一个分段线性函数去拟合数据分布CDF）。</li>\n</ul>\n<h2 id=\"难点和分析过程：\"><a href=\"#难点和分析过程：\" class=\"headerlink\" title=\"难点和分析过程：\"></a>难点和分析过程：</h2><p>本文提出了学习索引NFL（包括两个结构Normalizing Flow 和 Learned Index ）</p>\n<p><img src=\"/../images/NFL-Robust-Learned-Index-via-Distribution-Transformation/1.jpg\" alt=\"img\"><br>思想： 先用分布转换模型将复杂key分布转换为近似均匀的分布，然后利用转换的key构建学习索引</p>\n<p><strong>难点</strong></p>\n<p>（1）Efficacy of Normalizing flow:</p>\n<ul>\n<li>由于key的数字数据特征有限，分布转换模型表现不佳</li>\n<li>均匀分布很难作为训练目标（我们设计了一个具有丰富特征空间的分布转换模型和一个易于操作的训练目标）</li>\n</ul>\n<p>（2）Efficiency of normalizing flow</p>\n<ul>\n<li>分布转化必须是高效的在线步骤，这样就限制了NF的复杂性。但是直接减少参数数量标准化流程可能会降低转换质量（这样会导致学习索引需要更深的层次结构和更多的模型来近似CDF），（我们设计了一套效率优化方案，并且保证NF的功效）</li>\n</ul>\n<p>（3）Lack of proper indexes for transformed keys：</p>\n<ul>\n<li>numerica NF的转换使线性模型拟合地更好，学习索引应该以新的视角重新思考。（我们提出了After-Flow Learned Index（AFLI），充分利用转换后的key）</li>\n</ul>\n<p><strong>方法</strong><br><img src=\"/../images/NFL-Robust-Learned-Index-via-Distribution-Transformation/1.jpg\" alt=\"img\"><br>以下两个是评价模型转换质量的指标<br><img src=\"/../images/NFL-Robust-Learned-Index-via-Distribution-Transformation/2.jpg\" alt=\"img\"></p>\n<p>Tail conflict degree：</p>\n<p>Numerical Normalizing Flow:<br>Feature Space Expansion:现有的NF大多用在cv和nlp领域，用于处理高纬的图片和文本，这些数据都有丰富的特征。然而keys都是数值数据，含有的特征较少。<br>使用Algorithm 3.1分布转换算法（对keys的数值特征进行扩展）<br><img src=\"/../images/NFL-Robust-Learned-Index-via-Distribution-Transformation/3.jpg\" alt=\"img\"></p>\n<p>特征扩展的时间复杂度为O（n x d）</p>\n<p><img src=\"/../images/NFL-Robust-Learned-Index-via-Distribution-Transformation/4.png\" alt=\"img\"></p>\n<p>Structure of AFLI：<br><img src=\"/../images/NFL-Robust-Learned-Index-via-Distribution-Transformation/5.jpg\" alt=\"img\"></p>\n<p><strong>Model node:</strong><br>Empty Slot：unused slot<br>Data Slot：key payload<br>Bucket Pointer: 指向一个bucket<br>Node Pointer：指向一个model node或者dense node<br><strong>Bucket:</strong><br>a short data array.它的size由tail conflict degree决定，但将保持在预设阈值范围内。我们提供两种桶，线性桶（默认）和有序桶</p>\n<p><strong>Dense node：</strong><br>Also a data array，比bucket大一点，但是比Model node小很多，是一个ordered and gapped array, gap的最大值由tail conflict degree</p>\n<p><strong>Analysis:</strong><br>当索引无法建立模型节点时，因为节点中的所有键都太近（即拟合线性模型的斜率为0），索引会分配一个dense array</p>\n<p><strong>Queries:</strong><br>（1）从root node开始查找，如果是model node，先用linear model预测position，判断它的类型，如果是empty slot，表示不存在；如果是data slot，比较是否是相同的key；如果是bucket pointer，在bucket中查找；如果是node pointer，递归操作<br>（2）如果node是dense node，使用二分查找查找这个结果。</p>\n<p><strong>Insertions:</strong><br>（1）如果key-payload pair被插入model node，先用linear model预测position</p>\n<ul>\n<li>如果是empty slot，直接存储key-payload</li>\n<li>如果是data slot，表明发生冲突，创建一个bucket来存储这两个key</li>\n<li>如果是bucket pointer或者node pointer，插入key-payload到bucket或者child node中<br>（2）插入到bucket中时，将key-payload会直接被加到sorted data的末尾；如果bucket是一个ordered mode，将会执行一次插入排序。<br>（3）插入到dense node中时，先在array上执行二分查找，如果那个position是一个empty slot，我们会直接插入key-payload pair；，否则会移动到最近的empty slot再插入。</li>\n</ul>\n<p>如果bucket或者dense node没有empty slots，我们尽量通过一个modeling operation将它转换为model node<br><img src=\"/../images/NFL-Robust-Learned-Index-via-Distribution-Transformation/6.jpg\" alt=\"img\"></p>\n<p><img src=\"/../images/NFL-Robust-Learned-Index-via-Distribution-Transformation/7.jpg\" alt=\"img\"><br><img src=\"/../images/NFL-Robust-Learned-Index-via-Distribution-Transformation/8.jpg\" alt=\"img\"></p>\n<p>我们首先一个使用线性回归创建线性模型（Line 1）<br>如果slope 为0（所有key被映射到一个相同的position），我们为创建一个dense node（Line 2 - 4）<br>否则如果我们成功创建一个linear model，就计算model node所有位置的conflict degree（Line 6）<br>然后我们遍历所有预测的位置，决定每个pos的entry type。如果conflict degree为1，我们直接在data slot存储该key；如果conflict degree大于1但是比bucket的tail confict degree小，存储在一个bucket中（Line 14 - 17）；<br>否则，如果某个position的confict degree比bucket的tail conflict degree大，找到下一个conflict degree也大于tail conflict degree的position或者到末尾，并将经过的position的key都收集起来，并分配一个新的节点来处理它们（第18 - 21行）<br>BulkLoad：首先计算tail conflict degree. The returned result is the root node.<br>Update: lookup + in-place update<br>Delete</p>\n<h2 id=\"结果：\"><a href=\"#结果：\" class=\"headerlink\" title=\"结果：\"></a>结果：</h2><p><strong>数据集：</strong><br>选取了7个不同的数据集进行评估<br>（Key的类型为double     payload的类型是int64）</p>\n<p>对每种类型的数据集构建了四种类型的工作负载</p>\n<p>每种工作负载包括 批量加载和运行阶段<br>我们使用批量加载操作来加载数据集的50%的key；在运行阶段，根据不同的操作比率生成请求</p>\n<ul>\n<li>只读</li>\n<li>读80% 写20%</li>\n<li>写 20% 读80%</li>\n<li>只写</li>\n</ul>\n<p>将NFL与LIPP、ALEX、PGM-index、B-Tree、an efficient B-Tree对比</p>\n<p><strong>平均吞吐量</strong><br><img src=\"/../images/NFL-Robust-Learned-Index-via-Distribution-Transformation/9.jpg\" alt=\"img\"></p>\n<ul>\n<li>只读：NFL与LIPP、ALEX、PGM、B-Tree相比，平均吞吐量分别提高了2.34倍、2.46倍、3.82倍、7.45倍；对于具有大冲突程度的工作负载（即LLT和FB），可以分别实现比LIPP、ALEX高2.41x和3.70x的吞吐量。</li>\n<li>重读：与LIPP、ALEX、PGM、B-Tree相比，NFL在吞吐量上分别提高72.22%、101.05%、611.48%、389.45%</li>\n<li>重写：与LIPP、ALEX、PGM、B-Tree相比，NFL在吞吐量上分别提高29.10%、39.28%、50.88%、162.92%</li>\n<li>只写：与LIPP、ALEX、B-Tree相比，NFL在吞吐量上分别提高22.65%、28.30%和131.58%</li>\n</ul>\n<p><strong>延迟</strong><br><img src=\"/../images/NFL-Robust-Learned-Index-via-Distribution-Transformation/10.jpg\" alt=\"img\"></p>\n<ul>\n<li>只读：与LIPP、ALEX、PGM index、B-Tree相比，NFL可以将延迟分别降低58.68%、32.89%、62.73%和80.77%</li>\n<li>读写：与LIPP、ALEX、PGM index和B-Tree相比，NFL可以将延迟分别降低26.64%、45.05%、59.49%、65.31%</li>\n<li>只写：与LIPP、ALEX、B-Tree相比，NFL可以将延迟减少2.26%、27.92%、50.48%</li>\n</ul>\n<p><strong>批量加载时间</strong><br><img src=\"/../images/NFL-Robust-Learned-Index-via-Distribution-Transformation/11.jpg\" alt=\"img\"></p>\n<p>与LIPP、ALEX、B-Tree相比，NFL需要2.25倍、0.86倍、2.81倍的大容量加载时间，其中77%的时间是用来转换key的</p>\n<p><strong>索引大小：</strong><br><img src=\"/../images/NFL-Robust-Learned-Index-via-Distribution-Transformation/12.jpg\" alt=\"img\"><br>NFL的指数大小分别是ALEX和PGM的2.26倍和3.1倍；然而，NFL的大小仅为LIPP大小的0.51</p>\n"},{"title":"SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models","date":"2023-12-06T06:02:09.000Z","_content":"\nSALI: A Scalable Adaptive Learned Index Framework based on \nProbability Models\n一个基于概率模型的可进化学习索引框架\n\n## 研究背景\nLI：只读\n可写：\n1.基于缓冲区的策略（插入时放入缓冲区，到达一个阈值后进行合并操作）\nXIndex、FINEdex\n2.基于模型的策略（就地插入）\nALEX（在插入冲突中，映射的slot已经被占用，通过移动来尝试重新组织节点）、\nLIPP（利用链接方案，为相应的时隙创建一个新节点，将最后一英里问题转化为子树遍历问题）\n\n## 问题描述\n![img](../images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/1.png)\n上述的索引结构都不能以高并发性进行扩展\n\n并发数较少的时候，与基于模型的策略（ALEX+、LIPP+）相比，基于缓冲区策略（XIndex、FINEdex）的索引表现出较差的基本性能和较差的扩展性；并且随着并发数的提高，“最后一英里问题”搜索会迅速饱和内存带宽，从而成为系统的瓶颈（ALEX+必须为此操作获取粗粒度写锁，线程数量增加时，越来越多的线程被阻塞）\n\nLIPP+没有最后一英里问题，但是它需要在每个节点中维护统计信息，如访问计数和冲突计数（以触发节点再训练，防止性能下降）。这些节点计数器在线程之间造成高争用。\n\n## 难点与分析过程\n我们需要设计一个满足如下要求的可扩展学习索引\n1.Efficient Concurrency高效并发：\n为了实现高效的插入性能，索引必须跟踪统计信息，这些信息反映了由于新的插入而导致的索引结构随时间的退化（这些信息对于触发节点再训练至关重要），但是节点计数器在线程之间会造成高争用，需要一种轻量级方法\n2.Adaptive ability适应能力\n与均匀工作负载相比，学习索引在倾斜插入工作负载下表现出次优性能。因此，学习索引需要有自适应能力以保证其在并发场景的鲁棒性。此外，学习的索引缺乏用于查找操作的优化策略。在偏斜的工作负载下，学习索引尚未充分利用显著降低索引空间成本的机会。\n\n3.Low overheads of basic performance基本性能的低开销\n(1)Efficient lookup\n实现高查找性能，通常取决于最大限度地减少查找的预测错误\n(2)Efficient insert\n采用基于模型的策略，而不是基于缓冲区的策略，通过在每个节点中保留间隙，可以显著提高学习索引的插入性能\n\n## 方法\n提出SALI\n1.利用LIPP+结构（使用细粒度锁）\n2.除了模型重训练以外定义一组节点进化策略，以允许学习到的索引自适应于不同的工作负载倾斜（建议对具有不同读写热度的节点应用不同的进化策略）\n3.用轻量级概率模型取代了现有学习索引中的每个节点的统计信息，以消除统计信息维护的可扩展性瓶颈\n\n![img](../images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/2.png)\n![img](../images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/3.png)\n\n![img](../images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/4.png)\n![img](../images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/5.png)\n\n进化策略：\n![img](../images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/6.png)\n![img](../images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/7.png)\n![img](../images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/8.png)\n\n![img](../images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/9.png)\n![img](../images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/10.png)\n![img](../images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/11.png)\n\n概率模型：\n为了确保最佳性能，学习索引必须监控退化统计信息，以便在必要时启动调整；另外，进化策略需要额外的统计信息。\n基本概念：模拟信息积累时利用概率\n\n例子：\n1.当模拟指定时间段内插入key的累积数量时，我们设计一个基于插入率和插入时间的概率模型\n2.几何分布可以用来模拟信息的累计（插入冲突等）\n\n触发insert evolution的条件\n\nCondition1：评估一个节点及其子树中新key插入的频率\n该节点容纳足够数量的新插入的key\n![img](../images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/12.png)\n\nn.current_num:是指在当前插入操作结束时节点中包含的key的数量\nn.build_num:是指上一次执行完进化策略后节点中的key的数量\n![img](../images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/13.png)\n\nCondition2：节点内冲突的升级（判断节点是否恶化）\nNode必须由足够的新插入的key\n![img](../images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/14.png)\n![img](../images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/15.png)\n\n**先计算Pconflict是否被触发，如果触发，再判断Pacc是否被触发，如果两个条件都被触发，执行进化策略**\n\n触发lookup evolution的条件\nPhl \n还需要考虑以下两个条件\nCondition1:\n再很长的一段时间内，节点上的查找操作没有触发进化策略\n\nCondition2:\n节点累计数据的速率并不慢\n\nFor condition1：如果一个节点的最后一次进化操作是由hot lookup触发的，这意味着自那以后没有插入操作触发该节点进化，即该节点没有严重恶化，并且新插入key的数量可能很少，可以将Phl调整到一个更小的值\n\n![img](../images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/16.png)\n\nFor condition2：引入Pacc，如果自上次进化操作以来插入了大量新的key，则表明可能需要进行新一轮的进化操作\n\n每个线程维护一个skip_counter，每次查找操作，skip_counter加1，10次查找操作后，执行一次伯努利实验来判断Phl是否被触发。如果Phl被触发，判断Pacc是否也被触发，如果触发，执行进化策略。\n","source":"_posts/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models.md","raw":"---\ntitle: SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models\ndate: 2023-12-05 22:02:09\ntags: Learned Index\ncategories: Learned Index\n---\n\nSALI: A Scalable Adaptive Learned Index Framework based on \nProbability Models\n一个基于概率模型的可进化学习索引框架\n\n## 研究背景\nLI：只读\n可写：\n1.基于缓冲区的策略（插入时放入缓冲区，到达一个阈值后进行合并操作）\nXIndex、FINEdex\n2.基于模型的策略（就地插入）\nALEX（在插入冲突中，映射的slot已经被占用，通过移动来尝试重新组织节点）、\nLIPP（利用链接方案，为相应的时隙创建一个新节点，将最后一英里问题转化为子树遍历问题）\n\n## 问题描述\n![img](../images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/1.png)\n上述的索引结构都不能以高并发性进行扩展\n\n并发数较少的时候，与基于模型的策略（ALEX+、LIPP+）相比，基于缓冲区策略（XIndex、FINEdex）的索引表现出较差的基本性能和较差的扩展性；并且随着并发数的提高，“最后一英里问题”搜索会迅速饱和内存带宽，从而成为系统的瓶颈（ALEX+必须为此操作获取粗粒度写锁，线程数量增加时，越来越多的线程被阻塞）\n\nLIPP+没有最后一英里问题，但是它需要在每个节点中维护统计信息，如访问计数和冲突计数（以触发节点再训练，防止性能下降）。这些节点计数器在线程之间造成高争用。\n\n## 难点与分析过程\n我们需要设计一个满足如下要求的可扩展学习索引\n1.Efficient Concurrency高效并发：\n为了实现高效的插入性能，索引必须跟踪统计信息，这些信息反映了由于新的插入而导致的索引结构随时间的退化（这些信息对于触发节点再训练至关重要），但是节点计数器在线程之间会造成高争用，需要一种轻量级方法\n2.Adaptive ability适应能力\n与均匀工作负载相比，学习索引在倾斜插入工作负载下表现出次优性能。因此，学习索引需要有自适应能力以保证其在并发场景的鲁棒性。此外，学习的索引缺乏用于查找操作的优化策略。在偏斜的工作负载下，学习索引尚未充分利用显著降低索引空间成本的机会。\n\n3.Low overheads of basic performance基本性能的低开销\n(1)Efficient lookup\n实现高查找性能，通常取决于最大限度地减少查找的预测错误\n(2)Efficient insert\n采用基于模型的策略，而不是基于缓冲区的策略，通过在每个节点中保留间隙，可以显著提高学习索引的插入性能\n\n## 方法\n提出SALI\n1.利用LIPP+结构（使用细粒度锁）\n2.除了模型重训练以外定义一组节点进化策略，以允许学习到的索引自适应于不同的工作负载倾斜（建议对具有不同读写热度的节点应用不同的进化策略）\n3.用轻量级概率模型取代了现有学习索引中的每个节点的统计信息，以消除统计信息维护的可扩展性瓶颈\n\n![img](../images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/2.png)\n![img](../images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/3.png)\n\n![img](../images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/4.png)\n![img](../images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/5.png)\n\n进化策略：\n![img](../images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/6.png)\n![img](../images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/7.png)\n![img](../images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/8.png)\n\n![img](../images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/9.png)\n![img](../images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/10.png)\n![img](../images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/11.png)\n\n概率模型：\n为了确保最佳性能，学习索引必须监控退化统计信息，以便在必要时启动调整；另外，进化策略需要额外的统计信息。\n基本概念：模拟信息积累时利用概率\n\n例子：\n1.当模拟指定时间段内插入key的累积数量时，我们设计一个基于插入率和插入时间的概率模型\n2.几何分布可以用来模拟信息的累计（插入冲突等）\n\n触发insert evolution的条件\n\nCondition1：评估一个节点及其子树中新key插入的频率\n该节点容纳足够数量的新插入的key\n![img](../images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/12.png)\n\nn.current_num:是指在当前插入操作结束时节点中包含的key的数量\nn.build_num:是指上一次执行完进化策略后节点中的key的数量\n![img](../images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/13.png)\n\nCondition2：节点内冲突的升级（判断节点是否恶化）\nNode必须由足够的新插入的key\n![img](../images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/14.png)\n![img](../images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/15.png)\n\n**先计算Pconflict是否被触发，如果触发，再判断Pacc是否被触发，如果两个条件都被触发，执行进化策略**\n\n触发lookup evolution的条件\nPhl \n还需要考虑以下两个条件\nCondition1:\n再很长的一段时间内，节点上的查找操作没有触发进化策略\n\nCondition2:\n节点累计数据的速率并不慢\n\nFor condition1：如果一个节点的最后一次进化操作是由hot lookup触发的，这意味着自那以后没有插入操作触发该节点进化，即该节点没有严重恶化，并且新插入key的数量可能很少，可以将Phl调整到一个更小的值\n\n![img](../images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/16.png)\n\nFor condition2：引入Pacc，如果自上次进化操作以来插入了大量新的key，则表明可能需要进行新一轮的进化操作\n\n每个线程维护一个skip_counter，每次查找操作，skip_counter加1，10次查找操作后，执行一次伯努利实验来判断Phl是否被触发。如果Phl被触发，判断Pacc是否也被触发，如果触发，执行进化策略。\n","slug":"SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models","published":1,"updated":"2024-02-26T07:45:34.714Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt2vlxyj00084ijx3tvb7taj","content":"<p>SALI: A Scalable Adaptive Learned Index Framework based on<br>Probability Models<br>一个基于概率模型的可进化学习索引框架</p>\n<h2 id=\"研究背景\"><a href=\"#研究背景\" class=\"headerlink\" title=\"研究背景\"></a>研究背景</h2><p>LI：只读<br>可写：<br>1.基于缓冲区的策略（插入时放入缓冲区，到达一个阈值后进行合并操作）<br>XIndex、FINEdex<br>2.基于模型的策略（就地插入）<br>ALEX（在插入冲突中，映射的slot已经被占用，通过移动来尝试重新组织节点）、<br>LIPP（利用链接方案，为相应的时隙创建一个新节点，将最后一英里问题转化为子树遍历问题）</p>\n<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p><img src=\"/../images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/1.png\" alt=\"img\"><br>上述的索引结构都不能以高并发性进行扩展</p>\n<p>并发数较少的时候，与基于模型的策略（ALEX+、LIPP+）相比，基于缓冲区策略（XIndex、FINEdex）的索引表现出较差的基本性能和较差的扩展性；并且随着并发数的提高，“最后一英里问题”搜索会迅速饱和内存带宽，从而成为系统的瓶颈（ALEX+必须为此操作获取粗粒度写锁，线程数量增加时，越来越多的线程被阻塞）</p>\n<p>LIPP+没有最后一英里问题，但是它需要在每个节点中维护统计信息，如访问计数和冲突计数（以触发节点再训练，防止性能下降）。这些节点计数器在线程之间造成高争用。</p>\n<h2 id=\"难点与分析过程\"><a href=\"#难点与分析过程\" class=\"headerlink\" title=\"难点与分析过程\"></a>难点与分析过程</h2><p>我们需要设计一个满足如下要求的可扩展学习索引<br>1.Efficient Concurrency高效并发：<br>为了实现高效的插入性能，索引必须跟踪统计信息，这些信息反映了由于新的插入而导致的索引结构随时间的退化（这些信息对于触发节点再训练至关重要），但是节点计数器在线程之间会造成高争用，需要一种轻量级方法<br>2.Adaptive ability适应能力<br>与均匀工作负载相比，学习索引在倾斜插入工作负载下表现出次优性能。因此，学习索引需要有自适应能力以保证其在并发场景的鲁棒性。此外，学习的索引缺乏用于查找操作的优化策略。在偏斜的工作负载下，学习索引尚未充分利用显著降低索引空间成本的机会。</p>\n<p>3.Low overheads of basic performance基本性能的低开销<br>(1)Efficient lookup<br>实现高查找性能，通常取决于最大限度地减少查找的预测错误<br>(2)Efficient insert<br>采用基于模型的策略，而不是基于缓冲区的策略，通过在每个节点中保留间隙，可以显著提高学习索引的插入性能</p>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><p>提出SALI<br>1.利用LIPP+结构（使用细粒度锁）<br>2.除了模型重训练以外定义一组节点进化策略，以允许学习到的索引自适应于不同的工作负载倾斜（建议对具有不同读写热度的节点应用不同的进化策略）<br>3.用轻量级概率模型取代了现有学习索引中的每个节点的统计信息，以消除统计信息维护的可扩展性瓶颈</p>\n<p><img src=\"/../images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/2.png\" alt=\"img\"><br><img src=\"/../images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/3.png\" alt=\"img\"></p>\n<p><img src=\"/../images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/4.png\" alt=\"img\"><br><img src=\"/../images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/5.png\" alt=\"img\"></p>\n<p>进化策略：<br><img src=\"/../images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/6.png\" alt=\"img\"><br><img src=\"/../images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/7.png\" alt=\"img\"><br><img src=\"/../images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/8.png\" alt=\"img\"></p>\n<p><img src=\"/../images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/9.png\" alt=\"img\"><br><img src=\"/../images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/10.png\" alt=\"img\"><br><img src=\"/../images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/11.png\" alt=\"img\"></p>\n<p>概率模型：<br>为了确保最佳性能，学习索引必须监控退化统计信息，以便在必要时启动调整；另外，进化策略需要额外的统计信息。<br>基本概念：模拟信息积累时利用概率</p>\n<p>例子：<br>1.当模拟指定时间段内插入key的累积数量时，我们设计一个基于插入率和插入时间的概率模型<br>2.几何分布可以用来模拟信息的累计（插入冲突等）</p>\n<p>触发insert evolution的条件</p>\n<p>Condition1：评估一个节点及其子树中新key插入的频率<br>该节点容纳足够数量的新插入的key<br><img src=\"/../images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/12.png\" alt=\"img\"></p>\n<p>n.current_num:是指在当前插入操作结束时节点中包含的key的数量<br>n.build_num:是指上一次执行完进化策略后节点中的key的数量<br><img src=\"/../images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/13.png\" alt=\"img\"></p>\n<p>Condition2：节点内冲突的升级（判断节点是否恶化）<br>Node必须由足够的新插入的key<br><img src=\"/../images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/14.png\" alt=\"img\"><br><img src=\"/../images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/15.png\" alt=\"img\"></p>\n<p><strong>先计算Pconflict是否被触发，如果触发，再判断Pacc是否被触发，如果两个条件都被触发，执行进化策略</strong></p>\n<p>触发lookup evolution的条件<br>Phl<br>还需要考虑以下两个条件<br>Condition1:<br>再很长的一段时间内，节点上的查找操作没有触发进化策略</p>\n<p>Condition2:<br>节点累计数据的速率并不慢</p>\n<p>For condition1：如果一个节点的最后一次进化操作是由hot lookup触发的，这意味着自那以后没有插入操作触发该节点进化，即该节点没有严重恶化，并且新插入key的数量可能很少，可以将Phl调整到一个更小的值</p>\n<p><img src=\"/../images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/16.png\" alt=\"img\"></p>\n<p>For condition2：引入Pacc，如果自上次进化操作以来插入了大量新的key，则表明可能需要进行新一轮的进化操作</p>\n<p>每个线程维护一个skip_counter，每次查找操作，skip_counter加1，10次查找操作后，执行一次伯努利实验来判断Phl是否被触发。如果Phl被触发，判断Pacc是否也被触发，如果触发，执行进化策略。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>SALI: A Scalable Adaptive Learned Index Framework based on<br>Probability Models<br>一个基于概率模型的可进化学习索引框架</p>\n<h2 id=\"研究背景\"><a href=\"#研究背景\" class=\"headerlink\" title=\"研究背景\"></a>研究背景</h2><p>LI：只读<br>可写：<br>1.基于缓冲区的策略（插入时放入缓冲区，到达一个阈值后进行合并操作）<br>XIndex、FINEdex<br>2.基于模型的策略（就地插入）<br>ALEX（在插入冲突中，映射的slot已经被占用，通过移动来尝试重新组织节点）、<br>LIPP（利用链接方案，为相应的时隙创建一个新节点，将最后一英里问题转化为子树遍历问题）</p>\n<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p><img src=\"/../images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/1.png\" alt=\"img\"><br>上述的索引结构都不能以高并发性进行扩展</p>\n<p>并发数较少的时候，与基于模型的策略（ALEX+、LIPP+）相比，基于缓冲区策略（XIndex、FINEdex）的索引表现出较差的基本性能和较差的扩展性；并且随着并发数的提高，“最后一英里问题”搜索会迅速饱和内存带宽，从而成为系统的瓶颈（ALEX+必须为此操作获取粗粒度写锁，线程数量增加时，越来越多的线程被阻塞）</p>\n<p>LIPP+没有最后一英里问题，但是它需要在每个节点中维护统计信息，如访问计数和冲突计数（以触发节点再训练，防止性能下降）。这些节点计数器在线程之间造成高争用。</p>\n<h2 id=\"难点与分析过程\"><a href=\"#难点与分析过程\" class=\"headerlink\" title=\"难点与分析过程\"></a>难点与分析过程</h2><p>我们需要设计一个满足如下要求的可扩展学习索引<br>1.Efficient Concurrency高效并发：<br>为了实现高效的插入性能，索引必须跟踪统计信息，这些信息反映了由于新的插入而导致的索引结构随时间的退化（这些信息对于触发节点再训练至关重要），但是节点计数器在线程之间会造成高争用，需要一种轻量级方法<br>2.Adaptive ability适应能力<br>与均匀工作负载相比，学习索引在倾斜插入工作负载下表现出次优性能。因此，学习索引需要有自适应能力以保证其在并发场景的鲁棒性。此外，学习的索引缺乏用于查找操作的优化策略。在偏斜的工作负载下，学习索引尚未充分利用显著降低索引空间成本的机会。</p>\n<p>3.Low overheads of basic performance基本性能的低开销<br>(1)Efficient lookup<br>实现高查找性能，通常取决于最大限度地减少查找的预测错误<br>(2)Efficient insert<br>采用基于模型的策略，而不是基于缓冲区的策略，通过在每个节点中保留间隙，可以显著提高学习索引的插入性能</p>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><p>提出SALI<br>1.利用LIPP+结构（使用细粒度锁）<br>2.除了模型重训练以外定义一组节点进化策略，以允许学习到的索引自适应于不同的工作负载倾斜（建议对具有不同读写热度的节点应用不同的进化策略）<br>3.用轻量级概率模型取代了现有学习索引中的每个节点的统计信息，以消除统计信息维护的可扩展性瓶颈</p>\n<p><img src=\"/../images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/2.png\" alt=\"img\"><br><img src=\"/../images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/3.png\" alt=\"img\"></p>\n<p><img src=\"/../images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/4.png\" alt=\"img\"><br><img src=\"/../images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/5.png\" alt=\"img\"></p>\n<p>进化策略：<br><img src=\"/../images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/6.png\" alt=\"img\"><br><img src=\"/../images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/7.png\" alt=\"img\"><br><img src=\"/../images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/8.png\" alt=\"img\"></p>\n<p><img src=\"/../images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/9.png\" alt=\"img\"><br><img src=\"/../images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/10.png\" alt=\"img\"><br><img src=\"/../images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/11.png\" alt=\"img\"></p>\n<p>概率模型：<br>为了确保最佳性能，学习索引必须监控退化统计信息，以便在必要时启动调整；另外，进化策略需要额外的统计信息。<br>基本概念：模拟信息积累时利用概率</p>\n<p>例子：<br>1.当模拟指定时间段内插入key的累积数量时，我们设计一个基于插入率和插入时间的概率模型<br>2.几何分布可以用来模拟信息的累计（插入冲突等）</p>\n<p>触发insert evolution的条件</p>\n<p>Condition1：评估一个节点及其子树中新key插入的频率<br>该节点容纳足够数量的新插入的key<br><img src=\"/../images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/12.png\" alt=\"img\"></p>\n<p>n.current_num:是指在当前插入操作结束时节点中包含的key的数量<br>n.build_num:是指上一次执行完进化策略后节点中的key的数量<br><img src=\"/../images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/13.png\" alt=\"img\"></p>\n<p>Condition2：节点内冲突的升级（判断节点是否恶化）<br>Node必须由足够的新插入的key<br><img src=\"/../images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/14.png\" alt=\"img\"><br><img src=\"/../images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/15.png\" alt=\"img\"></p>\n<p><strong>先计算Pconflict是否被触发，如果触发，再判断Pacc是否被触发，如果两个条件都被触发，执行进化策略</strong></p>\n<p>触发lookup evolution的条件<br>Phl<br>还需要考虑以下两个条件<br>Condition1:<br>再很长的一段时间内，节点上的查找操作没有触发进化策略</p>\n<p>Condition2:<br>节点累计数据的速率并不慢</p>\n<p>For condition1：如果一个节点的最后一次进化操作是由hot lookup触发的，这意味着自那以后没有插入操作触发该节点进化，即该节点没有严重恶化，并且新插入key的数量可能很少，可以将Phl调整到一个更小的值</p>\n<p><img src=\"/../images/SALI-A-Scalable-Adaptive-Learned-Index-Framework-based-on-Probability-Models/16.png\" alt=\"img\"></p>\n<p>For condition2：引入Pacc，如果自上次进化操作以来插入了大量新的key，则表明可能需要进行新一轮的进化操作</p>\n<p>每个线程维护一个skip_counter，每次查找操作，skip_counter加1，10次查找操作后，执行一次伯努利实验来判断Phl是否被触发。如果Phl被触发，判断Pacc是否也被触发，如果触发，执行进化策略。</p>\n"},{"title":"The-PGM-index-a-fully-dynamic-compressed-learned-index-with-provable-worst-case-bounds","date":"2023-10-05T09:06:39.000Z","_content":"\n## INTRODUCTION\nPGM == PieceWise Geometric Model 分段几何模型\n关键词：dynamic(表示PGM-index除了支持查询还支持插入和删除)、compressed(表示还对模型进行了压缩，达到更好的空间效率)\n\n本文的注意力集中在解决所谓的全动态可索引字典问题。这个问题要求存储多重集S，以便有效支持以下查询和更新操作\n\n1. member (x) = true if x ∈ S, false otherwise;\n2. lookup(x) returns the satellite data of x ∈ S (if any), nil otherwise;\n3. predecessor (x) = max{y ∈ S | y < x};\n4. range(x, y) = S ∩ [x, y];\n5. insert(x) adds x to S, i.e. S ← S ∪ {x};\n6. delete(x) removes x from S, i.e. S ← S \\ {x}.\n- member(x)，判断关键字x是否属于多重集S\n- lookup(x)，给定一个key，若该key已被插入，则返回其value\n- predecessor(x)，翻译软件叫“前任”，返回所有小于x的数据中最大的那个，其实可以简单理解为排好序的数组中，x的前一个数据\n- range(x, y)，范围查询，给出[x, y]关键字x和y之间的所有对应的value\n- insert和delete很好理解，插入和删除对应的（K, V）\n\n本文将 member,lookup,predecessor称为点查询，range称为范围查询\n对于点查询和范围查询只要实现rank(x)\nmember(x) <--> A[rank(x)] == x\npredecessor(x) <-->A[rank(x) - 1]\nrange(x, y) <--> 从rank(x)对应的A数组的位置开始向后查找直到key大于y为止\n\n现存的解决上述问题的经典索引数据结构：（1）哈希索引（2）B树（3）位图索引（4）字典树trie索引\n哈希索引不支持predecesor和range，位图索引维护成本过高，字典树空间消耗过大，主流数据库还是使用B树及其变种作为存储引擎\n\n本文提出的PGM-Index不像RMI和FITing-Tree那样混合了传统的索引和学习型索引。(RMI的最后一个stage中的模型若error超过阈值，则将模型替换为B+树，FITing-Tree在确定segment时也是查找B+树)\n\n## PGM-Index\n两个关键点：\n> 1.PLA-Model(Piecewise Linear Approximation model, 分段线性近似模型)\n\n这里使用了多个线性模型(segment, FITing-Tree中的分段线性模型)组成了一个PLA-Model(PGM-Index中的一层)，一个segment包含了三部分(start key, slope, intercept)\n\n> 2.recursive index structure (递归索引结构)\n\n为了适应key的分布，PGM-Index使用了多层PLA-Model，我们先使用所有的key来构建最底层的PLA-Model，然后提取Segment中的key形成新的集合，然后对该集合再次构建PLA-Model，如此递归直到最高层的PLA-Model只有一个segment\n\n下图包含了PGM-Index的构建伪代码，查找伪代码和查找示意图\n![img](../images/The-PGM-index-a-fully-dynamic-compressed-learned-index-with-provable-worst-case-bounds/1.png)\n\n### Optimal PLA-model\n找到最优的PLA-model的方法是动态规划，但它所需要的O(n^3)是禁止的。FITing-Tree的作者通过收缩锥的方式来在线性时间内解决这个问题但无法保证是最优的PLA-model\n\n然而我们发现这个问题在时间序列的有损压缩和相似性搜索中得到了广泛的研究，并且它允许采用O(n)最优时间和空间的流媒体算法。这类方法的关键思想是将分段线性近似问题简化为构造一组点的凸包在我们的情况下，这是集合{(ki，rank(ki))}为i = 0，…，n−1。只要凸包可以被封闭在一个高度不超过2ε的（可能是旋转的）矩形中，索引i就会递增，集合就会被扩展。一旦包围凸壳的矩形高于2ε，我们就停止构造，通过取将矩形分成两个等尺寸的半的线来确定pla模型的一部分。然后，清空当前的处理元素集，算法从其余的输入点重新启动。这种贪婪方法可以被证明在pla模型的大小上是最优的，并且具有线性的时间和空间复杂度。\n\n## DYNAMIC PGM-INDEX\n\n插入和删除操作\n\n现有学习型索引插入操作的实现方案是，将元素按序插入到相应段的缓存中，当缓存满了，将缓存与主索引合并，合并需要重新训练。这个方案在key非常多时，效率较低。本文提出两个插入策略：（1）面向时序数据（2）面向一般数据\n\n- 如果是时间序列的数据，插入的数据肯定是在数组A的最后面，那么如果最后一个段能够存放这个数据，且满足ε的条件，就直接放在最后一个段；否则新建一个段，然后向上层一层一层更新Segment。在这种策略下，每层更新最多只涉及到一个Segment的添加，因此需要的I/O少。\n- 如果是一般的数据，即插入的位置可以是任意的。这里则采用LSM-Tree更新数据的思想。\n\n![img](../images/The-PGM-index-a-fully-dynamic-compressed-learned-index-with-provable-worst-case-bounds/2.png)\n\n## COMPRESSED PGM-INDEX\n","source":"_posts/The-PGM-index-a-fully-dynamic-compressed-learned-index-with-provable-worst-case-bounds.md","raw":"---\ntitle: >-\n  The-PGM-index-a-fully-dynamic-compressed-learned-index-with-provable-worst-case-bounds\ndate: 2023-10-05 02:06:39\ntags: Learned Index\ncategories: Learned Index\n---\n\n## INTRODUCTION\nPGM == PieceWise Geometric Model 分段几何模型\n关键词：dynamic(表示PGM-index除了支持查询还支持插入和删除)、compressed(表示还对模型进行了压缩，达到更好的空间效率)\n\n本文的注意力集中在解决所谓的全动态可索引字典问题。这个问题要求存储多重集S，以便有效支持以下查询和更新操作\n\n1. member (x) = true if x ∈ S, false otherwise;\n2. lookup(x) returns the satellite data of x ∈ S (if any), nil otherwise;\n3. predecessor (x) = max{y ∈ S | y < x};\n4. range(x, y) = S ∩ [x, y];\n5. insert(x) adds x to S, i.e. S ← S ∪ {x};\n6. delete(x) removes x from S, i.e. S ← S \\ {x}.\n- member(x)，判断关键字x是否属于多重集S\n- lookup(x)，给定一个key，若该key已被插入，则返回其value\n- predecessor(x)，翻译软件叫“前任”，返回所有小于x的数据中最大的那个，其实可以简单理解为排好序的数组中，x的前一个数据\n- range(x, y)，范围查询，给出[x, y]关键字x和y之间的所有对应的value\n- insert和delete很好理解，插入和删除对应的（K, V）\n\n本文将 member,lookup,predecessor称为点查询，range称为范围查询\n对于点查询和范围查询只要实现rank(x)\nmember(x) <--> A[rank(x)] == x\npredecessor(x) <-->A[rank(x) - 1]\nrange(x, y) <--> 从rank(x)对应的A数组的位置开始向后查找直到key大于y为止\n\n现存的解决上述问题的经典索引数据结构：（1）哈希索引（2）B树（3）位图索引（4）字典树trie索引\n哈希索引不支持predecesor和range，位图索引维护成本过高，字典树空间消耗过大，主流数据库还是使用B树及其变种作为存储引擎\n\n本文提出的PGM-Index不像RMI和FITing-Tree那样混合了传统的索引和学习型索引。(RMI的最后一个stage中的模型若error超过阈值，则将模型替换为B+树，FITing-Tree在确定segment时也是查找B+树)\n\n## PGM-Index\n两个关键点：\n> 1.PLA-Model(Piecewise Linear Approximation model, 分段线性近似模型)\n\n这里使用了多个线性模型(segment, FITing-Tree中的分段线性模型)组成了一个PLA-Model(PGM-Index中的一层)，一个segment包含了三部分(start key, slope, intercept)\n\n> 2.recursive index structure (递归索引结构)\n\n为了适应key的分布，PGM-Index使用了多层PLA-Model，我们先使用所有的key来构建最底层的PLA-Model，然后提取Segment中的key形成新的集合，然后对该集合再次构建PLA-Model，如此递归直到最高层的PLA-Model只有一个segment\n\n下图包含了PGM-Index的构建伪代码，查找伪代码和查找示意图\n![img](../images/The-PGM-index-a-fully-dynamic-compressed-learned-index-with-provable-worst-case-bounds/1.png)\n\n### Optimal PLA-model\n找到最优的PLA-model的方法是动态规划，但它所需要的O(n^3)是禁止的。FITing-Tree的作者通过收缩锥的方式来在线性时间内解决这个问题但无法保证是最优的PLA-model\n\n然而我们发现这个问题在时间序列的有损压缩和相似性搜索中得到了广泛的研究，并且它允许采用O(n)最优时间和空间的流媒体算法。这类方法的关键思想是将分段线性近似问题简化为构造一组点的凸包在我们的情况下，这是集合{(ki，rank(ki))}为i = 0，…，n−1。只要凸包可以被封闭在一个高度不超过2ε的（可能是旋转的）矩形中，索引i就会递增，集合就会被扩展。一旦包围凸壳的矩形高于2ε，我们就停止构造，通过取将矩形分成两个等尺寸的半的线来确定pla模型的一部分。然后，清空当前的处理元素集，算法从其余的输入点重新启动。这种贪婪方法可以被证明在pla模型的大小上是最优的，并且具有线性的时间和空间复杂度。\n\n## DYNAMIC PGM-INDEX\n\n插入和删除操作\n\n现有学习型索引插入操作的实现方案是，将元素按序插入到相应段的缓存中，当缓存满了，将缓存与主索引合并，合并需要重新训练。这个方案在key非常多时，效率较低。本文提出两个插入策略：（1）面向时序数据（2）面向一般数据\n\n- 如果是时间序列的数据，插入的数据肯定是在数组A的最后面，那么如果最后一个段能够存放这个数据，且满足ε的条件，就直接放在最后一个段；否则新建一个段，然后向上层一层一层更新Segment。在这种策略下，每层更新最多只涉及到一个Segment的添加，因此需要的I/O少。\n- 如果是一般的数据，即插入的位置可以是任意的。这里则采用LSM-Tree更新数据的思想。\n\n![img](../images/The-PGM-index-a-fully-dynamic-compressed-learned-index-with-provable-worst-case-bounds/2.png)\n\n## COMPRESSED PGM-INDEX\n","slug":"The-PGM-index-a-fully-dynamic-compressed-learned-index-with-provable-worst-case-bounds","published":1,"updated":"2024-02-26T07:45:34.714Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt2vlxyk000b4ijxhd3cdmxo","content":"<h2 id=\"INTRODUCTION\"><a href=\"#INTRODUCTION\" class=\"headerlink\" title=\"INTRODUCTION\"></a>INTRODUCTION</h2><p>PGM &#x3D;&#x3D; PieceWise Geometric Model 分段几何模型<br>关键词：dynamic(表示PGM-index除了支持查询还支持插入和删除)、compressed(表示还对模型进行了压缩，达到更好的空间效率)</p>\n<p>本文的注意力集中在解决所谓的全动态可索引字典问题。这个问题要求存储多重集S，以便有效支持以下查询和更新操作</p>\n<ol>\n<li>member (x) &#x3D; true if x ∈ S, false otherwise;</li>\n<li>lookup(x) returns the satellite data of x ∈ S (if any), nil otherwise;</li>\n<li>predecessor (x) &#x3D; max{y ∈ S | y &lt; x};</li>\n<li>range(x, y) &#x3D; S ∩ [x, y];</li>\n<li>insert(x) adds x to S, i.e. S ← S ∪ {x};</li>\n<li>delete(x) removes x from S, i.e. S ← S \\ {x}.</li>\n</ol>\n<ul>\n<li>member(x)，判断关键字x是否属于多重集S</li>\n<li>lookup(x)，给定一个key，若该key已被插入，则返回其value</li>\n<li>predecessor(x)，翻译软件叫“前任”，返回所有小于x的数据中最大的那个，其实可以简单理解为排好序的数组中，x的前一个数据</li>\n<li>range(x, y)，范围查询，给出[x, y]关键字x和y之间的所有对应的value</li>\n<li>insert和delete很好理解，插入和删除对应的（K, V）</li>\n</ul>\n<p>本文将 member,lookup,predecessor称为点查询，range称为范围查询<br>对于点查询和范围查询只要实现rank(x)<br>member(x) &lt;–&gt; A[rank(x)] &#x3D;&#x3D; x<br>predecessor(x) &lt;–&gt;A[rank(x) - 1]<br>range(x, y) &lt;–&gt; 从rank(x)对应的A数组的位置开始向后查找直到key大于y为止</p>\n<p>现存的解决上述问题的经典索引数据结构：（1）哈希索引（2）B树（3）位图索引（4）字典树trie索引<br>哈希索引不支持predecesor和range，位图索引维护成本过高，字典树空间消耗过大，主流数据库还是使用B树及其变种作为存储引擎</p>\n<p>本文提出的PGM-Index不像RMI和FITing-Tree那样混合了传统的索引和学习型索引。(RMI的最后一个stage中的模型若error超过阈值，则将模型替换为B+树，FITing-Tree在确定segment时也是查找B+树)</p>\n<h2 id=\"PGM-Index\"><a href=\"#PGM-Index\" class=\"headerlink\" title=\"PGM-Index\"></a>PGM-Index</h2><p>两个关键点：</p>\n<blockquote>\n<p>1.PLA-Model(Piecewise Linear Approximation model, 分段线性近似模型)</p>\n</blockquote>\n<p>这里使用了多个线性模型(segment, FITing-Tree中的分段线性模型)组成了一个PLA-Model(PGM-Index中的一层)，一个segment包含了三部分(start key, slope, intercept)</p>\n<blockquote>\n<p>2.recursive index structure (递归索引结构)</p>\n</blockquote>\n<p>为了适应key的分布，PGM-Index使用了多层PLA-Model，我们先使用所有的key来构建最底层的PLA-Model，然后提取Segment中的key形成新的集合，然后对该集合再次构建PLA-Model，如此递归直到最高层的PLA-Model只有一个segment</p>\n<p>下图包含了PGM-Index的构建伪代码，查找伪代码和查找示意图<br><img src=\"/../images/The-PGM-index-a-fully-dynamic-compressed-learned-index-with-provable-worst-case-bounds/1.png\" alt=\"img\"></p>\n<h3 id=\"Optimal-PLA-model\"><a href=\"#Optimal-PLA-model\" class=\"headerlink\" title=\"Optimal PLA-model\"></a>Optimal PLA-model</h3><p>找到最优的PLA-model的方法是动态规划，但它所需要的O(n^3)是禁止的。FITing-Tree的作者通过收缩锥的方式来在线性时间内解决这个问题但无法保证是最优的PLA-model</p>\n<p>然而我们发现这个问题在时间序列的有损压缩和相似性搜索中得到了广泛的研究，并且它允许采用O(n)最优时间和空间的流媒体算法。这类方法的关键思想是将分段线性近似问题简化为构造一组点的凸包在我们的情况下，这是集合{(ki，rank(ki))}为i &#x3D; 0，…，n−1。只要凸包可以被封闭在一个高度不超过2ε的（可能是旋转的）矩形中，索引i就会递增，集合就会被扩展。一旦包围凸壳的矩形高于2ε，我们就停止构造，通过取将矩形分成两个等尺寸的半的线来确定pla模型的一部分。然后，清空当前的处理元素集，算法从其余的输入点重新启动。这种贪婪方法可以被证明在pla模型的大小上是最优的，并且具有线性的时间和空间复杂度。</p>\n<h2 id=\"DYNAMIC-PGM-INDEX\"><a href=\"#DYNAMIC-PGM-INDEX\" class=\"headerlink\" title=\"DYNAMIC PGM-INDEX\"></a>DYNAMIC PGM-INDEX</h2><p>插入和删除操作</p>\n<p>现有学习型索引插入操作的实现方案是，将元素按序插入到相应段的缓存中，当缓存满了，将缓存与主索引合并，合并需要重新训练。这个方案在key非常多时，效率较低。本文提出两个插入策略：（1）面向时序数据（2）面向一般数据</p>\n<ul>\n<li>如果是时间序列的数据，插入的数据肯定是在数组A的最后面，那么如果最后一个段能够存放这个数据，且满足ε的条件，就直接放在最后一个段；否则新建一个段，然后向上层一层一层更新Segment。在这种策略下，每层更新最多只涉及到一个Segment的添加，因此需要的I&#x2F;O少。</li>\n<li>如果是一般的数据，即插入的位置可以是任意的。这里则采用LSM-Tree更新数据的思想。</li>\n</ul>\n<p><img src=\"/../images/The-PGM-index-a-fully-dynamic-compressed-learned-index-with-provable-worst-case-bounds/2.png\" alt=\"img\"></p>\n<h2 id=\"COMPRESSED-PGM-INDEX\"><a href=\"#COMPRESSED-PGM-INDEX\" class=\"headerlink\" title=\"COMPRESSED PGM-INDEX\"></a>COMPRESSED PGM-INDEX</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"INTRODUCTION\"><a href=\"#INTRODUCTION\" class=\"headerlink\" title=\"INTRODUCTION\"></a>INTRODUCTION</h2><p>PGM &#x3D;&#x3D; PieceWise Geometric Model 分段几何模型<br>关键词：dynamic(表示PGM-index除了支持查询还支持插入和删除)、compressed(表示还对模型进行了压缩，达到更好的空间效率)</p>\n<p>本文的注意力集中在解决所谓的全动态可索引字典问题。这个问题要求存储多重集S，以便有效支持以下查询和更新操作</p>\n<ol>\n<li>member (x) &#x3D; true if x ∈ S, false otherwise;</li>\n<li>lookup(x) returns the satellite data of x ∈ S (if any), nil otherwise;</li>\n<li>predecessor (x) &#x3D; max{y ∈ S | y &lt; x};</li>\n<li>range(x, y) &#x3D; S ∩ [x, y];</li>\n<li>insert(x) adds x to S, i.e. S ← S ∪ {x};</li>\n<li>delete(x) removes x from S, i.e. S ← S \\ {x}.</li>\n</ol>\n<ul>\n<li>member(x)，判断关键字x是否属于多重集S</li>\n<li>lookup(x)，给定一个key，若该key已被插入，则返回其value</li>\n<li>predecessor(x)，翻译软件叫“前任”，返回所有小于x的数据中最大的那个，其实可以简单理解为排好序的数组中，x的前一个数据</li>\n<li>range(x, y)，范围查询，给出[x, y]关键字x和y之间的所有对应的value</li>\n<li>insert和delete很好理解，插入和删除对应的（K, V）</li>\n</ul>\n<p>本文将 member,lookup,predecessor称为点查询，range称为范围查询<br>对于点查询和范围查询只要实现rank(x)<br>member(x) &lt;–&gt; A[rank(x)] &#x3D;&#x3D; x<br>predecessor(x) &lt;–&gt;A[rank(x) - 1]<br>range(x, y) &lt;–&gt; 从rank(x)对应的A数组的位置开始向后查找直到key大于y为止</p>\n<p>现存的解决上述问题的经典索引数据结构：（1）哈希索引（2）B树（3）位图索引（4）字典树trie索引<br>哈希索引不支持predecesor和range，位图索引维护成本过高，字典树空间消耗过大，主流数据库还是使用B树及其变种作为存储引擎</p>\n<p>本文提出的PGM-Index不像RMI和FITing-Tree那样混合了传统的索引和学习型索引。(RMI的最后一个stage中的模型若error超过阈值，则将模型替换为B+树，FITing-Tree在确定segment时也是查找B+树)</p>\n<h2 id=\"PGM-Index\"><a href=\"#PGM-Index\" class=\"headerlink\" title=\"PGM-Index\"></a>PGM-Index</h2><p>两个关键点：</p>\n<blockquote>\n<p>1.PLA-Model(Piecewise Linear Approximation model, 分段线性近似模型)</p>\n</blockquote>\n<p>这里使用了多个线性模型(segment, FITing-Tree中的分段线性模型)组成了一个PLA-Model(PGM-Index中的一层)，一个segment包含了三部分(start key, slope, intercept)</p>\n<blockquote>\n<p>2.recursive index structure (递归索引结构)</p>\n</blockquote>\n<p>为了适应key的分布，PGM-Index使用了多层PLA-Model，我们先使用所有的key来构建最底层的PLA-Model，然后提取Segment中的key形成新的集合，然后对该集合再次构建PLA-Model，如此递归直到最高层的PLA-Model只有一个segment</p>\n<p>下图包含了PGM-Index的构建伪代码，查找伪代码和查找示意图<br><img src=\"/../images/The-PGM-index-a-fully-dynamic-compressed-learned-index-with-provable-worst-case-bounds/1.png\" alt=\"img\"></p>\n<h3 id=\"Optimal-PLA-model\"><a href=\"#Optimal-PLA-model\" class=\"headerlink\" title=\"Optimal PLA-model\"></a>Optimal PLA-model</h3><p>找到最优的PLA-model的方法是动态规划，但它所需要的O(n^3)是禁止的。FITing-Tree的作者通过收缩锥的方式来在线性时间内解决这个问题但无法保证是最优的PLA-model</p>\n<p>然而我们发现这个问题在时间序列的有损压缩和相似性搜索中得到了广泛的研究，并且它允许采用O(n)最优时间和空间的流媒体算法。这类方法的关键思想是将分段线性近似问题简化为构造一组点的凸包在我们的情况下，这是集合{(ki，rank(ki))}为i &#x3D; 0，…，n−1。只要凸包可以被封闭在一个高度不超过2ε的（可能是旋转的）矩形中，索引i就会递增，集合就会被扩展。一旦包围凸壳的矩形高于2ε，我们就停止构造，通过取将矩形分成两个等尺寸的半的线来确定pla模型的一部分。然后，清空当前的处理元素集，算法从其余的输入点重新启动。这种贪婪方法可以被证明在pla模型的大小上是最优的，并且具有线性的时间和空间复杂度。</p>\n<h2 id=\"DYNAMIC-PGM-INDEX\"><a href=\"#DYNAMIC-PGM-INDEX\" class=\"headerlink\" title=\"DYNAMIC PGM-INDEX\"></a>DYNAMIC PGM-INDEX</h2><p>插入和删除操作</p>\n<p>现有学习型索引插入操作的实现方案是，将元素按序插入到相应段的缓存中，当缓存满了，将缓存与主索引合并，合并需要重新训练。这个方案在key非常多时，效率较低。本文提出两个插入策略：（1）面向时序数据（2）面向一般数据</p>\n<ul>\n<li>如果是时间序列的数据，插入的数据肯定是在数组A的最后面，那么如果最后一个段能够存放这个数据，且满足ε的条件，就直接放在最后一个段；否则新建一个段，然后向上层一层一层更新Segment。在这种策略下，每层更新最多只涉及到一个Segment的添加，因此需要的I&#x2F;O少。</li>\n<li>如果是一般的数据，即插入的位置可以是任意的。这里则采用LSM-Tree更新数据的思想。</li>\n</ul>\n<p><img src=\"/../images/The-PGM-index-a-fully-dynamic-compressed-learned-index-with-provable-worst-case-bounds/2.png\" alt=\"img\"></p>\n<h2 id=\"COMPRESSED-PGM-INDEX\"><a href=\"#COMPRESSED-PGM-INDEX\" class=\"headerlink\" title=\"COMPRESSED PGM-INDEX\"></a>COMPRESSED PGM-INDEX</h2>"},{"title":"Updatable-Learned-Index-with-Precise-Positions","date":"2023-10-10T11:13:07.000Z","_content":"\n## 应用场景\n读写负载\n\n## 问题描述\nLearned Index：只能在只读数据集上查找，无法处理索引结构中必不可少的更新操作\nALEX和PGM：它们对更新的支持是以查找操作的额外搜索为代价的；并且这些索引的更新操作也会导致大量元素的移动\n\n需要一种索引可以解决“最后一英里问题”\n\n## 方法\n每个Node包含一个model、一个entries array、一个bit数组，\n每个bit表示array中一个entry的类型，\n类型有\nNULL（空entry），\nDATA(entry包含一个键值对，如果键值对太大，保存一个指向payload的指针)，\nNODE（该entry指向下一层中的一个子节点，将一个新元素插入DATA entry时，创建一个子节点保存这两个entry，该entry指向这个新的节点）\n\n三种类型的entry的大小都为16byte，其中DATA类型的entry由8byte的key和8byte的payload组成\n对于第i个entry，bit数组的第2*i位表示该entry是不是NULL,第2*i + 1位表示entry的type\n\nLIPP不区分leaf node和internal node\n![img](../images/Updatable-Learned-Index-with-Precise-Positions/1.jpg)\n各种操作的算法：\nFMCD算法：\n> 给定一组key和数组长度L，计算最小的冲突度T及相应的linear model\n\n![img](../images/Updatable-Learned-Index-with-Precise-Positions/2.jpg)\n![img](../images/Updatable-Learned-Index-with-Precise-Positions/3.jpg)\n![img](../images/Updatable-Learned-Index-with-Precise-Positions/4.jpg)\n![img](../images/Updatable-Learned-Index-with-Precise-Positions/5.jpg)\n![img](../images/Updatable-Learned-Index-with-Precise-Positions/6.jpg)\n","source":"_posts/Updatable-Learned-Index-with-Precise-Positions.md","raw":"---\ntitle: Updatable-Learned-Index-with-Precise-Positions\ndate: 2023-10-10 04:13:07\ntags: Learned Index\ncategories: Learned Index\n---\n\n## 应用场景\n读写负载\n\n## 问题描述\nLearned Index：只能在只读数据集上查找，无法处理索引结构中必不可少的更新操作\nALEX和PGM：它们对更新的支持是以查找操作的额外搜索为代价的；并且这些索引的更新操作也会导致大量元素的移动\n\n需要一种索引可以解决“最后一英里问题”\n\n## 方法\n每个Node包含一个model、一个entries array、一个bit数组，\n每个bit表示array中一个entry的类型，\n类型有\nNULL（空entry），\nDATA(entry包含一个键值对，如果键值对太大，保存一个指向payload的指针)，\nNODE（该entry指向下一层中的一个子节点，将一个新元素插入DATA entry时，创建一个子节点保存这两个entry，该entry指向这个新的节点）\n\n三种类型的entry的大小都为16byte，其中DATA类型的entry由8byte的key和8byte的payload组成\n对于第i个entry，bit数组的第2*i位表示该entry是不是NULL,第2*i + 1位表示entry的type\n\nLIPP不区分leaf node和internal node\n![img](../images/Updatable-Learned-Index-with-Precise-Positions/1.jpg)\n各种操作的算法：\nFMCD算法：\n> 给定一组key和数组长度L，计算最小的冲突度T及相应的linear model\n\n![img](../images/Updatable-Learned-Index-with-Precise-Positions/2.jpg)\n![img](../images/Updatable-Learned-Index-with-Precise-Positions/3.jpg)\n![img](../images/Updatable-Learned-Index-with-Precise-Positions/4.jpg)\n![img](../images/Updatable-Learned-Index-with-Precise-Positions/5.jpg)\n![img](../images/Updatable-Learned-Index-with-Precise-Positions/6.jpg)\n","slug":"Updatable-Learned-Index-with-Precise-Positions","published":1,"updated":"2024-02-26T07:45:34.714Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt2vlxyl000e4ijxhylkblq1","content":"<h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><p>读写负载</p>\n<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>Learned Index：只能在只读数据集上查找，无法处理索引结构中必不可少的更新操作<br>ALEX和PGM：它们对更新的支持是以查找操作的额外搜索为代价的；并且这些索引的更新操作也会导致大量元素的移动</p>\n<p>需要一种索引可以解决“最后一英里问题”</p>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><p>每个Node包含一个model、一个entries array、一个bit数组，<br>每个bit表示array中一个entry的类型，<br>类型有<br>NULL（空entry），<br>DATA(entry包含一个键值对，如果键值对太大，保存一个指向payload的指针)，<br>NODE（该entry指向下一层中的一个子节点，将一个新元素插入DATA entry时，创建一个子节点保存这两个entry，该entry指向这个新的节点）</p>\n<p>三种类型的entry的大小都为16byte，其中DATA类型的entry由8byte的key和8byte的payload组成<br>对于第i个entry，bit数组的第2<em>i位表示该entry是不是NULL,第2</em>i + 1位表示entry的type</p>\n<p>LIPP不区分leaf node和internal node<br><img src=\"/../images/Updatable-Learned-Index-with-Precise-Positions/1.jpg\" alt=\"img\"><br>各种操作的算法：<br>FMCD算法：</p>\n<blockquote>\n<p>给定一组key和数组长度L，计算最小的冲突度T及相应的linear model</p>\n</blockquote>\n<p><img src=\"/../images/Updatable-Learned-Index-with-Precise-Positions/2.jpg\" alt=\"img\"><br><img src=\"/../images/Updatable-Learned-Index-with-Precise-Positions/3.jpg\" alt=\"img\"><br><img src=\"/../images/Updatable-Learned-Index-with-Precise-Positions/4.jpg\" alt=\"img\"><br><img src=\"/../images/Updatable-Learned-Index-with-Precise-Positions/5.jpg\" alt=\"img\"><br><img src=\"/../images/Updatable-Learned-Index-with-Precise-Positions/6.jpg\" alt=\"img\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><p>读写负载</p>\n<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>Learned Index：只能在只读数据集上查找，无法处理索引结构中必不可少的更新操作<br>ALEX和PGM：它们对更新的支持是以查找操作的额外搜索为代价的；并且这些索引的更新操作也会导致大量元素的移动</p>\n<p>需要一种索引可以解决“最后一英里问题”</p>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><p>每个Node包含一个model、一个entries array、一个bit数组，<br>每个bit表示array中一个entry的类型，<br>类型有<br>NULL（空entry），<br>DATA(entry包含一个键值对，如果键值对太大，保存一个指向payload的指针)，<br>NODE（该entry指向下一层中的一个子节点，将一个新元素插入DATA entry时，创建一个子节点保存这两个entry，该entry指向这个新的节点）</p>\n<p>三种类型的entry的大小都为16byte，其中DATA类型的entry由8byte的key和8byte的payload组成<br>对于第i个entry，bit数组的第2<em>i位表示该entry是不是NULL,第2</em>i + 1位表示entry的type</p>\n<p>LIPP不区分leaf node和internal node<br><img src=\"/../images/Updatable-Learned-Index-with-Precise-Positions/1.jpg\" alt=\"img\"><br>各种操作的算法：<br>FMCD算法：</p>\n<blockquote>\n<p>给定一组key和数组长度L，计算最小的冲突度T及相应的linear model</p>\n</blockquote>\n<p><img src=\"/../images/Updatable-Learned-Index-with-Precise-Positions/2.jpg\" alt=\"img\"><br><img src=\"/../images/Updatable-Learned-Index-with-Precise-Positions/3.jpg\" alt=\"img\"><br><img src=\"/../images/Updatable-Learned-Index-with-Precise-Positions/4.jpg\" alt=\"img\"><br><img src=\"/../images/Updatable-Learned-Index-with-Precise-Positions/5.jpg\" alt=\"img\"><br><img src=\"/../images/Updatable-Learned-Index-with-Precise-Positions/6.jpg\" alt=\"img\"></p>\n"},{"title":"cmake-generator-error-under-windows-system","date":"2023-12-07T08:22:51.000Z","_content":"\n1.安装windows版本cmake（配置环境变量）\n2.安装windows版本mingw（配置环境变量）\n3.创建工程目录\n执行以下命令\n```\nmkdir build\ncd build\ncmake -G \"MinGW Makefiles\" -D \"CMAKE_MAKE_PROGRAM:PATH=your path to make.exe\"\nmake\n```\n\n参考：\nhttps://blog.csdn.net/dcrmg/article/details/103918543\nhttps://codeantenna.com/a/ELzh11ElWs\n","source":"_posts/cmake-generator-error-under-windows-system.md","raw":"---\ntitle: cmake-generator-error-under-windows-system\ndate: 2023-12-07 00:22:51\ntags: cmake\ncategories: cmake\n---\n\n1.安装windows版本cmake（配置环境变量）\n2.安装windows版本mingw（配置环境变量）\n3.创建工程目录\n执行以下命令\n```\nmkdir build\ncd build\ncmake -G \"MinGW Makefiles\" -D \"CMAKE_MAKE_PROGRAM:PATH=your path to make.exe\"\nmake\n```\n\n参考：\nhttps://blog.csdn.net/dcrmg/article/details/103918543\nhttps://codeantenna.com/a/ELzh11ElWs\n","slug":"cmake-generator-error-under-windows-system","published":1,"updated":"2024-02-26T07:45:34.714Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt2vlxym000h4ijxdmml8zib","content":"<p>1.安装windows版本cmake（配置环境变量）<br>2.安装windows版本mingw（配置环境变量）<br>3.创建工程目录<br>执行以下命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir build</span><br><span class=\"line\">cd build</span><br><span class=\"line\">cmake -G &quot;MinGW Makefiles&quot; -D &quot;CMAKE_MAKE_PROGRAM:PATH=your path to make.exe&quot;</span><br><span class=\"line\">make</span><br></pre></td></tr></table></figure>\n\n<p>参考：<br><a href=\"https://blog.csdn.net/dcrmg/article/details/103918543\">https://blog.csdn.net/dcrmg/article/details/103918543</a><br><a href=\"https://codeantenna.com/a/ELzh11ElWs\">https://codeantenna.com/a/ELzh11ElWs</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>1.安装windows版本cmake（配置环境变量）<br>2.安装windows版本mingw（配置环境变量）<br>3.创建工程目录<br>执行以下命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir build</span><br><span class=\"line\">cd build</span><br><span class=\"line\">cmake -G &quot;MinGW Makefiles&quot; -D &quot;CMAKE_MAKE_PROGRAM:PATH=your path to make.exe&quot;</span><br><span class=\"line\">make</span><br></pre></td></tr></table></figure>\n\n<p>参考：<br><a href=\"https://blog.csdn.net/dcrmg/article/details/103918543\">https://blog.csdn.net/dcrmg/article/details/103918543</a><br><a href=\"https://codeantenna.com/a/ELzh11ElWs\">https://codeantenna.com/a/ELzh11ElWs</a></p>\n"},{"title":"cmu15445-project0","date":"2024-02-22T10:15:27.000Z","_content":"\n## TASK 1 Copy-On-Write Trie\nCOW Trie在每次插入和删除时不会改变原有节点，而是对该节点的副本进行修改后，依次为其父节点创建修改后的副本，最后返回一个新的根节点。\n此外，删除操作中，如果回溯路径上的某节点无值，且不存在子节点，还需要删除该节点\n***\n插入(\"ad\", 2),创建了一个新的Node2\n![img](../images/cmu15445-project0/2.png)\n\n***\n\n插入(\"b\", 3)\n![img](../images/cmu15445-project0/1.png)\n\n***\n\n插入(\"a\", \"abc\") 删除(\"ab\", 1)<br>\n注意删除操作后需要清除所有不需要的节点\n\n![img](../images/cmu15445-project0/3.png)\n\n\nGet函数实现\n> 从root节点遍历Tire树，\n> 如果key不存在返回nullptr，\n> 如果key存在，但是对应的Node无value或者value的类型不匹配，返回nullptr\n> 其它情况，返回value\n```cpp\n// Get the value associated with the given key.\n// 1. If the key is not in the trie, return nullptr.\n// 2. If the key is in the trie but the type is mismatched, return nullptr.\n// 3. Otherwise, return the value.\ntemplate <class T>\nauto Trie::Get(std::string_view key) const -> const T * {\n  if (!root_) {\n    return nullptr;\n  }\n  std::shared_ptr<const TrieNode> ptr(root_);\n  for (char ch : key) {\n    if (ptr->children_.count(ch) == 0) {\n      return nullptr;\n    }\n    ptr = ptr->children_.at(ch);\n  }\n  if (!ptr->is_value_node_) {\n    return nullptr;\n  }\n  auto p = std::dynamic_pointer_cast<const TrieNodeWithValue<T>>(ptr);\n  if (!p) {\n    return nullptr;\n  }\n  return p->value_.get();\n}\n```\n\n``` cpp\ntemplate <class T>\nauto Trie::Put(std::string_view key, T value) const -> Trie {\n  // Note that `T` might be a non-copyable type. Always use `std::move` when creating `shared_ptr` on that value.\n\n  // You should walk through the trie and create new nodes if necessary. If the node corresponding to the key already\n  // exists, you should create a new `TrieNodeWithValue`.\n  std::shared_ptr<const TrieNode> new_root(nullptr);\n  std::map<char, std::shared_ptr<const TrieNode>> children;\n  if (key.length() == 0) {//key长度为0，表示在root节点put value\n    if (root_) {\n      children = root_->children_;\n    }\n    new_root = std::make_shared<const TrieNodeWithValue<T>>(children, std::make_shared<T>(std::move(value)));//创建一个新的root节点\n    return Trie(new_root);\n  }\n\n  std::vector<std::unique_ptr<TrieNode>> stack;\n  if (root_) {\n    stack.push_back(root_->Clone());\n  } else {\n    stack.push_back(std::make_unique<TrieNode>());\n  }\n  auto ptr(root_);\n\n  for (int64_t i = 0; i < static_cast<int64_t>(key.length() - 1); ++i) {\n    std::unique_ptr<TrieNode> tmp_ptr(nullptr);\n    if (ptr && ptr->children_.count(key[i]) == 1) {\n      ptr = ptr->children_.at(key[i]);\n      tmp_ptr = ptr->Clone();\n    } else {\n      tmp_ptr = std::make_unique<TrieNode>();\n      ptr = nullptr;\n    }\n\n    stack.push_back(std::move(tmp_ptr));\n  }\n  auto value_ptr = std::make_shared<T>(std::move(value));\n  if (ptr && ptr->children_.count(key.back())) {\n    ptr = ptr->children_.at(key.back());\n    children = ptr->children_;\n  }\n  auto value_node = std::make_unique<TrieNodeWithValue<T>>(children, std::move(value_ptr));\n  stack.push_back(std::move(value_node));\n\n  for (int64_t i = key.length() - 1; i >= 0; i--) {\n    auto tmp_ptr = std::move(stack.back());\n    stack.pop_back();\n    stack.back()->children_[key[i]] = std::move(tmp_ptr);\n  }\n  new_root = std::move(stack.back());\n  return Trie(new_root);\n}\n```\n\n\n## TASK 2 Concurrent Key-Value Store\n> concurrent Key-Value store需要支持 **多个读者和一个写者** 工作的情况\n> 也就是当一个写者在创建一个新的root的时候，读者可以在old root进行读操作\nTire_store.cpp文件<br>\n\n读操作\n```cpp\ntemplate <class T>\nauto TrieStore::Get(std::string_view key) -> std::optional<ValueGuard<T>> {\n  // Pseudo-code:\n  // (1) Take the root lock, get the root, and release the root lock. Don't lookup the value in the\n  //     trie while holding the root lock.\n  // (2) Lookup the value in the trie.\n  // (3) If the value is found, return a ValueGuard object that holds a reference to the value and the\n  //     root. Otherwise, return std::nullopt.\n  Trie root;\n  {\n    std::lock_guard<std::mutex> guard(root_lock_);\n    root = root_;\n  }\n  const T *val = root.Get<T>(key);\n  if (!val) {\n    return std::nullopt;\n  }\n\n  return ValueGuard<T>(root, *val);\n}\n```\n写操作\n```cpp\ntemplate <class T>\nvoid TrieStore::Put(std::string_view key, T value) {\n  // You will need to ensure there is only one writer at a time. Think of how you can achieve this.\n  // The logic should be somehow similar to `TrieStore::Get`.\n  std::lock_guard<std::mutex> guard(write_lock_);\n  Trie root;\n  {\n    std::lock_guard<std::mutex> guard1(root_lock_);\n    root = root_;\n  }\n\n  Trie new_root = root.Put<T>(key, std::move(value));\n\n  {\n    std::lock_guard<std::mutex> guard1(root_lock_);\n    root_ = new_root;\n  }\n}\n\nvoid TrieStore::Remove(std::string_view key) {\n  // You will need to ensure there is only one writer at a time. Think of how you can achieve this.\n  // The logic should be somehow similar to `TrieStore::Get`.\n  std::lock_guard<std::mutex> guard(write_lock_);\n  Trie root;\n  {\n    std::lock_guard<std::mutex> guard1(root_lock_);\n    root = root_;\n  }\n\n  Trie new_root = root.Remove(key);\n\n  {\n    std::lock_guard<std::mutex> guard1(root_lock_);\n    root_ = new_root;\n  }\n}\n```\n\n\n## TASK 3 Debugging\n\nskip.......\n\n\n## TASK 4 SQL String Functions\n实现Upper方法和Lower方法\nsrc/include/execution/string_expression.h\n```cpp\nauto Compute(const std::string &val) const -> std::string {\n    // TODO(student): implement upper / lower.\n    std::string res;\n    res.resize(val.length());\n    switch (expr_type_) {\n      case StringExpressionType::Lower:\n        std::transform(val.begin(), val.end(), res.begin(), ::tolower);\n        break;\n      case StringExpressionType::Upper:\n        std::transform(val.begin(), val.end(), res.begin(), ::toupper);\n        break;\n    }\n    return res;\n  }\n```\n运行结果如下:<br/>\n![img](../images/cmu15445-project0/4.png)\n\n测试通过截图：<br/>\n![img](../images/cmu15445-project0/5.png)\n","source":"_posts/cmu15445-project0.md","raw":"---\ntitle: cmu15445-project0\ndate: 2024-02-22 02:15:27\ntags: cmu15445—2023\ncategories: cmu15445-2023\n---\n\n## TASK 1 Copy-On-Write Trie\nCOW Trie在每次插入和删除时不会改变原有节点，而是对该节点的副本进行修改后，依次为其父节点创建修改后的副本，最后返回一个新的根节点。\n此外，删除操作中，如果回溯路径上的某节点无值，且不存在子节点，还需要删除该节点\n***\n插入(\"ad\", 2),创建了一个新的Node2\n![img](../images/cmu15445-project0/2.png)\n\n***\n\n插入(\"b\", 3)\n![img](../images/cmu15445-project0/1.png)\n\n***\n\n插入(\"a\", \"abc\") 删除(\"ab\", 1)<br>\n注意删除操作后需要清除所有不需要的节点\n\n![img](../images/cmu15445-project0/3.png)\n\n\nGet函数实现\n> 从root节点遍历Tire树，\n> 如果key不存在返回nullptr，\n> 如果key存在，但是对应的Node无value或者value的类型不匹配，返回nullptr\n> 其它情况，返回value\n```cpp\n// Get the value associated with the given key.\n// 1. If the key is not in the trie, return nullptr.\n// 2. If the key is in the trie but the type is mismatched, return nullptr.\n// 3. Otherwise, return the value.\ntemplate <class T>\nauto Trie::Get(std::string_view key) const -> const T * {\n  if (!root_) {\n    return nullptr;\n  }\n  std::shared_ptr<const TrieNode> ptr(root_);\n  for (char ch : key) {\n    if (ptr->children_.count(ch) == 0) {\n      return nullptr;\n    }\n    ptr = ptr->children_.at(ch);\n  }\n  if (!ptr->is_value_node_) {\n    return nullptr;\n  }\n  auto p = std::dynamic_pointer_cast<const TrieNodeWithValue<T>>(ptr);\n  if (!p) {\n    return nullptr;\n  }\n  return p->value_.get();\n}\n```\n\n``` cpp\ntemplate <class T>\nauto Trie::Put(std::string_view key, T value) const -> Trie {\n  // Note that `T` might be a non-copyable type. Always use `std::move` when creating `shared_ptr` on that value.\n\n  // You should walk through the trie and create new nodes if necessary. If the node corresponding to the key already\n  // exists, you should create a new `TrieNodeWithValue`.\n  std::shared_ptr<const TrieNode> new_root(nullptr);\n  std::map<char, std::shared_ptr<const TrieNode>> children;\n  if (key.length() == 0) {//key长度为0，表示在root节点put value\n    if (root_) {\n      children = root_->children_;\n    }\n    new_root = std::make_shared<const TrieNodeWithValue<T>>(children, std::make_shared<T>(std::move(value)));//创建一个新的root节点\n    return Trie(new_root);\n  }\n\n  std::vector<std::unique_ptr<TrieNode>> stack;\n  if (root_) {\n    stack.push_back(root_->Clone());\n  } else {\n    stack.push_back(std::make_unique<TrieNode>());\n  }\n  auto ptr(root_);\n\n  for (int64_t i = 0; i < static_cast<int64_t>(key.length() - 1); ++i) {\n    std::unique_ptr<TrieNode> tmp_ptr(nullptr);\n    if (ptr && ptr->children_.count(key[i]) == 1) {\n      ptr = ptr->children_.at(key[i]);\n      tmp_ptr = ptr->Clone();\n    } else {\n      tmp_ptr = std::make_unique<TrieNode>();\n      ptr = nullptr;\n    }\n\n    stack.push_back(std::move(tmp_ptr));\n  }\n  auto value_ptr = std::make_shared<T>(std::move(value));\n  if (ptr && ptr->children_.count(key.back())) {\n    ptr = ptr->children_.at(key.back());\n    children = ptr->children_;\n  }\n  auto value_node = std::make_unique<TrieNodeWithValue<T>>(children, std::move(value_ptr));\n  stack.push_back(std::move(value_node));\n\n  for (int64_t i = key.length() - 1; i >= 0; i--) {\n    auto tmp_ptr = std::move(stack.back());\n    stack.pop_back();\n    stack.back()->children_[key[i]] = std::move(tmp_ptr);\n  }\n  new_root = std::move(stack.back());\n  return Trie(new_root);\n}\n```\n\n\n## TASK 2 Concurrent Key-Value Store\n> concurrent Key-Value store需要支持 **多个读者和一个写者** 工作的情况\n> 也就是当一个写者在创建一个新的root的时候，读者可以在old root进行读操作\nTire_store.cpp文件<br>\n\n读操作\n```cpp\ntemplate <class T>\nauto TrieStore::Get(std::string_view key) -> std::optional<ValueGuard<T>> {\n  // Pseudo-code:\n  // (1) Take the root lock, get the root, and release the root lock. Don't lookup the value in the\n  //     trie while holding the root lock.\n  // (2) Lookup the value in the trie.\n  // (3) If the value is found, return a ValueGuard object that holds a reference to the value and the\n  //     root. Otherwise, return std::nullopt.\n  Trie root;\n  {\n    std::lock_guard<std::mutex> guard(root_lock_);\n    root = root_;\n  }\n  const T *val = root.Get<T>(key);\n  if (!val) {\n    return std::nullopt;\n  }\n\n  return ValueGuard<T>(root, *val);\n}\n```\n写操作\n```cpp\ntemplate <class T>\nvoid TrieStore::Put(std::string_view key, T value) {\n  // You will need to ensure there is only one writer at a time. Think of how you can achieve this.\n  // The logic should be somehow similar to `TrieStore::Get`.\n  std::lock_guard<std::mutex> guard(write_lock_);\n  Trie root;\n  {\n    std::lock_guard<std::mutex> guard1(root_lock_);\n    root = root_;\n  }\n\n  Trie new_root = root.Put<T>(key, std::move(value));\n\n  {\n    std::lock_guard<std::mutex> guard1(root_lock_);\n    root_ = new_root;\n  }\n}\n\nvoid TrieStore::Remove(std::string_view key) {\n  // You will need to ensure there is only one writer at a time. Think of how you can achieve this.\n  // The logic should be somehow similar to `TrieStore::Get`.\n  std::lock_guard<std::mutex> guard(write_lock_);\n  Trie root;\n  {\n    std::lock_guard<std::mutex> guard1(root_lock_);\n    root = root_;\n  }\n\n  Trie new_root = root.Remove(key);\n\n  {\n    std::lock_guard<std::mutex> guard1(root_lock_);\n    root_ = new_root;\n  }\n}\n```\n\n\n## TASK 3 Debugging\n\nskip.......\n\n\n## TASK 4 SQL String Functions\n实现Upper方法和Lower方法\nsrc/include/execution/string_expression.h\n```cpp\nauto Compute(const std::string &val) const -> std::string {\n    // TODO(student): implement upper / lower.\n    std::string res;\n    res.resize(val.length());\n    switch (expr_type_) {\n      case StringExpressionType::Lower:\n        std::transform(val.begin(), val.end(), res.begin(), ::tolower);\n        break;\n      case StringExpressionType::Upper:\n        std::transform(val.begin(), val.end(), res.begin(), ::toupper);\n        break;\n    }\n    return res;\n  }\n```\n运行结果如下:<br/>\n![img](../images/cmu15445-project0/4.png)\n\n测试通过截图：<br/>\n![img](../images/cmu15445-project0/5.png)\n","slug":"cmu15445-project0","published":1,"updated":"2024-02-26T11:53:04.411Z","_id":"clt2vlxyp000k4ijxgcnt7t0p","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"TASK-1-Copy-On-Write-Trie\"><a href=\"#TASK-1-Copy-On-Write-Trie\" class=\"headerlink\" title=\"TASK 1 Copy-On-Write Trie\"></a>TASK 1 Copy-On-Write Trie</h2><p>COW Trie在每次插入和删除时不会改变原有节点，而是对该节点的副本进行修改后，依次为其父节点创建修改后的副本，最后返回一个新的根节点。<br>此外，删除操作中，如果回溯路径上的某节点无值，且不存在子节点，还需要删除该节点</p>\n<hr>\n<p>插入(“ad”, 2),创建了一个新的Node2<br><img src=\"/../images/cmu15445-project0/2.png\" alt=\"img\"></p>\n<hr>\n<p>插入(“b”, 3)<br><img src=\"/../images/cmu15445-project0/1.png\" alt=\"img\"></p>\n<hr>\n<p>插入(“a”, “abc”) 删除(“ab”, 1)<br><br>注意删除操作后需要清除所有不需要的节点</p>\n<p><img src=\"/../images/cmu15445-project0/3.png\" alt=\"img\"></p>\n<p>Get函数实现</p>\n<blockquote>\n<p>从root节点遍历Tire树，<br>如果key不存在返回nullptr，<br>如果key存在，但是对应的Node无value或者value的类型不匹配，返回nullptr<br>其它情况，返回value</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Get the value associated with the given key.</span></span><br><span class=\"line\"><span class=\"comment\">// 1. If the key is not in the trie, return nullptr.</span></span><br><span class=\"line\"><span class=\"comment\">// 2. If the key is in the trie but the type is mismatched, return nullptr.</span></span><br><span class=\"line\"><span class=\"comment\">// 3. Otherwise, return the value.</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">Trie::Get</span><span class=\"params\">(std::string_view key)</span> <span class=\"type\">const</span> -&gt; <span class=\"type\">const</span> T * </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!root_) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\">std::shared_ptr&lt;<span class=\"type\">const</span> TrieNode&gt; <span class=\"title\">ptr</span><span class=\"params\">(root_)</span></span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">char</span> ch : key) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ptr-&gt;children_.<span class=\"built_in\">count</span>(ch) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ptr = ptr-&gt;children_.<span class=\"built_in\">at</span>(ch);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!ptr-&gt;is_value_node_) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">auto</span> p = std::dynamic_pointer_cast&lt;<span class=\"type\">const</span> TrieNodeWithValue&lt;T&gt;&gt;(ptr);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!p) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> p-&gt;value_.<span class=\"built_in\">get</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">Trie::Put</span><span class=\"params\">(std::string_view key, T value)</span> <span class=\"type\">const</span> -&gt; Trie </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Note that `T` might be a non-copyable type. Always use `std::move` when creating `shared_ptr` on that value.</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// You should walk through the trie and create new nodes if necessary. If the node corresponding to the key already</span></span><br><span class=\"line\">  <span class=\"comment\">// exists, you should create a new `TrieNodeWithValue`.</span></span><br><span class=\"line\">  <span class=\"function\">std::shared_ptr&lt;<span class=\"type\">const</span> TrieNode&gt; <span class=\"title\">new_root</span><span class=\"params\">(<span class=\"literal\">nullptr</span>)</span></span>;</span><br><span class=\"line\">  std::map&lt;<span class=\"type\">char</span>, std::shared_ptr&lt;<span class=\"type\">const</span> TrieNode&gt;&gt; children;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (key.<span class=\"built_in\">length</span>() == <span class=\"number\">0</span>) &#123;<span class=\"comment\">//key长度为0，表示在root节点put value</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root_) &#123;</span><br><span class=\"line\">      children = root_-&gt;children_;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    new_root = std::make_shared&lt;<span class=\"type\">const</span> TrieNodeWithValue&lt;T&gt;&gt;(children, std::<span class=\"built_in\">make_shared</span>&lt;T&gt;(std::<span class=\"built_in\">move</span>(value)));<span class=\"comment\">//创建一个新的root节点</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Trie</span>(new_root);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  std::vector&lt;std::unique_ptr&lt;TrieNode&gt;&gt; stack;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (root_) &#123;</span><br><span class=\"line\">    stack.<span class=\"built_in\">push_back</span>(root_-&gt;<span class=\"built_in\">Clone</span>());</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    stack.<span class=\"built_in\">push_back</span>(std::<span class=\"built_in\">make_unique</span>&lt;TrieNode&gt;());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">ptr</span><span class=\"params\">(root_)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int64_t</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">static_cast</span>&lt;<span class=\"type\">int64_t</span>&gt;(key.<span class=\"built_in\">length</span>() - <span class=\"number\">1</span>); ++i) &#123;</span><br><span class=\"line\">    <span class=\"function\">std::unique_ptr&lt;TrieNode&gt; <span class=\"title\">tmp_ptr</span><span class=\"params\">(<span class=\"literal\">nullptr</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ptr &amp;&amp; ptr-&gt;children_.<span class=\"built_in\">count</span>(key[i]) == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      ptr = ptr-&gt;children_.<span class=\"built_in\">at</span>(key[i]);</span><br><span class=\"line\">      tmp_ptr = ptr-&gt;<span class=\"built_in\">Clone</span>();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      tmp_ptr = std::<span class=\"built_in\">make_unique</span>&lt;TrieNode&gt;();</span><br><span class=\"line\">      ptr = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    stack.<span class=\"built_in\">push_back</span>(std::<span class=\"built_in\">move</span>(tmp_ptr));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">auto</span> value_ptr = std::<span class=\"built_in\">make_shared</span>&lt;T&gt;(std::<span class=\"built_in\">move</span>(value));</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (ptr &amp;&amp; ptr-&gt;children_.<span class=\"built_in\">count</span>(key.<span class=\"built_in\">back</span>())) &#123;</span><br><span class=\"line\">    ptr = ptr-&gt;children_.<span class=\"built_in\">at</span>(key.<span class=\"built_in\">back</span>());</span><br><span class=\"line\">    children = ptr-&gt;children_;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">auto</span> value_node = std::make_unique&lt;TrieNodeWithValue&lt;T&gt;&gt;(children, std::<span class=\"built_in\">move</span>(value_ptr));</span><br><span class=\"line\">  stack.<span class=\"built_in\">push_back</span>(std::<span class=\"built_in\">move</span>(value_node));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int64_t</span> i = key.<span class=\"built_in\">length</span>() - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> tmp_ptr = std::<span class=\"built_in\">move</span>(stack.<span class=\"built_in\">back</span>());</span><br><span class=\"line\">    stack.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">    stack.<span class=\"built_in\">back</span>()-&gt;children_[key[i]] = std::<span class=\"built_in\">move</span>(tmp_ptr);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  new_root = std::<span class=\"built_in\">move</span>(stack.<span class=\"built_in\">back</span>());</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Trie</span>(new_root);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"TASK-2-Concurrent-Key-Value-Store\"><a href=\"#TASK-2-Concurrent-Key-Value-Store\" class=\"headerlink\" title=\"TASK 2 Concurrent Key-Value Store\"></a>TASK 2 Concurrent Key-Value Store</h2><blockquote>\n<p>concurrent Key-Value store需要支持 <strong>多个读者和一个写者</strong> 工作的情况<br>也就是当一个写者在创建一个新的root的时候，读者可以在old root进行读操作<br>Tire_store.cpp文件<br></p>\n</blockquote>\n<p>读操作</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">TrieStore::Get</span><span class=\"params\">(std::string_view key)</span> -&gt; std::optional&lt;ValueGuard&lt;T&gt;&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Pseudo-code:</span></span><br><span class=\"line\">  <span class=\"comment\">// (1) Take the root lock, get the root, and release the root lock. Don&#x27;t lookup the value in the</span></span><br><span class=\"line\">  <span class=\"comment\">//     trie while holding the root lock.</span></span><br><span class=\"line\">  <span class=\"comment\">// (2) Lookup the value in the trie.</span></span><br><span class=\"line\">  <span class=\"comment\">// (3) If the value is found, return a ValueGuard object that holds a reference to the value and the</span></span><br><span class=\"line\">  <span class=\"comment\">//     root. Otherwise, return std::nullopt.</span></span><br><span class=\"line\">  Trie root;</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"function\">std::lock_guard&lt;std::mutex&gt; <span class=\"title\">guard</span><span class=\"params\">(root_lock_)</span></span>;</span><br><span class=\"line\">    root = root_;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"type\">const</span> T *val = root.<span class=\"built_in\">Get</span>&lt;T&gt;(key);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!val) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> std::<span class=\"literal\">nullopt</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">ValueGuard</span>&lt;T&gt;(root, *val);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>写操作</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">TrieStore::Put</span><span class=\"params\">(std::string_view key, T value)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// You will need to ensure there is only one writer at a time. Think of how you can achieve this.</span></span><br><span class=\"line\">  <span class=\"comment\">// The logic should be somehow similar to `TrieStore::Get`.</span></span><br><span class=\"line\">  <span class=\"function\">std::lock_guard&lt;std::mutex&gt; <span class=\"title\">guard</span><span class=\"params\">(write_lock_)</span></span>;</span><br><span class=\"line\">  Trie root;</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"function\">std::lock_guard&lt;std::mutex&gt; <span class=\"title\">guard1</span><span class=\"params\">(root_lock_)</span></span>;</span><br><span class=\"line\">    root = root_;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  Trie new_root = root.<span class=\"built_in\">Put</span>&lt;T&gt;(key, std::<span class=\"built_in\">move</span>(value));</span><br><span class=\"line\"></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"function\">std::lock_guard&lt;std::mutex&gt; <span class=\"title\">guard1</span><span class=\"params\">(root_lock_)</span></span>;</span><br><span class=\"line\">    root_ = new_root;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">TrieStore::Remove</span><span class=\"params\">(std::string_view key)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// You will need to ensure there is only one writer at a time. Think of how you can achieve this.</span></span><br><span class=\"line\">  <span class=\"comment\">// The logic should be somehow similar to `TrieStore::Get`.</span></span><br><span class=\"line\">  <span class=\"function\">std::lock_guard&lt;std::mutex&gt; <span class=\"title\">guard</span><span class=\"params\">(write_lock_)</span></span>;</span><br><span class=\"line\">  Trie root;</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"function\">std::lock_guard&lt;std::mutex&gt; <span class=\"title\">guard1</span><span class=\"params\">(root_lock_)</span></span>;</span><br><span class=\"line\">    root = root_;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  Trie new_root = root.<span class=\"built_in\">Remove</span>(key);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"function\">std::lock_guard&lt;std::mutex&gt; <span class=\"title\">guard1</span><span class=\"params\">(root_lock_)</span></span>;</span><br><span class=\"line\">    root_ = new_root;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"TASK-3-Debugging\"><a href=\"#TASK-3-Debugging\" class=\"headerlink\" title=\"TASK 3 Debugging\"></a>TASK 3 Debugging</h2><p>skip…….</p>\n<h2 id=\"TASK-4-SQL-String-Functions\"><a href=\"#TASK-4-SQL-String-Functions\" class=\"headerlink\" title=\"TASK 4 SQL String Functions\"></a>TASK 4 SQL String Functions</h2><p>实现Upper方法和Lower方法<br>src&#x2F;include&#x2F;execution&#x2F;string_expression.h</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">Compute</span><span class=\"params\">(<span class=\"type\">const</span> std::string &amp;val)</span> <span class=\"type\">const</span> -&gt; std::string </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO(student): implement upper / lower.</span></span><br><span class=\"line\">    std::string res;</span><br><span class=\"line\">    res.<span class=\"built_in\">resize</span>(val.<span class=\"built_in\">length</span>());</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (expr_type_) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> StringExpressionType::Lower:</span><br><span class=\"line\">        std::<span class=\"built_in\">transform</span>(val.<span class=\"built_in\">begin</span>(), val.<span class=\"built_in\">end</span>(), res.<span class=\"built_in\">begin</span>(), ::tolower);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> StringExpressionType::Upper:</span><br><span class=\"line\">        std::<span class=\"built_in\">transform</span>(val.<span class=\"built_in\">begin</span>(), val.<span class=\"built_in\">end</span>(), res.<span class=\"built_in\">begin</span>(), ::toupper);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果如下:<br><br><img src=\"/../images/cmu15445-project0/4.png\" alt=\"img\"></p>\n<p>测试通过截图：<br><br><img src=\"/../images/cmu15445-project0/5.png\" alt=\"img\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"TASK-1-Copy-On-Write-Trie\"><a href=\"#TASK-1-Copy-On-Write-Trie\" class=\"headerlink\" title=\"TASK 1 Copy-On-Write Trie\"></a>TASK 1 Copy-On-Write Trie</h2><p>COW Trie在每次插入和删除时不会改变原有节点，而是对该节点的副本进行修改后，依次为其父节点创建修改后的副本，最后返回一个新的根节点。<br>此外，删除操作中，如果回溯路径上的某节点无值，且不存在子节点，还需要删除该节点</p>\n<hr>\n<p>插入(“ad”, 2),创建了一个新的Node2<br><img src=\"/../images/cmu15445-project0/2.png\" alt=\"img\"></p>\n<hr>\n<p>插入(“b”, 3)<br><img src=\"/../images/cmu15445-project0/1.png\" alt=\"img\"></p>\n<hr>\n<p>插入(“a”, “abc”) 删除(“ab”, 1)<br><br>注意删除操作后需要清除所有不需要的节点</p>\n<p><img src=\"/../images/cmu15445-project0/3.png\" alt=\"img\"></p>\n<p>Get函数实现</p>\n<blockquote>\n<p>从root节点遍历Tire树，<br>如果key不存在返回nullptr，<br>如果key存在，但是对应的Node无value或者value的类型不匹配，返回nullptr<br>其它情况，返回value</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Get the value associated with the given key.</span></span><br><span class=\"line\"><span class=\"comment\">// 1. If the key is not in the trie, return nullptr.</span></span><br><span class=\"line\"><span class=\"comment\">// 2. If the key is in the trie but the type is mismatched, return nullptr.</span></span><br><span class=\"line\"><span class=\"comment\">// 3. Otherwise, return the value.</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">Trie::Get</span><span class=\"params\">(std::string_view key)</span> <span class=\"type\">const</span> -&gt; <span class=\"type\">const</span> T * </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!root_) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\">std::shared_ptr&lt;<span class=\"type\">const</span> TrieNode&gt; <span class=\"title\">ptr</span><span class=\"params\">(root_)</span></span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">char</span> ch : key) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ptr-&gt;children_.<span class=\"built_in\">count</span>(ch) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ptr = ptr-&gt;children_.<span class=\"built_in\">at</span>(ch);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!ptr-&gt;is_value_node_) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">auto</span> p = std::dynamic_pointer_cast&lt;<span class=\"type\">const</span> TrieNodeWithValue&lt;T&gt;&gt;(ptr);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!p) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> p-&gt;value_.<span class=\"built_in\">get</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">Trie::Put</span><span class=\"params\">(std::string_view key, T value)</span> <span class=\"type\">const</span> -&gt; Trie </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Note that `T` might be a non-copyable type. Always use `std::move` when creating `shared_ptr` on that value.</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// You should walk through the trie and create new nodes if necessary. If the node corresponding to the key already</span></span><br><span class=\"line\">  <span class=\"comment\">// exists, you should create a new `TrieNodeWithValue`.</span></span><br><span class=\"line\">  <span class=\"function\">std::shared_ptr&lt;<span class=\"type\">const</span> TrieNode&gt; <span class=\"title\">new_root</span><span class=\"params\">(<span class=\"literal\">nullptr</span>)</span></span>;</span><br><span class=\"line\">  std::map&lt;<span class=\"type\">char</span>, std::shared_ptr&lt;<span class=\"type\">const</span> TrieNode&gt;&gt; children;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (key.<span class=\"built_in\">length</span>() == <span class=\"number\">0</span>) &#123;<span class=\"comment\">//key长度为0，表示在root节点put value</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root_) &#123;</span><br><span class=\"line\">      children = root_-&gt;children_;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    new_root = std::make_shared&lt;<span class=\"type\">const</span> TrieNodeWithValue&lt;T&gt;&gt;(children, std::<span class=\"built_in\">make_shared</span>&lt;T&gt;(std::<span class=\"built_in\">move</span>(value)));<span class=\"comment\">//创建一个新的root节点</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Trie</span>(new_root);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  std::vector&lt;std::unique_ptr&lt;TrieNode&gt;&gt; stack;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (root_) &#123;</span><br><span class=\"line\">    stack.<span class=\"built_in\">push_back</span>(root_-&gt;<span class=\"built_in\">Clone</span>());</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    stack.<span class=\"built_in\">push_back</span>(std::<span class=\"built_in\">make_unique</span>&lt;TrieNode&gt;());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">ptr</span><span class=\"params\">(root_)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int64_t</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">static_cast</span>&lt;<span class=\"type\">int64_t</span>&gt;(key.<span class=\"built_in\">length</span>() - <span class=\"number\">1</span>); ++i) &#123;</span><br><span class=\"line\">    <span class=\"function\">std::unique_ptr&lt;TrieNode&gt; <span class=\"title\">tmp_ptr</span><span class=\"params\">(<span class=\"literal\">nullptr</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ptr &amp;&amp; ptr-&gt;children_.<span class=\"built_in\">count</span>(key[i]) == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      ptr = ptr-&gt;children_.<span class=\"built_in\">at</span>(key[i]);</span><br><span class=\"line\">      tmp_ptr = ptr-&gt;<span class=\"built_in\">Clone</span>();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      tmp_ptr = std::<span class=\"built_in\">make_unique</span>&lt;TrieNode&gt;();</span><br><span class=\"line\">      ptr = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    stack.<span class=\"built_in\">push_back</span>(std::<span class=\"built_in\">move</span>(tmp_ptr));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">auto</span> value_ptr = std::<span class=\"built_in\">make_shared</span>&lt;T&gt;(std::<span class=\"built_in\">move</span>(value));</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (ptr &amp;&amp; ptr-&gt;children_.<span class=\"built_in\">count</span>(key.<span class=\"built_in\">back</span>())) &#123;</span><br><span class=\"line\">    ptr = ptr-&gt;children_.<span class=\"built_in\">at</span>(key.<span class=\"built_in\">back</span>());</span><br><span class=\"line\">    children = ptr-&gt;children_;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">auto</span> value_node = std::make_unique&lt;TrieNodeWithValue&lt;T&gt;&gt;(children, std::<span class=\"built_in\">move</span>(value_ptr));</span><br><span class=\"line\">  stack.<span class=\"built_in\">push_back</span>(std::<span class=\"built_in\">move</span>(value_node));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int64_t</span> i = key.<span class=\"built_in\">length</span>() - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> tmp_ptr = std::<span class=\"built_in\">move</span>(stack.<span class=\"built_in\">back</span>());</span><br><span class=\"line\">    stack.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">    stack.<span class=\"built_in\">back</span>()-&gt;children_[key[i]] = std::<span class=\"built_in\">move</span>(tmp_ptr);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  new_root = std::<span class=\"built_in\">move</span>(stack.<span class=\"built_in\">back</span>());</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Trie</span>(new_root);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"TASK-2-Concurrent-Key-Value-Store\"><a href=\"#TASK-2-Concurrent-Key-Value-Store\" class=\"headerlink\" title=\"TASK 2 Concurrent Key-Value Store\"></a>TASK 2 Concurrent Key-Value Store</h2><blockquote>\n<p>concurrent Key-Value store需要支持 <strong>多个读者和一个写者</strong> 工作的情况<br>也就是当一个写者在创建一个新的root的时候，读者可以在old root进行读操作<br>Tire_store.cpp文件<br></p>\n</blockquote>\n<p>读操作</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">TrieStore::Get</span><span class=\"params\">(std::string_view key)</span> -&gt; std::optional&lt;ValueGuard&lt;T&gt;&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Pseudo-code:</span></span><br><span class=\"line\">  <span class=\"comment\">// (1) Take the root lock, get the root, and release the root lock. Don&#x27;t lookup the value in the</span></span><br><span class=\"line\">  <span class=\"comment\">//     trie while holding the root lock.</span></span><br><span class=\"line\">  <span class=\"comment\">// (2) Lookup the value in the trie.</span></span><br><span class=\"line\">  <span class=\"comment\">// (3) If the value is found, return a ValueGuard object that holds a reference to the value and the</span></span><br><span class=\"line\">  <span class=\"comment\">//     root. Otherwise, return std::nullopt.</span></span><br><span class=\"line\">  Trie root;</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"function\">std::lock_guard&lt;std::mutex&gt; <span class=\"title\">guard</span><span class=\"params\">(root_lock_)</span></span>;</span><br><span class=\"line\">    root = root_;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"type\">const</span> T *val = root.<span class=\"built_in\">Get</span>&lt;T&gt;(key);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!val) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> std::<span class=\"literal\">nullopt</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">ValueGuard</span>&lt;T&gt;(root, *val);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>写操作</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">TrieStore::Put</span><span class=\"params\">(std::string_view key, T value)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// You will need to ensure there is only one writer at a time. Think of how you can achieve this.</span></span><br><span class=\"line\">  <span class=\"comment\">// The logic should be somehow similar to `TrieStore::Get`.</span></span><br><span class=\"line\">  <span class=\"function\">std::lock_guard&lt;std::mutex&gt; <span class=\"title\">guard</span><span class=\"params\">(write_lock_)</span></span>;</span><br><span class=\"line\">  Trie root;</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"function\">std::lock_guard&lt;std::mutex&gt; <span class=\"title\">guard1</span><span class=\"params\">(root_lock_)</span></span>;</span><br><span class=\"line\">    root = root_;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  Trie new_root = root.<span class=\"built_in\">Put</span>&lt;T&gt;(key, std::<span class=\"built_in\">move</span>(value));</span><br><span class=\"line\"></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"function\">std::lock_guard&lt;std::mutex&gt; <span class=\"title\">guard1</span><span class=\"params\">(root_lock_)</span></span>;</span><br><span class=\"line\">    root_ = new_root;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">TrieStore::Remove</span><span class=\"params\">(std::string_view key)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// You will need to ensure there is only one writer at a time. Think of how you can achieve this.</span></span><br><span class=\"line\">  <span class=\"comment\">// The logic should be somehow similar to `TrieStore::Get`.</span></span><br><span class=\"line\">  <span class=\"function\">std::lock_guard&lt;std::mutex&gt; <span class=\"title\">guard</span><span class=\"params\">(write_lock_)</span></span>;</span><br><span class=\"line\">  Trie root;</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"function\">std::lock_guard&lt;std::mutex&gt; <span class=\"title\">guard1</span><span class=\"params\">(root_lock_)</span></span>;</span><br><span class=\"line\">    root = root_;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  Trie new_root = root.<span class=\"built_in\">Remove</span>(key);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"function\">std::lock_guard&lt;std::mutex&gt; <span class=\"title\">guard1</span><span class=\"params\">(root_lock_)</span></span>;</span><br><span class=\"line\">    root_ = new_root;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"TASK-3-Debugging\"><a href=\"#TASK-3-Debugging\" class=\"headerlink\" title=\"TASK 3 Debugging\"></a>TASK 3 Debugging</h2><p>skip…….</p>\n<h2 id=\"TASK-4-SQL-String-Functions\"><a href=\"#TASK-4-SQL-String-Functions\" class=\"headerlink\" title=\"TASK 4 SQL String Functions\"></a>TASK 4 SQL String Functions</h2><p>实现Upper方法和Lower方法<br>src&#x2F;include&#x2F;execution&#x2F;string_expression.h</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">Compute</span><span class=\"params\">(<span class=\"type\">const</span> std::string &amp;val)</span> <span class=\"type\">const</span> -&gt; std::string </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO(student): implement upper / lower.</span></span><br><span class=\"line\">    std::string res;</span><br><span class=\"line\">    res.<span class=\"built_in\">resize</span>(val.<span class=\"built_in\">length</span>());</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (expr_type_) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> StringExpressionType::Lower:</span><br><span class=\"line\">        std::<span class=\"built_in\">transform</span>(val.<span class=\"built_in\">begin</span>(), val.<span class=\"built_in\">end</span>(), res.<span class=\"built_in\">begin</span>(), ::tolower);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> StringExpressionType::Upper:</span><br><span class=\"line\">        std::<span class=\"built_in\">transform</span>(val.<span class=\"built_in\">begin</span>(), val.<span class=\"built_in\">end</span>(), res.<span class=\"built_in\">begin</span>(), ::toupper);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果如下:<br><br><img src=\"/../images/cmu15445-project0/4.png\" alt=\"img\"></p>\n<p>测试通过截图：<br><br><img src=\"/../images/cmu15445-project0/5.png\" alt=\"img\"></p>\n"},{"title":"cmu15445-project1","date":"2024-02-26T11:58:49.000Z","_content":"\n## project1的任务就是实现一个Buffer Pool Manager<br/>\nDBMS启动时会从OS申请一片内存区域，即Buffer Pool，并将这块区域划分成大小相同的pages，为了与disk pages区别，通常称为frames，当DBMS请求一个disk page时，它首先需要被复制到Buffer Pool的一个frame中。当Buffer Pool空间不足时，需要采取某种replacement policy，淘汰已有的page。\n![img](../images/cmu15445-project1/1.png)\n\nquestion 1:\n为什么不使用OS自带的磁盘管理模块，OS为开发者提供了mmap这样的调用，使开发者能够依赖OS自动管理数据在内外存之间的移动？\n> DBMS比OS拥有更多、更充分的知识来决定数据移动的移动和数量，具体包括\n> 1. 将dirty pages按正确的顺序写到磁盘\n> 2. 根据具体情况预获取数据\n> 3. 定制化缓存置换策略\n\n同时DBMS会维护一个page table，负责记录每个page在内存中的位置，以及是否被写过(Dirty Flag),是否被引用或引用计数(Pin/Reference Counter)等元信息，如下图所示:\n\n![img](../images/cmu15445-project1/2.png)\n\n当page table中的某page被引用时，会记录引用数(pin/reference),表示该page正在被使用，空间不够时不应该被移除；当被请求的page不再page table中时，DBMS会申请一个latch(lock的别名)，表示该entry被占用，然后从disk中读取相关page到buffer pool，释放latch\n\n![img](../images/cmu15445-project1/3.png)\n\n## Buffer Replacement Policies\n### LRU\n维护每个page上一次被访问的时间戳，每次移除时间戳最早的page\n\n### Clock\nClock是LRU的近似策略，它不需要每个page上次被访问的时间戳，而是为每个page保存一个reference\n- 每当page被访问时，reference bit设置为1\n- 每当需要移动page时，从上次访问的位置开始，按顺序轮询，每个page的reference bit，若该bit为1，则重置为0；若该bit为0，则移除该page\n\n### LRU-K\n保存每个page的最后K次访问时间戳，利用这些时间戳来估计它们下次被访问的时间，通常K取1就能获得很好的效果。\n\n## Task#1 LRU-K Replacement Policy\n实现LRUKReplacer\n实现策略:\n> LRU-K算法驱逐replacer的所有frame中backward k-distance最大的frame<br/>\nbackward k-distance计算方式:当前时间戳与之前k次访问的时间戳之间的时间差。<br/>\n历史访问次数少于k的帧被赋予+inf作为其backward k-distance,当多个frame具有+inf backward k-distance时，replacer将驱逐具有最早总体时间戳的frame<br/>\n\n### 代码实现：<br/>\n一个LRUKNode对应一个frame\n```cpp\nclass LRUKNode {\n public:\n  /** History of last seen K timestamps of this page. Least recent timestamp stored in front. */\n  std::list<size_t> history_;//记录一批时间戳\n  frame_id_t fid_;//\n  bool is_evictable_{false};\n};\n```\n```cpp \nclass LRUKReplacer {\n  std::unordered_map<frame_id_t, LRUKNode> node_store_;//frame LRUKNode couple\n  size_t current_timestamp_{0};//当前时间戳\n  //replacer_size_ >= curr_size\n  size_t curr_size_{0};//curr_size为当前is_evictable被标记为true的frame数量\n  size_t replacer_size_;//replacer_size == num_frames\n  size_t k_;\n  std::mutex latch_;\n};\n```\n\nEvict函数\n> 驱逐一个frame，驱逐成功返回true，否则返回false\n```cpp\nauto LRUKReplacer::Evict(frame_id_t *frame_id) -> bool {\n  std::lock_guard<std::mutex> guard(latch_);\n  *frame_id = -1;\n  for (auto &p : node_store_) {\n    if (p.second.is_evictable_) {//通过Judge函数选择backward k-distance中最大的frame\n      if (*frame_id == -1 || Judge(p.second, node_store_[*frame_id])) {\n        *frame_id = p.second.fid_;\n      }\n    }\n  }\n  if (*frame_id != -1) {\n    node_store_.erase(*frame_id);\n    --curr_size_;\n    return true;\n  }\n  return false;\n}\n```\n\nJudge函数实现如下\n```cpp\n//lhs的backward k-distance大于rhs的backward k-distance 返回true 否则返回false\n  auto Judge(const LRUKNode &lhs, const LRUKNode &rhs) const -> bool {\n    if (rhs.history_.size() == k_ && lhs.history_.size() < k_) {\n      return true;\n    }\n    if (rhs.history_.size() < k_ && lhs.history_.size() == k_) {\n      return false;\n    }\n    //比较最早的时间戳,若lhs的时间戳更小，则返回true 否则返回false\n    return lhs.history_.back() < rhs.history_.back();\n  }\n```\n\nRecordAccess函数\n> 1. 如果访问的frame_id大于等于replacer_size抛出异常\n> 2. 否则，对该frame对应的LRUKNode添加时间戳，并且保证history_列表长度不超过k_\n```cpp\nvoid LRUKReplacer::RecordAccess(frame_id_t frame_id, [[maybe_unused]] AccessType access_type) {\n  std::lock_guard<std::mutex> lock_guard(latch_);\n  if (frame_id >= static_cast<int>(replacer_size_)) {\n    throw Exception(\"frame_id is larger than or equal to replacer_size_\");\n  }\n  if (node_store_.count(frame_id) == 0) {\n    node_store_[frame_id] = LRUKNode();\n    node_store_[frame_id].fid_ = frame_id;\n  }\n  auto &node = node_store_[frame_id];\n  node.history_.push_front(current_timestamp_++);\n  while (node.history_.size() > k_) {\n    node.history_.pop_back();\n  }\n}\n```\n\nSetEvictable函数\n> 将某个frame的is_evictable标记为set_evictable,如果该frame未被占用，抛出异常\n> false->true   curr_size_++\n> true->false   curr_size_--\n```cpp\nvoid LRUKReplacer::SetEvictable(frame_id_t frame_id, bool set_evictable) {\n  std::lock_guard<std::mutex> lock_guard(latch_);\n  if (node_store_.count(frame_id) <= 0) {\n    throw Exception(\"frame_id should be used\");\n  }\n  if (!node_store_[frame_id].is_evictable_ && set_evictable) {  // false -> true\n    curr_size_++;\n  } else if (node_store_[frame_id].is_evictable_ && !set_evictable) {  // true -> false\n    curr_size_--;\n  }\n  node_store_[frame_id].is_evictable_ = set_evictable;\n}\n```\n\nRemove函数\n> 如果删除的frame不存在直接返回\n> 如果删除的frame的is_evictable_未被设置为true，抛出异常\n> 删除frame，--curr_size_\n```cpp\nvoid LRUKReplacer::Remove(frame_id_t frame_id) {\n  std::lock_guard<std::mutex> lock_guard(latch_);\n  if (node_store_.count(frame_id) <= 0) {\n    return;\n  }\n  if (!node_store_[frame_id].is_evictable_) {\n    throw Exception(\"Remove a non-evictable frame\");\n  }\n  node_store_.erase(frame_id);\n  --curr_size_;\n}\n```\ntask1本地测试：\n![img](../images/cmu15445-project1/5.png)\n\n\n## Task#2 -Buffer Pool Manager\n完成LRU-K替换策略之后，接下来需要实现Buffer Pool的基本功能。对于DBMS来说，Buffer Pool可以隐藏内存和磁盘交互的细节，包括脏页面写回磁盘的过程。\n\nPage\n```cpp\nclass Page {\n  char *data_;//4096字节\n  page_id_t page_id;//physical page id\n  int pin_count_;//该Page对象的引用计数\n  bool is_dirty_;//脏位\n  ReaderWriterLatch rwlatch_;//读写锁\n};\n```\n\nBufferPoolManager\n```cpp\nclass BufferPoolManager {\n    /** Number of pages in the buffer pool. */\n  const size_t pool_size_;\n  /** The next page id to be allocated  */\n  std::atomic<page_id_t> next_page_id_ = 0;\n\n  /** Array of buffer pool pages. */\n  Page *pages_;\n  /** Pointer to the disk manager. */\n  DiskManager *disk_manager_ __attribute__((__unused__));\n  /** Pointer to the log manager. Please ignore this for P1. */\n  LogManager *log_manager_ __attribute__((__unused__));\n  /** Page table for keeping track of buffer pool pages. */\n  std::unordered_map<page_id_t, frame_id_t> page_table_;\n  /** Replacer to find unpinned pages for replacement. */\n  std::unique_ptr<LRUKReplacer> replacer_;\n  /** List of free frames that don't have any pages on them. */\n  std::list<frame_id_t> free_list_;\n  /** This latch protects shared data structures. We recommend updating this comment to describe what it protects. */\n  std::mutex latch_;\n};\n```\nBufferPoolManager初始化时，分配pool_size_个Page对象，LRUKReplacer的num_frame也设置为pool_size_\n\n### 代码实现：<br/>\nNewPage函数实现：\n```cpp\nauto BufferPoolManager::NewPage(page_id_t *page_id) -> Page * {\n  frame_id_t free_frame_id = -1;\n  std::lock_guard<std::mutex> guard(latch_);\n  //获取一个空闲的frame\n  if (!free_list_.empty()) {//存在空的frame\n    free_frame_id = free_list_.front();\n    free_list_.pop_front();\n  } else {//不存在空的frame\n    if (!replacer_->Evict(&free_frame_id)) {//通过LRUKReplacer得到一个空闲的frame\n      return nullptr;\n    }\n    if (pages_[free_frame_id].IsDirty()) {//如果被驱逐的frame对应的page为脏页，需要进行写回操作\n      disk_manager_->WritePage(pages_[free_frame_id].page_id_, pages_[free_frame_id].data_);\n    }\n    page_table_.erase(pages_[free_frame_id].page_id_);//将page_table_中该frame对应的page_id_删除\n    pages_[free_frame_id].ResetMemory();//重置该改frame对应的内存\n  }\n  *page_id = AllocatePage();\n  pages_[free_frame_id].page_id_ = *page_id;\n  pages_[free_frame_id].pin_count_ = 1;\n  pages_[free_frame_id].is_dirty_ = false;\n  page_table_[*page_id] = free_frame_id;\n\n  replacer_->RecordAccess(free_frame_id);\n  replacer_->SetEvictable(free_frame_id, false);  // no use\n  return pages_ + free_frame_id;\n}\n```\n\nFetchPage函数实现:\n```cpp\nauto BufferPoolManager::FetchPage(page_id_t page_id, [[maybe_unused]] AccessType access_type) -> Page * {\n  BUSTUB_ASSERT(page_id != INVALID_PAGE_ID, \"page_id is equal to INVALID_PAGE_ID\");\n  std::lock_guard<std::mutex> guard(latch_);\n  if (page_table_.count(page_id) != 0) {//如果page_table_中存在该page_id\n    pages_[page_table_[page_id]].pin_count_++;//该page的引用计数增加\n    replacer_->RecordAccess(page_table_[page_id]);//增加该page对应的frame的访问时间戳\n    replacer_->SetEvictable(page_table_[page_id], false);\n    return pages_ + page_table_[page_id];\n  }\n\n  frame_id_t free_frame_id = -1;\n  //获取一个空闲的frame\n  if (!free_list_.empty()) {\n    free_frame_id = free_list_.front();\n    free_list_.pop_front();\n  } else {\n    if (!replacer_->Evict(&free_frame_id)) {//通过LRUKReplacer得到一个空闲的frame\n      return nullptr;\n    }\n    if (pages_[free_frame_id].IsDirty()) {//如果被驱逐的frame对应的page为脏页，需要进行写回操作\n      disk_manager_->WritePage(pages_[free_frame_id].page_id_, pages_[free_frame_id].data_);\n    }\n    page_table_.erase(pages_[free_frame_id].page_id_);//将page_table_中该frame对应的page_id_删除\n    pages_[free_frame_id].ResetMemory();//重置该改frame对应的内存\n  }\n\n  pages_[free_frame_id].page_id_ = page_id;\n  pages_[free_frame_id].pin_count_ = 1;\n  pages_[free_frame_id].is_dirty_ = false;\n  page_table_[page_id] = free_frame_id;\n  disk_manager_->ReadPage(page_id, pages_[free_frame_id].data_);//读取该page_id对应的物理页\n\n  replacer_->RecordAccess(free_frame_id);//增加该frame的访问时间戳\n  replacer_->SetEvictable(free_frame_id, false);  // no use\n  return pages_ + free_frame_id;\n}\n```\nUnpinPage函数实现：<br>\n需要注意的是入参is_dirty不能破坏已经置为脏的状态，这里用 | 运算符来实现\n```cpp\nauto BufferPoolManager::UnpinPage(page_id_t page_id, bool is_dirty, [[maybe_unused]] AccessType access_type) -> bool {\n  std::lock_guard<std::mutex> guard(latch_);\n  if (page_table_.count(page_id) <= 0) {\n    return false;\n  }\n  frame_id_t frame_id = page_table_[page_id];\n  if (pages_[frame_id].pin_count_ == 0) {\n    return false;\n  }\n\n  if (--pages_[frame_id].pin_count_ == 0) {//引用计数减为0时，将该frame设置为evictable\n    replacer_->SetEvictable(frame_id, true);\n  }\n  pages_[frame_id].is_dirty_ |= is_dirty;\n  return true;\n}\n```\n\nFlushPage函数实现:<br>\n强制将page_id对应的Page的内容写回磁盘，并将该Page对应脏位置为false\n```cpp\nauto BufferPoolManager::FlushPage(page_id_t page_id) -> bool {\n  std::lock_guard<std::mutex> guard(latch_);\n  if (page_table_.count(page_id) <= 0) {\n    return false;\n  }\n  frame_id_t frame_id = page_table_[page_id];\n  disk_manager_->WritePage(page_id, pages_[frame_id].data_);\n  pages_[frame_id].is_dirty_ = false;\n  return true;\n}\n```\n\nFlushAllPages函数实现:\n写回所有在内存中的Page\n\nDeletePage函数实现：\n```cpp\nauto BufferPoolManager::DeletePage(page_id_t page_id) -> bool {\n  std::lock_guard<std::mutex> guard(latch_);\n  if (page_table_.count(page_id) <= 0) {\n    return true;\n  }\n  frame_id_t frame_id = page_table_[page_id];\n  if (pages_[frame_id].pin_count_ != 0) {\n    return false;\n  }\n  //只有当该page_id对应的Page的引用计数为0时可以进行删除\n  page_table_.erase(page_id);//page_table_删除该page_id\n  replacer_->SetEvictable(frame_id, true);//replacer驱逐该frame\n  replacer_->Remove(frame_id);\n  free_list_.push_back(frame_id);//将该frame加入free_list\n  //该Page初始化\n  pages_[frame_id].is_dirty_ = false;\n  pages_[frame_id].page_id_ = INVALID_PAGE_ID;\n  pages_[frame_id].ResetMemory();\n  DeallocatePage(page_id);\n  return true;\n}\n```\ntask2本地测试:\n![img](../images/cmu15445-project1/6.png)\n\n## Task#3 Read/Write Page Guards\nFetchPage和NewPage函数返回指向pages的指针，并且pages已经被pinned，并且当一个page不再需要时，要调用UnpinPage。另一方面，如果忘记调用UnPinPage，该Page将永远不会被evict。于是PageGuard就派上用场了\n\nBasicPageGuard\n思路：BasicPageGuard析构时调用Page的UnpinPage函数，并且BasicPageGuard中保存变量is_dirty_,调用AsMut或GetDataMut函数时将is_dirty_设置为true\n\nWritePageGuard和ReadPageGuard\n思路：与BasicPageGuard思路相似，析构函数调用UnpinPage多了一步释放Page的写锁和读锁\n\nFetchPageBasic、FetchPageRead、FetchPageWrite和NewPageGuarded的实现代码如下:\n\n```cpp\nauto BufferPoolManager::FetchPageBasic(page_id_t page_id) -> BasicPageGuard { return {this, FetchPage(page_id)}; }\n\nauto BufferPoolManager::FetchPageRead(page_id_t page_id) -> ReadPageGuard {\n  Page *page = FetchPage(page_id);\n  if (page != nullptr) {\n    page->RLatch();\n  }\n  return {this, page};\n}\n\nauto BufferPoolManager::FetchPageWrite(page_id_t page_id) -> WritePageGuard {\n  Page *page = FetchPage(page_id);\n  if (page != nullptr) {\n    page->WLatch();\n  }\n  return {this, page};\n}\n\nauto BufferPoolManager::NewPageGuarded(page_id_t *page_id) -> BasicPageGuard { return {this, NewPage(page_id)}; }\n```\ntask3本地测试：\n![img](../images/cmu15445-project1/7.png)\n\n测试通过截图：\n![img](../images/cmu15445-project1/4.png)\n\n","source":"_posts/cmu15445-project1.md","raw":"---\ntitle: cmu15445-project1\ndate: 2024-02-26 03:58:49\ntags: cmu15445—2023\ncategories: cmu15445-2023\n---\n\n## project1的任务就是实现一个Buffer Pool Manager<br/>\nDBMS启动时会从OS申请一片内存区域，即Buffer Pool，并将这块区域划分成大小相同的pages，为了与disk pages区别，通常称为frames，当DBMS请求一个disk page时，它首先需要被复制到Buffer Pool的一个frame中。当Buffer Pool空间不足时，需要采取某种replacement policy，淘汰已有的page。\n![img](../images/cmu15445-project1/1.png)\n\nquestion 1:\n为什么不使用OS自带的磁盘管理模块，OS为开发者提供了mmap这样的调用，使开发者能够依赖OS自动管理数据在内外存之间的移动？\n> DBMS比OS拥有更多、更充分的知识来决定数据移动的移动和数量，具体包括\n> 1. 将dirty pages按正确的顺序写到磁盘\n> 2. 根据具体情况预获取数据\n> 3. 定制化缓存置换策略\n\n同时DBMS会维护一个page table，负责记录每个page在内存中的位置，以及是否被写过(Dirty Flag),是否被引用或引用计数(Pin/Reference Counter)等元信息，如下图所示:\n\n![img](../images/cmu15445-project1/2.png)\n\n当page table中的某page被引用时，会记录引用数(pin/reference),表示该page正在被使用，空间不够时不应该被移除；当被请求的page不再page table中时，DBMS会申请一个latch(lock的别名)，表示该entry被占用，然后从disk中读取相关page到buffer pool，释放latch\n\n![img](../images/cmu15445-project1/3.png)\n\n## Buffer Replacement Policies\n### LRU\n维护每个page上一次被访问的时间戳，每次移除时间戳最早的page\n\n### Clock\nClock是LRU的近似策略，它不需要每个page上次被访问的时间戳，而是为每个page保存一个reference\n- 每当page被访问时，reference bit设置为1\n- 每当需要移动page时，从上次访问的位置开始，按顺序轮询，每个page的reference bit，若该bit为1，则重置为0；若该bit为0，则移除该page\n\n### LRU-K\n保存每个page的最后K次访问时间戳，利用这些时间戳来估计它们下次被访问的时间，通常K取1就能获得很好的效果。\n\n## Task#1 LRU-K Replacement Policy\n实现LRUKReplacer\n实现策略:\n> LRU-K算法驱逐replacer的所有frame中backward k-distance最大的frame<br/>\nbackward k-distance计算方式:当前时间戳与之前k次访问的时间戳之间的时间差。<br/>\n历史访问次数少于k的帧被赋予+inf作为其backward k-distance,当多个frame具有+inf backward k-distance时，replacer将驱逐具有最早总体时间戳的frame<br/>\n\n### 代码实现：<br/>\n一个LRUKNode对应一个frame\n```cpp\nclass LRUKNode {\n public:\n  /** History of last seen K timestamps of this page. Least recent timestamp stored in front. */\n  std::list<size_t> history_;//记录一批时间戳\n  frame_id_t fid_;//\n  bool is_evictable_{false};\n};\n```\n```cpp \nclass LRUKReplacer {\n  std::unordered_map<frame_id_t, LRUKNode> node_store_;//frame LRUKNode couple\n  size_t current_timestamp_{0};//当前时间戳\n  //replacer_size_ >= curr_size\n  size_t curr_size_{0};//curr_size为当前is_evictable被标记为true的frame数量\n  size_t replacer_size_;//replacer_size == num_frames\n  size_t k_;\n  std::mutex latch_;\n};\n```\n\nEvict函数\n> 驱逐一个frame，驱逐成功返回true，否则返回false\n```cpp\nauto LRUKReplacer::Evict(frame_id_t *frame_id) -> bool {\n  std::lock_guard<std::mutex> guard(latch_);\n  *frame_id = -1;\n  for (auto &p : node_store_) {\n    if (p.second.is_evictable_) {//通过Judge函数选择backward k-distance中最大的frame\n      if (*frame_id == -1 || Judge(p.second, node_store_[*frame_id])) {\n        *frame_id = p.second.fid_;\n      }\n    }\n  }\n  if (*frame_id != -1) {\n    node_store_.erase(*frame_id);\n    --curr_size_;\n    return true;\n  }\n  return false;\n}\n```\n\nJudge函数实现如下\n```cpp\n//lhs的backward k-distance大于rhs的backward k-distance 返回true 否则返回false\n  auto Judge(const LRUKNode &lhs, const LRUKNode &rhs) const -> bool {\n    if (rhs.history_.size() == k_ && lhs.history_.size() < k_) {\n      return true;\n    }\n    if (rhs.history_.size() < k_ && lhs.history_.size() == k_) {\n      return false;\n    }\n    //比较最早的时间戳,若lhs的时间戳更小，则返回true 否则返回false\n    return lhs.history_.back() < rhs.history_.back();\n  }\n```\n\nRecordAccess函数\n> 1. 如果访问的frame_id大于等于replacer_size抛出异常\n> 2. 否则，对该frame对应的LRUKNode添加时间戳，并且保证history_列表长度不超过k_\n```cpp\nvoid LRUKReplacer::RecordAccess(frame_id_t frame_id, [[maybe_unused]] AccessType access_type) {\n  std::lock_guard<std::mutex> lock_guard(latch_);\n  if (frame_id >= static_cast<int>(replacer_size_)) {\n    throw Exception(\"frame_id is larger than or equal to replacer_size_\");\n  }\n  if (node_store_.count(frame_id) == 0) {\n    node_store_[frame_id] = LRUKNode();\n    node_store_[frame_id].fid_ = frame_id;\n  }\n  auto &node = node_store_[frame_id];\n  node.history_.push_front(current_timestamp_++);\n  while (node.history_.size() > k_) {\n    node.history_.pop_back();\n  }\n}\n```\n\nSetEvictable函数\n> 将某个frame的is_evictable标记为set_evictable,如果该frame未被占用，抛出异常\n> false->true   curr_size_++\n> true->false   curr_size_--\n```cpp\nvoid LRUKReplacer::SetEvictable(frame_id_t frame_id, bool set_evictable) {\n  std::lock_guard<std::mutex> lock_guard(latch_);\n  if (node_store_.count(frame_id) <= 0) {\n    throw Exception(\"frame_id should be used\");\n  }\n  if (!node_store_[frame_id].is_evictable_ && set_evictable) {  // false -> true\n    curr_size_++;\n  } else if (node_store_[frame_id].is_evictable_ && !set_evictable) {  // true -> false\n    curr_size_--;\n  }\n  node_store_[frame_id].is_evictable_ = set_evictable;\n}\n```\n\nRemove函数\n> 如果删除的frame不存在直接返回\n> 如果删除的frame的is_evictable_未被设置为true，抛出异常\n> 删除frame，--curr_size_\n```cpp\nvoid LRUKReplacer::Remove(frame_id_t frame_id) {\n  std::lock_guard<std::mutex> lock_guard(latch_);\n  if (node_store_.count(frame_id) <= 0) {\n    return;\n  }\n  if (!node_store_[frame_id].is_evictable_) {\n    throw Exception(\"Remove a non-evictable frame\");\n  }\n  node_store_.erase(frame_id);\n  --curr_size_;\n}\n```\ntask1本地测试：\n![img](../images/cmu15445-project1/5.png)\n\n\n## Task#2 -Buffer Pool Manager\n完成LRU-K替换策略之后，接下来需要实现Buffer Pool的基本功能。对于DBMS来说，Buffer Pool可以隐藏内存和磁盘交互的细节，包括脏页面写回磁盘的过程。\n\nPage\n```cpp\nclass Page {\n  char *data_;//4096字节\n  page_id_t page_id;//physical page id\n  int pin_count_;//该Page对象的引用计数\n  bool is_dirty_;//脏位\n  ReaderWriterLatch rwlatch_;//读写锁\n};\n```\n\nBufferPoolManager\n```cpp\nclass BufferPoolManager {\n    /** Number of pages in the buffer pool. */\n  const size_t pool_size_;\n  /** The next page id to be allocated  */\n  std::atomic<page_id_t> next_page_id_ = 0;\n\n  /** Array of buffer pool pages. */\n  Page *pages_;\n  /** Pointer to the disk manager. */\n  DiskManager *disk_manager_ __attribute__((__unused__));\n  /** Pointer to the log manager. Please ignore this for P1. */\n  LogManager *log_manager_ __attribute__((__unused__));\n  /** Page table for keeping track of buffer pool pages. */\n  std::unordered_map<page_id_t, frame_id_t> page_table_;\n  /** Replacer to find unpinned pages for replacement. */\n  std::unique_ptr<LRUKReplacer> replacer_;\n  /** List of free frames that don't have any pages on them. */\n  std::list<frame_id_t> free_list_;\n  /** This latch protects shared data structures. We recommend updating this comment to describe what it protects. */\n  std::mutex latch_;\n};\n```\nBufferPoolManager初始化时，分配pool_size_个Page对象，LRUKReplacer的num_frame也设置为pool_size_\n\n### 代码实现：<br/>\nNewPage函数实现：\n```cpp\nauto BufferPoolManager::NewPage(page_id_t *page_id) -> Page * {\n  frame_id_t free_frame_id = -1;\n  std::lock_guard<std::mutex> guard(latch_);\n  //获取一个空闲的frame\n  if (!free_list_.empty()) {//存在空的frame\n    free_frame_id = free_list_.front();\n    free_list_.pop_front();\n  } else {//不存在空的frame\n    if (!replacer_->Evict(&free_frame_id)) {//通过LRUKReplacer得到一个空闲的frame\n      return nullptr;\n    }\n    if (pages_[free_frame_id].IsDirty()) {//如果被驱逐的frame对应的page为脏页，需要进行写回操作\n      disk_manager_->WritePage(pages_[free_frame_id].page_id_, pages_[free_frame_id].data_);\n    }\n    page_table_.erase(pages_[free_frame_id].page_id_);//将page_table_中该frame对应的page_id_删除\n    pages_[free_frame_id].ResetMemory();//重置该改frame对应的内存\n  }\n  *page_id = AllocatePage();\n  pages_[free_frame_id].page_id_ = *page_id;\n  pages_[free_frame_id].pin_count_ = 1;\n  pages_[free_frame_id].is_dirty_ = false;\n  page_table_[*page_id] = free_frame_id;\n\n  replacer_->RecordAccess(free_frame_id);\n  replacer_->SetEvictable(free_frame_id, false);  // no use\n  return pages_ + free_frame_id;\n}\n```\n\nFetchPage函数实现:\n```cpp\nauto BufferPoolManager::FetchPage(page_id_t page_id, [[maybe_unused]] AccessType access_type) -> Page * {\n  BUSTUB_ASSERT(page_id != INVALID_PAGE_ID, \"page_id is equal to INVALID_PAGE_ID\");\n  std::lock_guard<std::mutex> guard(latch_);\n  if (page_table_.count(page_id) != 0) {//如果page_table_中存在该page_id\n    pages_[page_table_[page_id]].pin_count_++;//该page的引用计数增加\n    replacer_->RecordAccess(page_table_[page_id]);//增加该page对应的frame的访问时间戳\n    replacer_->SetEvictable(page_table_[page_id], false);\n    return pages_ + page_table_[page_id];\n  }\n\n  frame_id_t free_frame_id = -1;\n  //获取一个空闲的frame\n  if (!free_list_.empty()) {\n    free_frame_id = free_list_.front();\n    free_list_.pop_front();\n  } else {\n    if (!replacer_->Evict(&free_frame_id)) {//通过LRUKReplacer得到一个空闲的frame\n      return nullptr;\n    }\n    if (pages_[free_frame_id].IsDirty()) {//如果被驱逐的frame对应的page为脏页，需要进行写回操作\n      disk_manager_->WritePage(pages_[free_frame_id].page_id_, pages_[free_frame_id].data_);\n    }\n    page_table_.erase(pages_[free_frame_id].page_id_);//将page_table_中该frame对应的page_id_删除\n    pages_[free_frame_id].ResetMemory();//重置该改frame对应的内存\n  }\n\n  pages_[free_frame_id].page_id_ = page_id;\n  pages_[free_frame_id].pin_count_ = 1;\n  pages_[free_frame_id].is_dirty_ = false;\n  page_table_[page_id] = free_frame_id;\n  disk_manager_->ReadPage(page_id, pages_[free_frame_id].data_);//读取该page_id对应的物理页\n\n  replacer_->RecordAccess(free_frame_id);//增加该frame的访问时间戳\n  replacer_->SetEvictable(free_frame_id, false);  // no use\n  return pages_ + free_frame_id;\n}\n```\nUnpinPage函数实现：<br>\n需要注意的是入参is_dirty不能破坏已经置为脏的状态，这里用 | 运算符来实现\n```cpp\nauto BufferPoolManager::UnpinPage(page_id_t page_id, bool is_dirty, [[maybe_unused]] AccessType access_type) -> bool {\n  std::lock_guard<std::mutex> guard(latch_);\n  if (page_table_.count(page_id) <= 0) {\n    return false;\n  }\n  frame_id_t frame_id = page_table_[page_id];\n  if (pages_[frame_id].pin_count_ == 0) {\n    return false;\n  }\n\n  if (--pages_[frame_id].pin_count_ == 0) {//引用计数减为0时，将该frame设置为evictable\n    replacer_->SetEvictable(frame_id, true);\n  }\n  pages_[frame_id].is_dirty_ |= is_dirty;\n  return true;\n}\n```\n\nFlushPage函数实现:<br>\n强制将page_id对应的Page的内容写回磁盘，并将该Page对应脏位置为false\n```cpp\nauto BufferPoolManager::FlushPage(page_id_t page_id) -> bool {\n  std::lock_guard<std::mutex> guard(latch_);\n  if (page_table_.count(page_id) <= 0) {\n    return false;\n  }\n  frame_id_t frame_id = page_table_[page_id];\n  disk_manager_->WritePage(page_id, pages_[frame_id].data_);\n  pages_[frame_id].is_dirty_ = false;\n  return true;\n}\n```\n\nFlushAllPages函数实现:\n写回所有在内存中的Page\n\nDeletePage函数实现：\n```cpp\nauto BufferPoolManager::DeletePage(page_id_t page_id) -> bool {\n  std::lock_guard<std::mutex> guard(latch_);\n  if (page_table_.count(page_id) <= 0) {\n    return true;\n  }\n  frame_id_t frame_id = page_table_[page_id];\n  if (pages_[frame_id].pin_count_ != 0) {\n    return false;\n  }\n  //只有当该page_id对应的Page的引用计数为0时可以进行删除\n  page_table_.erase(page_id);//page_table_删除该page_id\n  replacer_->SetEvictable(frame_id, true);//replacer驱逐该frame\n  replacer_->Remove(frame_id);\n  free_list_.push_back(frame_id);//将该frame加入free_list\n  //该Page初始化\n  pages_[frame_id].is_dirty_ = false;\n  pages_[frame_id].page_id_ = INVALID_PAGE_ID;\n  pages_[frame_id].ResetMemory();\n  DeallocatePage(page_id);\n  return true;\n}\n```\ntask2本地测试:\n![img](../images/cmu15445-project1/6.png)\n\n## Task#3 Read/Write Page Guards\nFetchPage和NewPage函数返回指向pages的指针，并且pages已经被pinned，并且当一个page不再需要时，要调用UnpinPage。另一方面，如果忘记调用UnPinPage，该Page将永远不会被evict。于是PageGuard就派上用场了\n\nBasicPageGuard\n思路：BasicPageGuard析构时调用Page的UnpinPage函数，并且BasicPageGuard中保存变量is_dirty_,调用AsMut或GetDataMut函数时将is_dirty_设置为true\n\nWritePageGuard和ReadPageGuard\n思路：与BasicPageGuard思路相似，析构函数调用UnpinPage多了一步释放Page的写锁和读锁\n\nFetchPageBasic、FetchPageRead、FetchPageWrite和NewPageGuarded的实现代码如下:\n\n```cpp\nauto BufferPoolManager::FetchPageBasic(page_id_t page_id) -> BasicPageGuard { return {this, FetchPage(page_id)}; }\n\nauto BufferPoolManager::FetchPageRead(page_id_t page_id) -> ReadPageGuard {\n  Page *page = FetchPage(page_id);\n  if (page != nullptr) {\n    page->RLatch();\n  }\n  return {this, page};\n}\n\nauto BufferPoolManager::FetchPageWrite(page_id_t page_id) -> WritePageGuard {\n  Page *page = FetchPage(page_id);\n  if (page != nullptr) {\n    page->WLatch();\n  }\n  return {this, page};\n}\n\nauto BufferPoolManager::NewPageGuarded(page_id_t *page_id) -> BasicPageGuard { return {this, NewPage(page_id)}; }\n```\ntask3本地测试：\n![img](../images/cmu15445-project1/7.png)\n\n测试通过截图：\n![img](../images/cmu15445-project1/4.png)\n\n","slug":"cmu15445-project1","published":1,"updated":"2024-02-27T05:28:57.544Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt3xhf9k0000dzjxeft50b8h","content":"<h2 id=\"project1的任务就是实现一个Buffer-Pool-Manager\"><a href=\"#project1的任务就是实现一个Buffer-Pool-Manager\" class=\"headerlink\" title=\"project1的任务就是实现一个Buffer Pool Manager\"></a>project1的任务就是实现一个Buffer Pool Manager<br></h2><p>DBMS启动时会从OS申请一片内存区域，即Buffer Pool，并将这块区域划分成大小相同的pages，为了与disk pages区别，通常称为frames，当DBMS请求一个disk page时，它首先需要被复制到Buffer Pool的一个frame中。当Buffer Pool空间不足时，需要采取某种replacement policy，淘汰已有的page。<br><img src=\"/../images/cmu15445-project1/1.png\" alt=\"img\"></p>\n<p>question 1:<br>为什么不使用OS自带的磁盘管理模块，OS为开发者提供了mmap这样的调用，使开发者能够依赖OS自动管理数据在内外存之间的移动？</p>\n<blockquote>\n<p>DBMS比OS拥有更多、更充分的知识来决定数据移动的移动和数量，具体包括</p>\n<ol>\n<li>将dirty pages按正确的顺序写到磁盘</li>\n<li>根据具体情况预获取数据</li>\n<li>定制化缓存置换策略</li>\n</ol>\n</blockquote>\n<p>同时DBMS会维护一个page table，负责记录每个page在内存中的位置，以及是否被写过(Dirty Flag),是否被引用或引用计数(Pin&#x2F;Reference Counter)等元信息，如下图所示:</p>\n<p><img src=\"/../images/cmu15445-project1/2.png\" alt=\"img\"></p>\n<p>当page table中的某page被引用时，会记录引用数(pin&#x2F;reference),表示该page正在被使用，空间不够时不应该被移除；当被请求的page不再page table中时，DBMS会申请一个latch(lock的别名)，表示该entry被占用，然后从disk中读取相关page到buffer pool，释放latch</p>\n<p><img src=\"/../images/cmu15445-project1/3.png\" alt=\"img\"></p>\n<h2 id=\"Buffer-Replacement-Policies\"><a href=\"#Buffer-Replacement-Policies\" class=\"headerlink\" title=\"Buffer Replacement Policies\"></a>Buffer Replacement Policies</h2><h3 id=\"LRU\"><a href=\"#LRU\" class=\"headerlink\" title=\"LRU\"></a>LRU</h3><p>维护每个page上一次被访问的时间戳，每次移除时间戳最早的page</p>\n<h3 id=\"Clock\"><a href=\"#Clock\" class=\"headerlink\" title=\"Clock\"></a>Clock</h3><p>Clock是LRU的近似策略，它不需要每个page上次被访问的时间戳，而是为每个page保存一个reference</p>\n<ul>\n<li>每当page被访问时，reference bit设置为1</li>\n<li>每当需要移动page时，从上次访问的位置开始，按顺序轮询，每个page的reference bit，若该bit为1，则重置为0；若该bit为0，则移除该page</li>\n</ul>\n<h3 id=\"LRU-K\"><a href=\"#LRU-K\" class=\"headerlink\" title=\"LRU-K\"></a>LRU-K</h3><p>保存每个page的最后K次访问时间戳，利用这些时间戳来估计它们下次被访问的时间，通常K取1就能获得很好的效果。</p>\n<h2 id=\"Task-1-LRU-K-Replacement-Policy\"><a href=\"#Task-1-LRU-K-Replacement-Policy\" class=\"headerlink\" title=\"Task#1 LRU-K Replacement Policy\"></a>Task#1 LRU-K Replacement Policy</h2><p>实现LRUKReplacer<br>实现策略:</p>\n<blockquote>\n<p>LRU-K算法驱逐replacer的所有frame中backward k-distance最大的frame<br><br>backward k-distance计算方式:当前时间戳与之前k次访问的时间戳之间的时间差。<br><br>历史访问次数少于k的帧被赋予+inf作为其backward k-distance,当多个frame具有+inf backward k-distance时，replacer将驱逐具有最早总体时间戳的frame<br></p>\n</blockquote>\n<h3 id=\"代码实现：\"><a href=\"#代码实现：\" class=\"headerlink\" title=\"代码实现：\"></a>代码实现：<br></h3><p>一个LRUKNode对应一个frame</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LRUKNode</span> &#123;</span><br><span class=\"line\"> <span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"comment\">/** History of last seen K timestamps of this page. Least recent timestamp stored in front. */</span></span><br><span class=\"line\">  std::list&lt;<span class=\"type\">size_t</span>&gt; history_;<span class=\"comment\">//记录一批时间戳</span></span><br><span class=\"line\">  <span class=\"type\">frame_id_t</span> fid_;<span class=\"comment\">//</span></span><br><span class=\"line\">  <span class=\"type\">bool</span> is_evictable_&#123;<span class=\"literal\">false</span>&#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LRUKReplacer</span> &#123;</span><br><span class=\"line\">  std::unordered_map&lt;<span class=\"type\">frame_id_t</span>, LRUKNode&gt; node_store_;<span class=\"comment\">//frame LRUKNode couple</span></span><br><span class=\"line\">  <span class=\"type\">size_t</span> current_timestamp_&#123;<span class=\"number\">0</span>&#125;;<span class=\"comment\">//当前时间戳</span></span><br><span class=\"line\">  <span class=\"comment\">//replacer_size_ &gt;= curr_size</span></span><br><span class=\"line\">  <span class=\"type\">size_t</span> curr_size_&#123;<span class=\"number\">0</span>&#125;;<span class=\"comment\">//curr_size为当前is_evictable被标记为true的frame数量</span></span><br><span class=\"line\">  <span class=\"type\">size_t</span> replacer_size_;<span class=\"comment\">//replacer_size == num_frames</span></span><br><span class=\"line\">  <span class=\"type\">size_t</span> k_;</span><br><span class=\"line\">  std::mutex latch_;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>Evict函数</p>\n<blockquote>\n<p>驱逐一个frame，驱逐成功返回true，否则返回false</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">LRUKReplacer::Evict</span><span class=\"params\">(<span class=\"type\">frame_id_t</span> *frame_id)</span> -&gt; <span class=\"type\">bool</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\">std::lock_guard&lt;std::mutex&gt; <span class=\"title\">guard</span><span class=\"params\">(latch_)</span></span>;</span><br><span class=\"line\">  *frame_id = <span class=\"number\">-1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;p : node_store_) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p.second.is_evictable_) &#123;<span class=\"comment\">//通过Judge函数选择backward k-distance中最大的frame</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (*frame_id == <span class=\"number\">-1</span> || <span class=\"built_in\">Judge</span>(p.second, node_store_[*frame_id])) &#123;</span><br><span class=\"line\">        *frame_id = p.second.fid_;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (*frame_id != <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">    node_store_.<span class=\"built_in\">erase</span>(*frame_id);</span><br><span class=\"line\">    --curr_size_;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Judge函数实现如下</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//lhs的backward k-distance大于rhs的backward k-distance 返回true 否则返回false</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">Judge</span><span class=\"params\">(<span class=\"type\">const</span> LRUKNode &amp;lhs, <span class=\"type\">const</span> LRUKNode &amp;rhs)</span> <span class=\"type\">const</span> -&gt; <span class=\"type\">bool</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rhs.history_.<span class=\"built_in\">size</span>() == k_ &amp;&amp; lhs.history_.<span class=\"built_in\">size</span>() &lt; k_) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rhs.history_.<span class=\"built_in\">size</span>() &lt; k_ &amp;&amp; lhs.history_.<span class=\"built_in\">size</span>() == k_) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//比较最早的时间戳,若lhs的时间戳更小，则返回true 否则返回false</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> lhs.history_.<span class=\"built_in\">back</span>() &lt; rhs.history_.<span class=\"built_in\">back</span>();</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>RecordAccess函数</p>\n<blockquote>\n<ol>\n<li>如果访问的frame_id大于等于replacer_size抛出异常</li>\n<li>否则，对该frame对应的LRUKNode添加时间戳，并且保证history_列表长度不超过k_</li>\n</ol>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">LRUKReplacer::RecordAccess</span><span class=\"params\">(<span class=\"type\">frame_id_t</span> frame_id, [[maybe_unused]] AccessType access_type)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\">std::lock_guard&lt;std::mutex&gt; <span class=\"title\">lock_guard</span><span class=\"params\">(latch_)</span></span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (frame_id &gt;= <span class=\"built_in\">static_cast</span>&lt;<span class=\"type\">int</span>&gt;(replacer_size_)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"built_in\">Exception</span>(<span class=\"string\">&quot;frame_id is larger than or equal to replacer_size_&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (node_store_.<span class=\"built_in\">count</span>(frame_id) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    node_store_[frame_id] = <span class=\"built_in\">LRUKNode</span>();</span><br><span class=\"line\">    node_store_[frame_id].fid_ = frame_id;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">auto</span> &amp;node = node_store_[frame_id];</span><br><span class=\"line\">  node.history_.<span class=\"built_in\">push_front</span>(current_timestamp_++);</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (node.history_.<span class=\"built_in\">size</span>() &gt; k_) &#123;</span><br><span class=\"line\">    node.history_.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>SetEvictable函数</p>\n<blockquote>\n<p>将某个frame的is_evictable标记为set_evictable,如果该frame未被占用，抛出异常<br>false-&gt;true   curr_size_++<br>true-&gt;false   curr_size_–</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">LRUKReplacer::SetEvictable</span><span class=\"params\">(<span class=\"type\">frame_id_t</span> frame_id, <span class=\"type\">bool</span> set_evictable)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\">std::lock_guard&lt;std::mutex&gt; <span class=\"title\">lock_guard</span><span class=\"params\">(latch_)</span></span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (node_store_.<span class=\"built_in\">count</span>(frame_id) &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"built_in\">Exception</span>(<span class=\"string\">&quot;frame_id should be used&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!node_store_[frame_id].is_evictable_ &amp;&amp; set_evictable) &#123;  <span class=\"comment\">// false -&gt; true</span></span><br><span class=\"line\">    curr_size_++;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (node_store_[frame_id].is_evictable_ &amp;&amp; !set_evictable) &#123;  <span class=\"comment\">// true -&gt; false</span></span><br><span class=\"line\">    curr_size_--;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  node_store_[frame_id].is_evictable_ = set_evictable;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Remove函数</p>\n<blockquote>\n<p>如果删除的frame不存在直接返回<br>如果删除的frame的is_evictable_未被设置为true，抛出异常<br>删除frame，–curr_size_</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">LRUKReplacer::Remove</span><span class=\"params\">(<span class=\"type\">frame_id_t</span> frame_id)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\">std::lock_guard&lt;std::mutex&gt; <span class=\"title\">lock_guard</span><span class=\"params\">(latch_)</span></span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (node_store_.<span class=\"built_in\">count</span>(frame_id) &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!node_store_[frame_id].is_evictable_) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"built_in\">Exception</span>(<span class=\"string\">&quot;Remove a non-evictable frame&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  node_store_.<span class=\"built_in\">erase</span>(frame_id);</span><br><span class=\"line\">  --curr_size_;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>task1本地测试：<br><img src=\"/../images/cmu15445-project1/5.png\" alt=\"img\"></p>\n<h2 id=\"Task-2-Buffer-Pool-Manager\"><a href=\"#Task-2-Buffer-Pool-Manager\" class=\"headerlink\" title=\"Task#2 -Buffer Pool Manager\"></a>Task#2 -Buffer Pool Manager</h2><p>完成LRU-K替换策略之后，接下来需要实现Buffer Pool的基本功能。对于DBMS来说，Buffer Pool可以隐藏内存和磁盘交互的细节，包括脏页面写回磁盘的过程。</p>\n<p>Page</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Page</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">char</span> *data_;<span class=\"comment\">//4096字节</span></span><br><span class=\"line\">  <span class=\"type\">page_id_t</span> page_id;<span class=\"comment\">//physical page id</span></span><br><span class=\"line\">  <span class=\"type\">int</span> pin_count_;<span class=\"comment\">//该Page对象的引用计数</span></span><br><span class=\"line\">  <span class=\"type\">bool</span> is_dirty_;<span class=\"comment\">//脏位</span></span><br><span class=\"line\">  ReaderWriterLatch rwlatch_;<span class=\"comment\">//读写锁</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>BufferPoolManager</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BufferPoolManager</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/** Number of pages in the buffer pool. */</span></span><br><span class=\"line\">  <span class=\"type\">const</span> <span class=\"type\">size_t</span> pool_size_;</span><br><span class=\"line\">  <span class=\"comment\">/** The next page id to be allocated  */</span></span><br><span class=\"line\">  std::atomic&lt;<span class=\"type\">page_id_t</span>&gt; next_page_id_ = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/** Array of buffer pool pages. */</span></span><br><span class=\"line\">  Page *pages_;</span><br><span class=\"line\">  <span class=\"comment\">/** Pointer to the disk manager. */</span></span><br><span class=\"line\">  DiskManager *disk_manager_ __attribute__((__unused__));</span><br><span class=\"line\">  <span class=\"comment\">/** Pointer to the log manager. Please ignore this for P1. */</span></span><br><span class=\"line\">  LogManager *log_manager_ __attribute__((__unused__));</span><br><span class=\"line\">  <span class=\"comment\">/** Page table for keeping track of buffer pool pages. */</span></span><br><span class=\"line\">  std::unordered_map&lt;<span class=\"type\">page_id_t</span>, <span class=\"type\">frame_id_t</span>&gt; page_table_;</span><br><span class=\"line\">  <span class=\"comment\">/** Replacer to find unpinned pages for replacement. */</span></span><br><span class=\"line\">  std::unique_ptr&lt;LRUKReplacer&gt; replacer_;</span><br><span class=\"line\">  <span class=\"comment\">/** List of free frames that don&#x27;t have any pages on them. */</span></span><br><span class=\"line\">  std::list&lt;<span class=\"type\">frame_id_t</span>&gt; free_list_;</span><br><span class=\"line\">  <span class=\"comment\">/** This latch protects shared data structures. We recommend updating this comment to describe what it protects. */</span></span><br><span class=\"line\">  std::mutex latch_;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>BufferPoolManager初始化时，分配pool_size_个Page对象，LRUKReplacer的num_frame也设置为pool_size_</p>\n<h3 id=\"代码实现：-1\"><a href=\"#代码实现：-1\" class=\"headerlink\" title=\"代码实现：\"></a>代码实现：<br></h3><p>NewPage函数实现：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">BufferPoolManager::NewPage</span><span class=\"params\">(<span class=\"type\">page_id_t</span> *page_id)</span> -&gt; Page * </span>&#123;</span><br><span class=\"line\">  <span class=\"type\">frame_id_t</span> free_frame_id = <span class=\"number\">-1</span>;</span><br><span class=\"line\">  <span class=\"function\">std::lock_guard&lt;std::mutex&gt; <span class=\"title\">guard</span><span class=\"params\">(latch_)</span></span>;</span><br><span class=\"line\">  <span class=\"comment\">//获取一个空闲的frame</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!free_list_.<span class=\"built_in\">empty</span>()) &#123;<span class=\"comment\">//存在空的frame</span></span><br><span class=\"line\">    free_frame_id = free_list_.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">    free_list_.<span class=\"built_in\">pop_front</span>();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;<span class=\"comment\">//不存在空的frame</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!replacer_-&gt;<span class=\"built_in\">Evict</span>(&amp;free_frame_id)) &#123;<span class=\"comment\">//通过LRUKReplacer得到一个空闲的frame</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pages_[free_frame_id].<span class=\"built_in\">IsDirty</span>()) &#123;<span class=\"comment\">//如果被驱逐的frame对应的page为脏页，需要进行写回操作</span></span><br><span class=\"line\">      disk_manager_-&gt;<span class=\"built_in\">WritePage</span>(pages_[free_frame_id].page_id_, pages_[free_frame_id].data_);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    page_table_.<span class=\"built_in\">erase</span>(pages_[free_frame_id].page_id_);<span class=\"comment\">//将page_table_中该frame对应的page_id_删除</span></span><br><span class=\"line\">    pages_[free_frame_id].<span class=\"built_in\">ResetMemory</span>();<span class=\"comment\">//重置该改frame对应的内存</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  *page_id = <span class=\"built_in\">AllocatePage</span>();</span><br><span class=\"line\">  pages_[free_frame_id].page_id_ = *page_id;</span><br><span class=\"line\">  pages_[free_frame_id].pin_count_ = <span class=\"number\">1</span>;</span><br><span class=\"line\">  pages_[free_frame_id].is_dirty_ = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  page_table_[*page_id] = free_frame_id;</span><br><span class=\"line\"></span><br><span class=\"line\">  replacer_-&gt;<span class=\"built_in\">RecordAccess</span>(free_frame_id);</span><br><span class=\"line\">  replacer_-&gt;<span class=\"built_in\">SetEvictable</span>(free_frame_id, <span class=\"literal\">false</span>);  <span class=\"comment\">// no use</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> pages_ + free_frame_id;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>FetchPage函数实现:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">BufferPoolManager::FetchPage</span><span class=\"params\">(<span class=\"type\">page_id_t</span> page_id, [[maybe_unused]] AccessType access_type)</span> -&gt; Page * </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">BUSTUB_ASSERT</span>(page_id != INVALID_PAGE_ID, <span class=\"string\">&quot;page_id is equal to INVALID_PAGE_ID&quot;</span>);</span><br><span class=\"line\">  <span class=\"function\">std::lock_guard&lt;std::mutex&gt; <span class=\"title\">guard</span><span class=\"params\">(latch_)</span></span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (page_table_.<span class=\"built_in\">count</span>(page_id) != <span class=\"number\">0</span>) &#123;<span class=\"comment\">//如果page_table_中存在该page_id</span></span><br><span class=\"line\">    pages_[page_table_[page_id]].pin_count_++;<span class=\"comment\">//该page的引用计数增加</span></span><br><span class=\"line\">    replacer_-&gt;<span class=\"built_in\">RecordAccess</span>(page_table_[page_id]);<span class=\"comment\">//增加该page对应的frame的访问时间戳</span></span><br><span class=\"line\">    replacer_-&gt;<span class=\"built_in\">SetEvictable</span>(page_table_[page_id], <span class=\"literal\">false</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pages_ + page_table_[page_id];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"type\">frame_id_t</span> free_frame_id = <span class=\"number\">-1</span>;</span><br><span class=\"line\">  <span class=\"comment\">//获取一个空闲的frame</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!free_list_.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">    free_frame_id = free_list_.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">    free_list_.<span class=\"built_in\">pop_front</span>();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!replacer_-&gt;<span class=\"built_in\">Evict</span>(&amp;free_frame_id)) &#123;<span class=\"comment\">//通过LRUKReplacer得到一个空闲的frame</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pages_[free_frame_id].<span class=\"built_in\">IsDirty</span>()) &#123;<span class=\"comment\">//如果被驱逐的frame对应的page为脏页，需要进行写回操作</span></span><br><span class=\"line\">      disk_manager_-&gt;<span class=\"built_in\">WritePage</span>(pages_[free_frame_id].page_id_, pages_[free_frame_id].data_);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    page_table_.<span class=\"built_in\">erase</span>(pages_[free_frame_id].page_id_);<span class=\"comment\">//将page_table_中该frame对应的page_id_删除</span></span><br><span class=\"line\">    pages_[free_frame_id].<span class=\"built_in\">ResetMemory</span>();<span class=\"comment\">//重置该改frame对应的内存</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  pages_[free_frame_id].page_id_ = page_id;</span><br><span class=\"line\">  pages_[free_frame_id].pin_count_ = <span class=\"number\">1</span>;</span><br><span class=\"line\">  pages_[free_frame_id].is_dirty_ = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  page_table_[page_id] = free_frame_id;</span><br><span class=\"line\">  disk_manager_-&gt;<span class=\"built_in\">ReadPage</span>(page_id, pages_[free_frame_id].data_);<span class=\"comment\">//读取该page_id对应的物理页</span></span><br><span class=\"line\"></span><br><span class=\"line\">  replacer_-&gt;<span class=\"built_in\">RecordAccess</span>(free_frame_id);<span class=\"comment\">//增加该frame的访问时间戳</span></span><br><span class=\"line\">  replacer_-&gt;<span class=\"built_in\">SetEvictable</span>(free_frame_id, <span class=\"literal\">false</span>);  <span class=\"comment\">// no use</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> pages_ + free_frame_id;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>UnpinPage函数实现：<br><br>需要注意的是入参is_dirty不能破坏已经置为脏的状态，这里用 | 运算符来实现</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">BufferPoolManager::UnpinPage</span><span class=\"params\">(<span class=\"type\">page_id_t</span> page_id, <span class=\"type\">bool</span> is_dirty, [[maybe_unused]] AccessType access_type)</span> -&gt; <span class=\"type\">bool</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\">std::lock_guard&lt;std::mutex&gt; <span class=\"title\">guard</span><span class=\"params\">(latch_)</span></span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (page_table_.<span class=\"built_in\">count</span>(page_id) &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"type\">frame_id_t</span> frame_id = page_table_[page_id];</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (pages_[frame_id].pin_count_ == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (--pages_[frame_id].pin_count_ == <span class=\"number\">0</span>) &#123;<span class=\"comment\">//引用计数减为0时，将该frame设置为evictable</span></span><br><span class=\"line\">    replacer_-&gt;<span class=\"built_in\">SetEvictable</span>(frame_id, <span class=\"literal\">true</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  pages_[frame_id].is_dirty_ |= is_dirty;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>FlushPage函数实现:<br><br>强制将page_id对应的Page的内容写回磁盘，并将该Page对应脏位置为false</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">BufferPoolManager::FlushPage</span><span class=\"params\">(<span class=\"type\">page_id_t</span> page_id)</span> -&gt; <span class=\"type\">bool</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\">std::lock_guard&lt;std::mutex&gt; <span class=\"title\">guard</span><span class=\"params\">(latch_)</span></span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (page_table_.<span class=\"built_in\">count</span>(page_id) &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"type\">frame_id_t</span> frame_id = page_table_[page_id];</span><br><span class=\"line\">  disk_manager_-&gt;<span class=\"built_in\">WritePage</span>(page_id, pages_[frame_id].data_);</span><br><span class=\"line\">  pages_[frame_id].is_dirty_ = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>FlushAllPages函数实现:<br>写回所有在内存中的Page</p>\n<p>DeletePage函数实现：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">BufferPoolManager::DeletePage</span><span class=\"params\">(<span class=\"type\">page_id_t</span> page_id)</span> -&gt; <span class=\"type\">bool</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\">std::lock_guard&lt;std::mutex&gt; <span class=\"title\">guard</span><span class=\"params\">(latch_)</span></span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (page_table_.<span class=\"built_in\">count</span>(page_id) &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"type\">frame_id_t</span> frame_id = page_table_[page_id];</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (pages_[frame_id].pin_count_ != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//只有当该page_id对应的Page的引用计数为0时可以进行删除</span></span><br><span class=\"line\">  page_table_.<span class=\"built_in\">erase</span>(page_id);<span class=\"comment\">//page_table_删除该page_id</span></span><br><span class=\"line\">  replacer_-&gt;<span class=\"built_in\">SetEvictable</span>(frame_id, <span class=\"literal\">true</span>);<span class=\"comment\">//replacer驱逐该frame</span></span><br><span class=\"line\">  replacer_-&gt;<span class=\"built_in\">Remove</span>(frame_id);</span><br><span class=\"line\">  free_list_.<span class=\"built_in\">push_back</span>(frame_id);<span class=\"comment\">//将该frame加入free_list</span></span><br><span class=\"line\">  <span class=\"comment\">//该Page初始化</span></span><br><span class=\"line\">  pages_[frame_id].is_dirty_ = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  pages_[frame_id].page_id_ = INVALID_PAGE_ID;</span><br><span class=\"line\">  pages_[frame_id].<span class=\"built_in\">ResetMemory</span>();</span><br><span class=\"line\">  <span class=\"built_in\">DeallocatePage</span>(page_id);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>task2本地测试:<br><img src=\"/../images/cmu15445-project1/6.png\" alt=\"img\"></p>\n<h2 id=\"Task-3-Read-Write-Page-Guards\"><a href=\"#Task-3-Read-Write-Page-Guards\" class=\"headerlink\" title=\"Task#3 Read&#x2F;Write Page Guards\"></a>Task#3 Read&#x2F;Write Page Guards</h2><p>FetchPage和NewPage函数返回指向pages的指针，并且pages已经被pinned，并且当一个page不再需要时，要调用UnpinPage。另一方面，如果忘记调用UnPinPage，该Page将永远不会被evict。于是PageGuard就派上用场了</p>\n<p>BasicPageGuard<br>思路：BasicPageGuard析构时调用Page的UnpinPage函数，并且BasicPageGuard中保存变量is_dirty_,调用AsMut或GetDataMut函数时将is_dirty_设置为true</p>\n<p>WritePageGuard和ReadPageGuard<br>思路：与BasicPageGuard思路相似，析构函数调用UnpinPage多了一步释放Page的写锁和读锁</p>\n<p>FetchPageBasic、FetchPageRead、FetchPageWrite和NewPageGuarded的实现代码如下:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">BufferPoolManager::FetchPageBasic</span><span class=\"params\">(<span class=\"type\">page_id_t</span> page_id)</span> -&gt; BasicPageGuard </span>&#123; <span class=\"keyword\">return</span> &#123;<span class=\"keyword\">this</span>, <span class=\"built_in\">FetchPage</span>(page_id)&#125;; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">BufferPoolManager::FetchPageRead</span><span class=\"params\">(<span class=\"type\">page_id_t</span> page_id)</span> -&gt; ReadPageGuard </span>&#123;</span><br><span class=\"line\">  Page *page = <span class=\"built_in\">FetchPage</span>(page_id);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (page != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">    page-&gt;<span class=\"built_in\">RLatch</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;<span class=\"keyword\">this</span>, page&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">BufferPoolManager::FetchPageWrite</span><span class=\"params\">(<span class=\"type\">page_id_t</span> page_id)</span> -&gt; WritePageGuard </span>&#123;</span><br><span class=\"line\">  Page *page = <span class=\"built_in\">FetchPage</span>(page_id);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (page != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">    page-&gt;<span class=\"built_in\">WLatch</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;<span class=\"keyword\">this</span>, page&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">BufferPoolManager::NewPageGuarded</span><span class=\"params\">(<span class=\"type\">page_id_t</span> *page_id)</span> -&gt; BasicPageGuard </span>&#123; <span class=\"keyword\">return</span> &#123;<span class=\"keyword\">this</span>, <span class=\"built_in\">NewPage</span>(page_id)&#125;; &#125;</span><br></pre></td></tr></table></figure>\n<p>task3本地测试：<br><img src=\"/../images/cmu15445-project1/7.png\" alt=\"img\"></p>\n<p>测试通过截图：<br><img src=\"/../images/cmu15445-project1/4.png\" alt=\"img\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"project1的任务就是实现一个Buffer-Pool-Manager\"><a href=\"#project1的任务就是实现一个Buffer-Pool-Manager\" class=\"headerlink\" title=\"project1的任务就是实现一个Buffer Pool Manager\"></a>project1的任务就是实现一个Buffer Pool Manager<br></h2><p>DBMS启动时会从OS申请一片内存区域，即Buffer Pool，并将这块区域划分成大小相同的pages，为了与disk pages区别，通常称为frames，当DBMS请求一个disk page时，它首先需要被复制到Buffer Pool的一个frame中。当Buffer Pool空间不足时，需要采取某种replacement policy，淘汰已有的page。<br><img src=\"/../images/cmu15445-project1/1.png\" alt=\"img\"></p>\n<p>question 1:<br>为什么不使用OS自带的磁盘管理模块，OS为开发者提供了mmap这样的调用，使开发者能够依赖OS自动管理数据在内外存之间的移动？</p>\n<blockquote>\n<p>DBMS比OS拥有更多、更充分的知识来决定数据移动的移动和数量，具体包括</p>\n<ol>\n<li>将dirty pages按正确的顺序写到磁盘</li>\n<li>根据具体情况预获取数据</li>\n<li>定制化缓存置换策略</li>\n</ol>\n</blockquote>\n<p>同时DBMS会维护一个page table，负责记录每个page在内存中的位置，以及是否被写过(Dirty Flag),是否被引用或引用计数(Pin&#x2F;Reference Counter)等元信息，如下图所示:</p>\n<p><img src=\"/../images/cmu15445-project1/2.png\" alt=\"img\"></p>\n<p>当page table中的某page被引用时，会记录引用数(pin&#x2F;reference),表示该page正在被使用，空间不够时不应该被移除；当被请求的page不再page table中时，DBMS会申请一个latch(lock的别名)，表示该entry被占用，然后从disk中读取相关page到buffer pool，释放latch</p>\n<p><img src=\"/../images/cmu15445-project1/3.png\" alt=\"img\"></p>\n<h2 id=\"Buffer-Replacement-Policies\"><a href=\"#Buffer-Replacement-Policies\" class=\"headerlink\" title=\"Buffer Replacement Policies\"></a>Buffer Replacement Policies</h2><h3 id=\"LRU\"><a href=\"#LRU\" class=\"headerlink\" title=\"LRU\"></a>LRU</h3><p>维护每个page上一次被访问的时间戳，每次移除时间戳最早的page</p>\n<h3 id=\"Clock\"><a href=\"#Clock\" class=\"headerlink\" title=\"Clock\"></a>Clock</h3><p>Clock是LRU的近似策略，它不需要每个page上次被访问的时间戳，而是为每个page保存一个reference</p>\n<ul>\n<li>每当page被访问时，reference bit设置为1</li>\n<li>每当需要移动page时，从上次访问的位置开始，按顺序轮询，每个page的reference bit，若该bit为1，则重置为0；若该bit为0，则移除该page</li>\n</ul>\n<h3 id=\"LRU-K\"><a href=\"#LRU-K\" class=\"headerlink\" title=\"LRU-K\"></a>LRU-K</h3><p>保存每个page的最后K次访问时间戳，利用这些时间戳来估计它们下次被访问的时间，通常K取1就能获得很好的效果。</p>\n<h2 id=\"Task-1-LRU-K-Replacement-Policy\"><a href=\"#Task-1-LRU-K-Replacement-Policy\" class=\"headerlink\" title=\"Task#1 LRU-K Replacement Policy\"></a>Task#1 LRU-K Replacement Policy</h2><p>实现LRUKReplacer<br>实现策略:</p>\n<blockquote>\n<p>LRU-K算法驱逐replacer的所有frame中backward k-distance最大的frame<br><br>backward k-distance计算方式:当前时间戳与之前k次访问的时间戳之间的时间差。<br><br>历史访问次数少于k的帧被赋予+inf作为其backward k-distance,当多个frame具有+inf backward k-distance时，replacer将驱逐具有最早总体时间戳的frame<br></p>\n</blockquote>\n<h3 id=\"代码实现：\"><a href=\"#代码实现：\" class=\"headerlink\" title=\"代码实现：\"></a>代码实现：<br></h3><p>一个LRUKNode对应一个frame</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LRUKNode</span> &#123;</span><br><span class=\"line\"> <span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"comment\">/** History of last seen K timestamps of this page. Least recent timestamp stored in front. */</span></span><br><span class=\"line\">  std::list&lt;<span class=\"type\">size_t</span>&gt; history_;<span class=\"comment\">//记录一批时间戳</span></span><br><span class=\"line\">  <span class=\"type\">frame_id_t</span> fid_;<span class=\"comment\">//</span></span><br><span class=\"line\">  <span class=\"type\">bool</span> is_evictable_&#123;<span class=\"literal\">false</span>&#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LRUKReplacer</span> &#123;</span><br><span class=\"line\">  std::unordered_map&lt;<span class=\"type\">frame_id_t</span>, LRUKNode&gt; node_store_;<span class=\"comment\">//frame LRUKNode couple</span></span><br><span class=\"line\">  <span class=\"type\">size_t</span> current_timestamp_&#123;<span class=\"number\">0</span>&#125;;<span class=\"comment\">//当前时间戳</span></span><br><span class=\"line\">  <span class=\"comment\">//replacer_size_ &gt;= curr_size</span></span><br><span class=\"line\">  <span class=\"type\">size_t</span> curr_size_&#123;<span class=\"number\">0</span>&#125;;<span class=\"comment\">//curr_size为当前is_evictable被标记为true的frame数量</span></span><br><span class=\"line\">  <span class=\"type\">size_t</span> replacer_size_;<span class=\"comment\">//replacer_size == num_frames</span></span><br><span class=\"line\">  <span class=\"type\">size_t</span> k_;</span><br><span class=\"line\">  std::mutex latch_;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>Evict函数</p>\n<blockquote>\n<p>驱逐一个frame，驱逐成功返回true，否则返回false</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">LRUKReplacer::Evict</span><span class=\"params\">(<span class=\"type\">frame_id_t</span> *frame_id)</span> -&gt; <span class=\"type\">bool</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\">std::lock_guard&lt;std::mutex&gt; <span class=\"title\">guard</span><span class=\"params\">(latch_)</span></span>;</span><br><span class=\"line\">  *frame_id = <span class=\"number\">-1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;p : node_store_) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p.second.is_evictable_) &#123;<span class=\"comment\">//通过Judge函数选择backward k-distance中最大的frame</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (*frame_id == <span class=\"number\">-1</span> || <span class=\"built_in\">Judge</span>(p.second, node_store_[*frame_id])) &#123;</span><br><span class=\"line\">        *frame_id = p.second.fid_;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (*frame_id != <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">    node_store_.<span class=\"built_in\">erase</span>(*frame_id);</span><br><span class=\"line\">    --curr_size_;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Judge函数实现如下</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//lhs的backward k-distance大于rhs的backward k-distance 返回true 否则返回false</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">Judge</span><span class=\"params\">(<span class=\"type\">const</span> LRUKNode &amp;lhs, <span class=\"type\">const</span> LRUKNode &amp;rhs)</span> <span class=\"type\">const</span> -&gt; <span class=\"type\">bool</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rhs.history_.<span class=\"built_in\">size</span>() == k_ &amp;&amp; lhs.history_.<span class=\"built_in\">size</span>() &lt; k_) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rhs.history_.<span class=\"built_in\">size</span>() &lt; k_ &amp;&amp; lhs.history_.<span class=\"built_in\">size</span>() == k_) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//比较最早的时间戳,若lhs的时间戳更小，则返回true 否则返回false</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> lhs.history_.<span class=\"built_in\">back</span>() &lt; rhs.history_.<span class=\"built_in\">back</span>();</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>RecordAccess函数</p>\n<blockquote>\n<ol>\n<li>如果访问的frame_id大于等于replacer_size抛出异常</li>\n<li>否则，对该frame对应的LRUKNode添加时间戳，并且保证history_列表长度不超过k_</li>\n</ol>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">LRUKReplacer::RecordAccess</span><span class=\"params\">(<span class=\"type\">frame_id_t</span> frame_id, [[maybe_unused]] AccessType access_type)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\">std::lock_guard&lt;std::mutex&gt; <span class=\"title\">lock_guard</span><span class=\"params\">(latch_)</span></span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (frame_id &gt;= <span class=\"built_in\">static_cast</span>&lt;<span class=\"type\">int</span>&gt;(replacer_size_)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"built_in\">Exception</span>(<span class=\"string\">&quot;frame_id is larger than or equal to replacer_size_&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (node_store_.<span class=\"built_in\">count</span>(frame_id) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    node_store_[frame_id] = <span class=\"built_in\">LRUKNode</span>();</span><br><span class=\"line\">    node_store_[frame_id].fid_ = frame_id;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">auto</span> &amp;node = node_store_[frame_id];</span><br><span class=\"line\">  node.history_.<span class=\"built_in\">push_front</span>(current_timestamp_++);</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (node.history_.<span class=\"built_in\">size</span>() &gt; k_) &#123;</span><br><span class=\"line\">    node.history_.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>SetEvictable函数</p>\n<blockquote>\n<p>将某个frame的is_evictable标记为set_evictable,如果该frame未被占用，抛出异常<br>false-&gt;true   curr_size_++<br>true-&gt;false   curr_size_–</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">LRUKReplacer::SetEvictable</span><span class=\"params\">(<span class=\"type\">frame_id_t</span> frame_id, <span class=\"type\">bool</span> set_evictable)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\">std::lock_guard&lt;std::mutex&gt; <span class=\"title\">lock_guard</span><span class=\"params\">(latch_)</span></span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (node_store_.<span class=\"built_in\">count</span>(frame_id) &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"built_in\">Exception</span>(<span class=\"string\">&quot;frame_id should be used&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!node_store_[frame_id].is_evictable_ &amp;&amp; set_evictable) &#123;  <span class=\"comment\">// false -&gt; true</span></span><br><span class=\"line\">    curr_size_++;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (node_store_[frame_id].is_evictable_ &amp;&amp; !set_evictable) &#123;  <span class=\"comment\">// true -&gt; false</span></span><br><span class=\"line\">    curr_size_--;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  node_store_[frame_id].is_evictable_ = set_evictable;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Remove函数</p>\n<blockquote>\n<p>如果删除的frame不存在直接返回<br>如果删除的frame的is_evictable_未被设置为true，抛出异常<br>删除frame，–curr_size_</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">LRUKReplacer::Remove</span><span class=\"params\">(<span class=\"type\">frame_id_t</span> frame_id)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\">std::lock_guard&lt;std::mutex&gt; <span class=\"title\">lock_guard</span><span class=\"params\">(latch_)</span></span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (node_store_.<span class=\"built_in\">count</span>(frame_id) &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!node_store_[frame_id].is_evictable_) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"built_in\">Exception</span>(<span class=\"string\">&quot;Remove a non-evictable frame&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  node_store_.<span class=\"built_in\">erase</span>(frame_id);</span><br><span class=\"line\">  --curr_size_;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>task1本地测试：<br><img src=\"/../images/cmu15445-project1/5.png\" alt=\"img\"></p>\n<h2 id=\"Task-2-Buffer-Pool-Manager\"><a href=\"#Task-2-Buffer-Pool-Manager\" class=\"headerlink\" title=\"Task#2 -Buffer Pool Manager\"></a>Task#2 -Buffer Pool Manager</h2><p>完成LRU-K替换策略之后，接下来需要实现Buffer Pool的基本功能。对于DBMS来说，Buffer Pool可以隐藏内存和磁盘交互的细节，包括脏页面写回磁盘的过程。</p>\n<p>Page</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Page</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">char</span> *data_;<span class=\"comment\">//4096字节</span></span><br><span class=\"line\">  <span class=\"type\">page_id_t</span> page_id;<span class=\"comment\">//physical page id</span></span><br><span class=\"line\">  <span class=\"type\">int</span> pin_count_;<span class=\"comment\">//该Page对象的引用计数</span></span><br><span class=\"line\">  <span class=\"type\">bool</span> is_dirty_;<span class=\"comment\">//脏位</span></span><br><span class=\"line\">  ReaderWriterLatch rwlatch_;<span class=\"comment\">//读写锁</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>BufferPoolManager</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BufferPoolManager</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/** Number of pages in the buffer pool. */</span></span><br><span class=\"line\">  <span class=\"type\">const</span> <span class=\"type\">size_t</span> pool_size_;</span><br><span class=\"line\">  <span class=\"comment\">/** The next page id to be allocated  */</span></span><br><span class=\"line\">  std::atomic&lt;<span class=\"type\">page_id_t</span>&gt; next_page_id_ = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/** Array of buffer pool pages. */</span></span><br><span class=\"line\">  Page *pages_;</span><br><span class=\"line\">  <span class=\"comment\">/** Pointer to the disk manager. */</span></span><br><span class=\"line\">  DiskManager *disk_manager_ __attribute__((__unused__));</span><br><span class=\"line\">  <span class=\"comment\">/** Pointer to the log manager. Please ignore this for P1. */</span></span><br><span class=\"line\">  LogManager *log_manager_ __attribute__((__unused__));</span><br><span class=\"line\">  <span class=\"comment\">/** Page table for keeping track of buffer pool pages. */</span></span><br><span class=\"line\">  std::unordered_map&lt;<span class=\"type\">page_id_t</span>, <span class=\"type\">frame_id_t</span>&gt; page_table_;</span><br><span class=\"line\">  <span class=\"comment\">/** Replacer to find unpinned pages for replacement. */</span></span><br><span class=\"line\">  std::unique_ptr&lt;LRUKReplacer&gt; replacer_;</span><br><span class=\"line\">  <span class=\"comment\">/** List of free frames that don&#x27;t have any pages on them. */</span></span><br><span class=\"line\">  std::list&lt;<span class=\"type\">frame_id_t</span>&gt; free_list_;</span><br><span class=\"line\">  <span class=\"comment\">/** This latch protects shared data structures. We recommend updating this comment to describe what it protects. */</span></span><br><span class=\"line\">  std::mutex latch_;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>BufferPoolManager初始化时，分配pool_size_个Page对象，LRUKReplacer的num_frame也设置为pool_size_</p>\n<h3 id=\"代码实现：-1\"><a href=\"#代码实现：-1\" class=\"headerlink\" title=\"代码实现：\"></a>代码实现：<br></h3><p>NewPage函数实现：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">BufferPoolManager::NewPage</span><span class=\"params\">(<span class=\"type\">page_id_t</span> *page_id)</span> -&gt; Page * </span>&#123;</span><br><span class=\"line\">  <span class=\"type\">frame_id_t</span> free_frame_id = <span class=\"number\">-1</span>;</span><br><span class=\"line\">  <span class=\"function\">std::lock_guard&lt;std::mutex&gt; <span class=\"title\">guard</span><span class=\"params\">(latch_)</span></span>;</span><br><span class=\"line\">  <span class=\"comment\">//获取一个空闲的frame</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!free_list_.<span class=\"built_in\">empty</span>()) &#123;<span class=\"comment\">//存在空的frame</span></span><br><span class=\"line\">    free_frame_id = free_list_.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">    free_list_.<span class=\"built_in\">pop_front</span>();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;<span class=\"comment\">//不存在空的frame</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!replacer_-&gt;<span class=\"built_in\">Evict</span>(&amp;free_frame_id)) &#123;<span class=\"comment\">//通过LRUKReplacer得到一个空闲的frame</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pages_[free_frame_id].<span class=\"built_in\">IsDirty</span>()) &#123;<span class=\"comment\">//如果被驱逐的frame对应的page为脏页，需要进行写回操作</span></span><br><span class=\"line\">      disk_manager_-&gt;<span class=\"built_in\">WritePage</span>(pages_[free_frame_id].page_id_, pages_[free_frame_id].data_);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    page_table_.<span class=\"built_in\">erase</span>(pages_[free_frame_id].page_id_);<span class=\"comment\">//将page_table_中该frame对应的page_id_删除</span></span><br><span class=\"line\">    pages_[free_frame_id].<span class=\"built_in\">ResetMemory</span>();<span class=\"comment\">//重置该改frame对应的内存</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  *page_id = <span class=\"built_in\">AllocatePage</span>();</span><br><span class=\"line\">  pages_[free_frame_id].page_id_ = *page_id;</span><br><span class=\"line\">  pages_[free_frame_id].pin_count_ = <span class=\"number\">1</span>;</span><br><span class=\"line\">  pages_[free_frame_id].is_dirty_ = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  page_table_[*page_id] = free_frame_id;</span><br><span class=\"line\"></span><br><span class=\"line\">  replacer_-&gt;<span class=\"built_in\">RecordAccess</span>(free_frame_id);</span><br><span class=\"line\">  replacer_-&gt;<span class=\"built_in\">SetEvictable</span>(free_frame_id, <span class=\"literal\">false</span>);  <span class=\"comment\">// no use</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> pages_ + free_frame_id;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>FetchPage函数实现:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">BufferPoolManager::FetchPage</span><span class=\"params\">(<span class=\"type\">page_id_t</span> page_id, [[maybe_unused]] AccessType access_type)</span> -&gt; Page * </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">BUSTUB_ASSERT</span>(page_id != INVALID_PAGE_ID, <span class=\"string\">&quot;page_id is equal to INVALID_PAGE_ID&quot;</span>);</span><br><span class=\"line\">  <span class=\"function\">std::lock_guard&lt;std::mutex&gt; <span class=\"title\">guard</span><span class=\"params\">(latch_)</span></span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (page_table_.<span class=\"built_in\">count</span>(page_id) != <span class=\"number\">0</span>) &#123;<span class=\"comment\">//如果page_table_中存在该page_id</span></span><br><span class=\"line\">    pages_[page_table_[page_id]].pin_count_++;<span class=\"comment\">//该page的引用计数增加</span></span><br><span class=\"line\">    replacer_-&gt;<span class=\"built_in\">RecordAccess</span>(page_table_[page_id]);<span class=\"comment\">//增加该page对应的frame的访问时间戳</span></span><br><span class=\"line\">    replacer_-&gt;<span class=\"built_in\">SetEvictable</span>(page_table_[page_id], <span class=\"literal\">false</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pages_ + page_table_[page_id];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"type\">frame_id_t</span> free_frame_id = <span class=\"number\">-1</span>;</span><br><span class=\"line\">  <span class=\"comment\">//获取一个空闲的frame</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!free_list_.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">    free_frame_id = free_list_.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">    free_list_.<span class=\"built_in\">pop_front</span>();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!replacer_-&gt;<span class=\"built_in\">Evict</span>(&amp;free_frame_id)) &#123;<span class=\"comment\">//通过LRUKReplacer得到一个空闲的frame</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pages_[free_frame_id].<span class=\"built_in\">IsDirty</span>()) &#123;<span class=\"comment\">//如果被驱逐的frame对应的page为脏页，需要进行写回操作</span></span><br><span class=\"line\">      disk_manager_-&gt;<span class=\"built_in\">WritePage</span>(pages_[free_frame_id].page_id_, pages_[free_frame_id].data_);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    page_table_.<span class=\"built_in\">erase</span>(pages_[free_frame_id].page_id_);<span class=\"comment\">//将page_table_中该frame对应的page_id_删除</span></span><br><span class=\"line\">    pages_[free_frame_id].<span class=\"built_in\">ResetMemory</span>();<span class=\"comment\">//重置该改frame对应的内存</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  pages_[free_frame_id].page_id_ = page_id;</span><br><span class=\"line\">  pages_[free_frame_id].pin_count_ = <span class=\"number\">1</span>;</span><br><span class=\"line\">  pages_[free_frame_id].is_dirty_ = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  page_table_[page_id] = free_frame_id;</span><br><span class=\"line\">  disk_manager_-&gt;<span class=\"built_in\">ReadPage</span>(page_id, pages_[free_frame_id].data_);<span class=\"comment\">//读取该page_id对应的物理页</span></span><br><span class=\"line\"></span><br><span class=\"line\">  replacer_-&gt;<span class=\"built_in\">RecordAccess</span>(free_frame_id);<span class=\"comment\">//增加该frame的访问时间戳</span></span><br><span class=\"line\">  replacer_-&gt;<span class=\"built_in\">SetEvictable</span>(free_frame_id, <span class=\"literal\">false</span>);  <span class=\"comment\">// no use</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> pages_ + free_frame_id;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>UnpinPage函数实现：<br><br>需要注意的是入参is_dirty不能破坏已经置为脏的状态，这里用 | 运算符来实现</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">BufferPoolManager::UnpinPage</span><span class=\"params\">(<span class=\"type\">page_id_t</span> page_id, <span class=\"type\">bool</span> is_dirty, [[maybe_unused]] AccessType access_type)</span> -&gt; <span class=\"type\">bool</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\">std::lock_guard&lt;std::mutex&gt; <span class=\"title\">guard</span><span class=\"params\">(latch_)</span></span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (page_table_.<span class=\"built_in\">count</span>(page_id) &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"type\">frame_id_t</span> frame_id = page_table_[page_id];</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (pages_[frame_id].pin_count_ == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (--pages_[frame_id].pin_count_ == <span class=\"number\">0</span>) &#123;<span class=\"comment\">//引用计数减为0时，将该frame设置为evictable</span></span><br><span class=\"line\">    replacer_-&gt;<span class=\"built_in\">SetEvictable</span>(frame_id, <span class=\"literal\">true</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  pages_[frame_id].is_dirty_ |= is_dirty;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>FlushPage函数实现:<br><br>强制将page_id对应的Page的内容写回磁盘，并将该Page对应脏位置为false</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">BufferPoolManager::FlushPage</span><span class=\"params\">(<span class=\"type\">page_id_t</span> page_id)</span> -&gt; <span class=\"type\">bool</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\">std::lock_guard&lt;std::mutex&gt; <span class=\"title\">guard</span><span class=\"params\">(latch_)</span></span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (page_table_.<span class=\"built_in\">count</span>(page_id) &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"type\">frame_id_t</span> frame_id = page_table_[page_id];</span><br><span class=\"line\">  disk_manager_-&gt;<span class=\"built_in\">WritePage</span>(page_id, pages_[frame_id].data_);</span><br><span class=\"line\">  pages_[frame_id].is_dirty_ = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>FlushAllPages函数实现:<br>写回所有在内存中的Page</p>\n<p>DeletePage函数实现：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">BufferPoolManager::DeletePage</span><span class=\"params\">(<span class=\"type\">page_id_t</span> page_id)</span> -&gt; <span class=\"type\">bool</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\">std::lock_guard&lt;std::mutex&gt; <span class=\"title\">guard</span><span class=\"params\">(latch_)</span></span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (page_table_.<span class=\"built_in\">count</span>(page_id) &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"type\">frame_id_t</span> frame_id = page_table_[page_id];</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (pages_[frame_id].pin_count_ != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//只有当该page_id对应的Page的引用计数为0时可以进行删除</span></span><br><span class=\"line\">  page_table_.<span class=\"built_in\">erase</span>(page_id);<span class=\"comment\">//page_table_删除该page_id</span></span><br><span class=\"line\">  replacer_-&gt;<span class=\"built_in\">SetEvictable</span>(frame_id, <span class=\"literal\">true</span>);<span class=\"comment\">//replacer驱逐该frame</span></span><br><span class=\"line\">  replacer_-&gt;<span class=\"built_in\">Remove</span>(frame_id);</span><br><span class=\"line\">  free_list_.<span class=\"built_in\">push_back</span>(frame_id);<span class=\"comment\">//将该frame加入free_list</span></span><br><span class=\"line\">  <span class=\"comment\">//该Page初始化</span></span><br><span class=\"line\">  pages_[frame_id].is_dirty_ = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  pages_[frame_id].page_id_ = INVALID_PAGE_ID;</span><br><span class=\"line\">  pages_[frame_id].<span class=\"built_in\">ResetMemory</span>();</span><br><span class=\"line\">  <span class=\"built_in\">DeallocatePage</span>(page_id);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>task2本地测试:<br><img src=\"/../images/cmu15445-project1/6.png\" alt=\"img\"></p>\n<h2 id=\"Task-3-Read-Write-Page-Guards\"><a href=\"#Task-3-Read-Write-Page-Guards\" class=\"headerlink\" title=\"Task#3 Read&#x2F;Write Page Guards\"></a>Task#3 Read&#x2F;Write Page Guards</h2><p>FetchPage和NewPage函数返回指向pages的指针，并且pages已经被pinned，并且当一个page不再需要时，要调用UnpinPage。另一方面，如果忘记调用UnPinPage，该Page将永远不会被evict。于是PageGuard就派上用场了</p>\n<p>BasicPageGuard<br>思路：BasicPageGuard析构时调用Page的UnpinPage函数，并且BasicPageGuard中保存变量is_dirty_,调用AsMut或GetDataMut函数时将is_dirty_设置为true</p>\n<p>WritePageGuard和ReadPageGuard<br>思路：与BasicPageGuard思路相似，析构函数调用UnpinPage多了一步释放Page的写锁和读锁</p>\n<p>FetchPageBasic、FetchPageRead、FetchPageWrite和NewPageGuarded的实现代码如下:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">BufferPoolManager::FetchPageBasic</span><span class=\"params\">(<span class=\"type\">page_id_t</span> page_id)</span> -&gt; BasicPageGuard </span>&#123; <span class=\"keyword\">return</span> &#123;<span class=\"keyword\">this</span>, <span class=\"built_in\">FetchPage</span>(page_id)&#125;; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">BufferPoolManager::FetchPageRead</span><span class=\"params\">(<span class=\"type\">page_id_t</span> page_id)</span> -&gt; ReadPageGuard </span>&#123;</span><br><span class=\"line\">  Page *page = <span class=\"built_in\">FetchPage</span>(page_id);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (page != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">    page-&gt;<span class=\"built_in\">RLatch</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;<span class=\"keyword\">this</span>, page&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">BufferPoolManager::FetchPageWrite</span><span class=\"params\">(<span class=\"type\">page_id_t</span> page_id)</span> -&gt; WritePageGuard </span>&#123;</span><br><span class=\"line\">  Page *page = <span class=\"built_in\">FetchPage</span>(page_id);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (page != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">    page-&gt;<span class=\"built_in\">WLatch</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;<span class=\"keyword\">this</span>, page&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">BufferPoolManager::NewPageGuarded</span><span class=\"params\">(<span class=\"type\">page_id_t</span> *page_id)</span> -&gt; BasicPageGuard </span>&#123; <span class=\"keyword\">return</span> &#123;<span class=\"keyword\">this</span>, <span class=\"built_in\">NewPage</span>(page_id)&#125;; &#125;</span><br></pre></td></tr></table></figure>\n<p>task3本地测试：<br><img src=\"/../images/cmu15445-project1/7.png\" alt=\"img\"></p>\n<p>测试通过截图：<br><img src=\"/../images/cmu15445-project1/4.png\" alt=\"img\"></p>\n"},{"title":"cmu15445-project2","date":"2024-02-27T06:16:24.000Z","_content":"# B+ Tree\nB+ Tree是一种自平衡树，它将数据有序地存储，并且在search、sequential access、insertions以及deletions操作的复杂度上都满足O(logn),其中sequential access的最终复杂度还与所需数据总量有关\n![img](../images/cmu15445-project2/1.png)\n以M—way B+tree为例，它的特点总结如下：\n- 每个节点最多存储M个key，有M+1个children\n- B+ Tree是perfectly balanced，即每个leaf node的深度都一样\n- 除了root节点，所有节点必须至少处于半满状态，即 M/2 - 1 <= #keys <= M - 1\n- 假设每个inner node中包含k个keys，那么它必然有k + 1个children\n\n# B+ Tree Operations\nInsert\n> 1. 找到对应的leafNode L\n> 2. 将key/value pair按顺序插入到 L 中\n> 3. 如果L 还有足够的空间，操作结束；如果空间不足，则需要将L分裂成两个节点，同时在parent node上新增entry，若parent node也空间不足，则递归地分裂，直到root node为止\n\nMax.degree = 5时<br>\n从1插入到13的情况  [BPlusTree可视化网站](https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html)\n![img](../images/cmu15445-project2/2.png)\n\nDelete\n> 1. 从root开始，找到目标entry所在的leaf node L\n> 2. 删除该entry\n> 3. 如果L仍然处在半满状态，操作结束；否则先尝试从siblings那里借entries，如果失败，则将L 与相应的sibling合并\n> 4. 如果合并发生了，则可能需要递归地删除parent node中的entry\n\n# CheckPoint#1\n## Task #1 B+ Tree Pages\n### class BPlusTreePage的3个类成员\n![img](../images/cmu15445-project2/3.png)\nGetMinSize函数实现:\n```cpp\nauto BPlusTreePage::GetMinSize() const -> int {\n  if (IsLeafPage()) {// 叶子节点\n    return max_size_ / 2;\n  }\n  return (max_size_ + 1) / 2; //内部节点\n}\n```\n\n### class BPlusTreeInternalPage : public BPlusTreePage <br>\n> 一个Internal Page存储 m 个顺序 key 和 m + 1 个child pointers(其它BPlusTreePage的page_ids)<br>\n使用一个数组存储key/page_id pairs，并且第一个key被设置为invalid，并且查找要从第二个key开始查找\n\n```cpp\nINDEX_TEMPLATE_ARGUMENTS\nvoid B_PLUS_TREE_INTERNAL_PAGE_TYPE::Init(int max_size, int size) {\n  SetPageType(IndexPageType::INTERNAL_PAGE);\n  SetMaxSize(max_size);\n  SetSize(size);//size 默认为1\n}\n\nINDEX_TEMPLATE_ARGUMENTS\nauto B_PLUS_TREE_INTERNAL_PAGE_TYPE::ValueIndex(const ValueType &value) const -> int {\n  for (int i = 0; i <= GetSize(); ++i) {//顺序查找\n    if (array_[i].second == value) {\n      return i;\n    }\n  }\n  return -1;\n}\n\nINDEX_TEMPLATE_ARGUMENTS\nauto B_PLUS_TREE_INTERNAL_PAGE_TYPE::LookUp(const KeyType &key, const KeyComparator &comparator) const -> ValueType {\n  for (int i = 1; i < GetSize(); ++i) {  // 顺序查找\n    if (comparator(key, array_[i].first) < 0) {//找到第一个大于key的array_[i].first\n      return array_[i - 1].second;\n    }\n  }\n  return array_[GetSize() - 1].second;\n}\n\nINDEX_TEMPLATE_ARGUMENTS\nauto B_PLUS_TREE_INTERNAL_PAGE_TYPE::Insert(const KeyType &key, const ValueType &value, const KeyComparator &comparator)\n    -> bool {\n  if (GetSize() == GetMaxSize()) {//已经满了返回false\n    return false;\n  }\n  // upper_bound\n  int l = 1;\n  int r = GetSize();\n  while (l < r) {\n    int mid = (l + r) / 2;\n    if (comparator(array_[mid].first, key) > 0) {\n      r = mid;\n    } else {\n      l = mid + 1;\n    }\n  }\n  for (int i = GetSize() - 1; i >= l; --i) {//元素移位\n    array_[i + 1] = array_[i];\n  }\n  array_[l] = {key, value};//存储插入的key-value\n  IncreaseSize(1);//size ++\n  return true;\n}\n```\n\n### class BPlusTreeLeafPage : public BPlusTreePage\n> 一个Leaf Page存储 m 个顺序 key 和 m 个对应的value.value应该为 64-bit record_id 用于表示实际的tuple存储的地方(src/include/common/rid.h)\n```cpp\nINDEX_TEMPLATE_ARGUMENTS\nvoid B_PLUS_TREE_LEAF_PAGE_TYPE::Init(int max_size, int size, page_id_t next_page_id) {\n  SetPageType(IndexPageType::LEAF_PAGE);\n  SetMaxSize(max_size);\n  SetSize(size);//size 默认为0\n  SetNextPageId(next_page_id);//next_page_id默认为INVALID_PAGE_ID\n}\n\nINDEX_TEMPLATE_ARGUMENTS\nauto B_PLUS_TREE_LEAF_PAGE_TYPE::KeyIndex(const KeyType &key, const KeyComparator &comparator, int &index) const\n    -> bool {\n  // lower_bound\n  int l = 0;\n  int r = GetSize();\n  if (l >= r) {\n    return false;\n  }\n  while (l < r) {\n    int mid = (l + r) / 2;\n    if (comparator(array_[mid].first, key) < 0) {\n      l = mid + 1;\n    } else {\n      r = mid;\n    }\n  }\n  index = l;\n  return static_cast<bool>(l != GetSize() && comparator(KeyAt(l), key) == 0);\n}\n\nINDEX_TEMPLATE_ARGUMENTS\nauto B_PLUS_TREE_LEAF_PAGE_TYPE::Insert(const KeyType &key, const ValueType &value, const KeyComparator &comparator)\n    -> bool {\n  int pos = -1;\n  if (KeyIndex(key, comparator, pos)) {  // duplicate key\n    return false;//重复的key，直接返回false\n  }\n\n  // move\n  for (int i = GetSize() - 1; i >= pos; --i) {//移动array_元素\n    array_[i + 1] = array_[i];\n  }\n  // insert\n  array_[pos] = {key, value};//插入key-value\n  IncreaseSize(1);//size ++\n  return true;\n}\n```\n\n### Class BplusTreeHeaderPage\n> 头节点，存储了root page id，使得根节点和非根节点一样拥有父节点\n\n\n\n## Task #2a B+ Tree Data Structure(Insertion, Point Search)\n\n\n# CheckPoint#2\n## Task #2b B+ Tree Data Structure(Deletion)\n## Task #3 Index Iterator\n## Task #4 Concurrency Control\n\n","source":"_posts/cmu15445-project2.md","raw":"---\ntitle: cmu15445-project2\ndate: 2024-02-26 22:16:24\ntags: cmu15445—2023\ncategories: cmu15445-2023\n---\n# B+ Tree\nB+ Tree是一种自平衡树，它将数据有序地存储，并且在search、sequential access、insertions以及deletions操作的复杂度上都满足O(logn),其中sequential access的最终复杂度还与所需数据总量有关\n![img](../images/cmu15445-project2/1.png)\n以M—way B+tree为例，它的特点总结如下：\n- 每个节点最多存储M个key，有M+1个children\n- B+ Tree是perfectly balanced，即每个leaf node的深度都一样\n- 除了root节点，所有节点必须至少处于半满状态，即 M/2 - 1 <= #keys <= M - 1\n- 假设每个inner node中包含k个keys，那么它必然有k + 1个children\n\n# B+ Tree Operations\nInsert\n> 1. 找到对应的leafNode L\n> 2. 将key/value pair按顺序插入到 L 中\n> 3. 如果L 还有足够的空间，操作结束；如果空间不足，则需要将L分裂成两个节点，同时在parent node上新增entry，若parent node也空间不足，则递归地分裂，直到root node为止\n\nMax.degree = 5时<br>\n从1插入到13的情况  [BPlusTree可视化网站](https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html)\n![img](../images/cmu15445-project2/2.png)\n\nDelete\n> 1. 从root开始，找到目标entry所在的leaf node L\n> 2. 删除该entry\n> 3. 如果L仍然处在半满状态，操作结束；否则先尝试从siblings那里借entries，如果失败，则将L 与相应的sibling合并\n> 4. 如果合并发生了，则可能需要递归地删除parent node中的entry\n\n# CheckPoint#1\n## Task #1 B+ Tree Pages\n### class BPlusTreePage的3个类成员\n![img](../images/cmu15445-project2/3.png)\nGetMinSize函数实现:\n```cpp\nauto BPlusTreePage::GetMinSize() const -> int {\n  if (IsLeafPage()) {// 叶子节点\n    return max_size_ / 2;\n  }\n  return (max_size_ + 1) / 2; //内部节点\n}\n```\n\n### class BPlusTreeInternalPage : public BPlusTreePage <br>\n> 一个Internal Page存储 m 个顺序 key 和 m + 1 个child pointers(其它BPlusTreePage的page_ids)<br>\n使用一个数组存储key/page_id pairs，并且第一个key被设置为invalid，并且查找要从第二个key开始查找\n\n```cpp\nINDEX_TEMPLATE_ARGUMENTS\nvoid B_PLUS_TREE_INTERNAL_PAGE_TYPE::Init(int max_size, int size) {\n  SetPageType(IndexPageType::INTERNAL_PAGE);\n  SetMaxSize(max_size);\n  SetSize(size);//size 默认为1\n}\n\nINDEX_TEMPLATE_ARGUMENTS\nauto B_PLUS_TREE_INTERNAL_PAGE_TYPE::ValueIndex(const ValueType &value) const -> int {\n  for (int i = 0; i <= GetSize(); ++i) {//顺序查找\n    if (array_[i].second == value) {\n      return i;\n    }\n  }\n  return -1;\n}\n\nINDEX_TEMPLATE_ARGUMENTS\nauto B_PLUS_TREE_INTERNAL_PAGE_TYPE::LookUp(const KeyType &key, const KeyComparator &comparator) const -> ValueType {\n  for (int i = 1; i < GetSize(); ++i) {  // 顺序查找\n    if (comparator(key, array_[i].first) < 0) {//找到第一个大于key的array_[i].first\n      return array_[i - 1].second;\n    }\n  }\n  return array_[GetSize() - 1].second;\n}\n\nINDEX_TEMPLATE_ARGUMENTS\nauto B_PLUS_TREE_INTERNAL_PAGE_TYPE::Insert(const KeyType &key, const ValueType &value, const KeyComparator &comparator)\n    -> bool {\n  if (GetSize() == GetMaxSize()) {//已经满了返回false\n    return false;\n  }\n  // upper_bound\n  int l = 1;\n  int r = GetSize();\n  while (l < r) {\n    int mid = (l + r) / 2;\n    if (comparator(array_[mid].first, key) > 0) {\n      r = mid;\n    } else {\n      l = mid + 1;\n    }\n  }\n  for (int i = GetSize() - 1; i >= l; --i) {//元素移位\n    array_[i + 1] = array_[i];\n  }\n  array_[l] = {key, value};//存储插入的key-value\n  IncreaseSize(1);//size ++\n  return true;\n}\n```\n\n### class BPlusTreeLeafPage : public BPlusTreePage\n> 一个Leaf Page存储 m 个顺序 key 和 m 个对应的value.value应该为 64-bit record_id 用于表示实际的tuple存储的地方(src/include/common/rid.h)\n```cpp\nINDEX_TEMPLATE_ARGUMENTS\nvoid B_PLUS_TREE_LEAF_PAGE_TYPE::Init(int max_size, int size, page_id_t next_page_id) {\n  SetPageType(IndexPageType::LEAF_PAGE);\n  SetMaxSize(max_size);\n  SetSize(size);//size 默认为0\n  SetNextPageId(next_page_id);//next_page_id默认为INVALID_PAGE_ID\n}\n\nINDEX_TEMPLATE_ARGUMENTS\nauto B_PLUS_TREE_LEAF_PAGE_TYPE::KeyIndex(const KeyType &key, const KeyComparator &comparator, int &index) const\n    -> bool {\n  // lower_bound\n  int l = 0;\n  int r = GetSize();\n  if (l >= r) {\n    return false;\n  }\n  while (l < r) {\n    int mid = (l + r) / 2;\n    if (comparator(array_[mid].first, key) < 0) {\n      l = mid + 1;\n    } else {\n      r = mid;\n    }\n  }\n  index = l;\n  return static_cast<bool>(l != GetSize() && comparator(KeyAt(l), key) == 0);\n}\n\nINDEX_TEMPLATE_ARGUMENTS\nauto B_PLUS_TREE_LEAF_PAGE_TYPE::Insert(const KeyType &key, const ValueType &value, const KeyComparator &comparator)\n    -> bool {\n  int pos = -1;\n  if (KeyIndex(key, comparator, pos)) {  // duplicate key\n    return false;//重复的key，直接返回false\n  }\n\n  // move\n  for (int i = GetSize() - 1; i >= pos; --i) {//移动array_元素\n    array_[i + 1] = array_[i];\n  }\n  // insert\n  array_[pos] = {key, value};//插入key-value\n  IncreaseSize(1);//size ++\n  return true;\n}\n```\n\n### Class BplusTreeHeaderPage\n> 头节点，存储了root page id，使得根节点和非根节点一样拥有父节点\n\n\n\n## Task #2a B+ Tree Data Structure(Insertion, Point Search)\n\n\n# CheckPoint#2\n## Task #2b B+ Tree Data Structure(Deletion)\n## Task #3 Index Iterator\n## Task #4 Concurrency Control\n\n","slug":"cmu15445-project2","published":1,"updated":"2024-02-27T07:38:50.204Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt42429w0000ttjx0hpu61w8","content":"<h1 id=\"B-Tree\"><a href=\"#B-Tree\" class=\"headerlink\" title=\"B+ Tree\"></a>B+ Tree</h1><p>B+ Tree是一种自平衡树，它将数据有序地存储，并且在search、sequential access、insertions以及deletions操作的复杂度上都满足O(logn),其中sequential access的最终复杂度还与所需数据总量有关<br><img src=\"/../images/cmu15445-project2/1.png\" alt=\"img\"><br>以M—way B+tree为例，它的特点总结如下：</p>\n<ul>\n<li>每个节点最多存储M个key，有M+1个children</li>\n<li>B+ Tree是perfectly balanced，即每个leaf node的深度都一样</li>\n<li>除了root节点，所有节点必须至少处于半满状态，即 M&#x2F;2 - 1 &lt;&#x3D; #keys &lt;&#x3D; M - 1</li>\n<li>假设每个inner node中包含k个keys，那么它必然有k + 1个children</li>\n</ul>\n<h1 id=\"B-Tree-Operations\"><a href=\"#B-Tree-Operations\" class=\"headerlink\" title=\"B+ Tree Operations\"></a>B+ Tree Operations</h1><p>Insert</p>\n<blockquote>\n<ol>\n<li>找到对应的leafNode L</li>\n<li>将key&#x2F;value pair按顺序插入到 L 中</li>\n<li>如果L 还有足够的空间，操作结束；如果空间不足，则需要将L分裂成两个节点，同时在parent node上新增entry，若parent node也空间不足，则递归地分裂，直到root node为止</li>\n</ol>\n</blockquote>\n<p>Max.degree &#x3D; 5时<br><br>从1插入到13的情况  <a href=\"https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html\">BPlusTree可视化网站</a><br><img src=\"/../images/cmu15445-project2/2.png\" alt=\"img\"></p>\n<p>Delete</p>\n<blockquote>\n<ol>\n<li>从root开始，找到目标entry所在的leaf node L</li>\n<li>删除该entry</li>\n<li>如果L仍然处在半满状态，操作结束；否则先尝试从siblings那里借entries，如果失败，则将L 与相应的sibling合并</li>\n<li>如果合并发生了，则可能需要递归地删除parent node中的entry</li>\n</ol>\n</blockquote>\n<h1 id=\"CheckPoint-1\"><a href=\"#CheckPoint-1\" class=\"headerlink\" title=\"CheckPoint#1\"></a>CheckPoint#1</h1><h2 id=\"Task-1-B-Tree-Pages\"><a href=\"#Task-1-B-Tree-Pages\" class=\"headerlink\" title=\"Task #1 B+ Tree Pages\"></a>Task #1 B+ Tree Pages</h2><h3 id=\"class-BPlusTreePage的3个类成员\"><a href=\"#class-BPlusTreePage的3个类成员\" class=\"headerlink\" title=\"class BPlusTreePage的3个类成员\"></a>class BPlusTreePage的3个类成员</h3><p><img src=\"/../images/cmu15445-project2/3.png\" alt=\"img\"><br>GetMinSize函数实现:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">BPlusTreePage::GetMinSize</span><span class=\"params\">()</span> <span class=\"type\">const</span> -&gt; <span class=\"type\">int</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">IsLeafPage</span>()) &#123;<span class=\"comment\">// 叶子节点</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> max_size_ / <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (max_size_ + <span class=\"number\">1</span>) / <span class=\"number\">2</span>; <span class=\"comment\">//内部节点</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"class-BPlusTreeInternalPage-public-BPlusTreePage\"><a href=\"#class-BPlusTreeInternalPage-public-BPlusTreePage\" class=\"headerlink\" title=\"class BPlusTreeInternalPage : public BPlusTreePage \"></a>class BPlusTreeInternalPage : public BPlusTreePage <br></h3><blockquote>\n<p>一个Internal Page存储 m 个顺序 key 和 m + 1 个child pointers(其它BPlusTreePage的page_ids)<br><br>使用一个数组存储key&#x2F;page_id pairs，并且第一个key被设置为invalid，并且查找要从第二个key开始查找</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">INDEX_TEMPLATE_ARGUMENTS</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">B_PLUS_TREE_INTERNAL_PAGE_TYPE::Init</span><span class=\"params\">(<span class=\"type\">int</span> max_size, <span class=\"type\">int</span> size)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">SetPageType</span>(IndexPageType::INTERNAL_PAGE);</span><br><span class=\"line\">  <span class=\"built_in\">SetMaxSize</span>(max_size);</span><br><span class=\"line\">  <span class=\"built_in\">SetSize</span>(size);<span class=\"comment\">//size 默认为1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">INDEX_TEMPLATE_ARGUMENTS</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">B_PLUS_TREE_INTERNAL_PAGE_TYPE::ValueIndex</span><span class=\"params\">(<span class=\"type\">const</span> ValueType &amp;value)</span> <span class=\"type\">const</span> -&gt; <span class=\"type\">int</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= <span class=\"built_in\">GetSize</span>(); ++i) &#123;<span class=\"comment\">//顺序查找</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (array_[i].second == value) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">INDEX_TEMPLATE_ARGUMENTS</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">B_PLUS_TREE_INTERNAL_PAGE_TYPE::LookUp</span><span class=\"params\">(<span class=\"type\">const</span> KeyType &amp;key, <span class=\"type\">const</span> KeyComparator &amp;comparator)</span> <span class=\"type\">const</span> -&gt; ValueType </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"built_in\">GetSize</span>(); ++i) &#123;  <span class=\"comment\">// 顺序查找</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">comparator</span>(key, array_[i].first) &lt; <span class=\"number\">0</span>) &#123;<span class=\"comment\">//找到第一个大于key的array_[i].first</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> array_[i - <span class=\"number\">1</span>].second;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> array_[<span class=\"built_in\">GetSize</span>() - <span class=\"number\">1</span>].second;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">INDEX_TEMPLATE_ARGUMENTS</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">B_PLUS_TREE_INTERNAL_PAGE_TYPE::Insert</span><span class=\"params\">(<span class=\"type\">const</span> KeyType &amp;key, <span class=\"type\">const</span> ValueType &amp;value, <span class=\"type\">const</span> KeyComparator &amp;comparator)</span></span></span><br><span class=\"line\"><span class=\"function\">    -&gt; <span class=\"type\">bool</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">GetSize</span>() == <span class=\"built_in\">GetMaxSize</span>()) &#123;<span class=\"comment\">//已经满了返回false</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// upper_bound</span></span><br><span class=\"line\">  <span class=\"type\">int</span> l = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"type\">int</span> r = <span class=\"built_in\">GetSize</span>();</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (l &lt; r) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = (l + r) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">comparator</span>(array_[mid].first, key) &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      r = mid;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      l = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"built_in\">GetSize</span>() - <span class=\"number\">1</span>; i &gt;= l; --i) &#123;<span class=\"comment\">//元素移位</span></span><br><span class=\"line\">    array_[i + <span class=\"number\">1</span>] = array_[i];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  array_[l] = &#123;key, value&#125;;<span class=\"comment\">//存储插入的key-value</span></span><br><span class=\"line\">  <span class=\"built_in\">IncreaseSize</span>(<span class=\"number\">1</span>);<span class=\"comment\">//size ++</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"class-BPlusTreeLeafPage-public-BPlusTreePage\"><a href=\"#class-BPlusTreeLeafPage-public-BPlusTreePage\" class=\"headerlink\" title=\"class BPlusTreeLeafPage : public BPlusTreePage\"></a>class BPlusTreeLeafPage : public BPlusTreePage</h3><blockquote>\n<p>一个Leaf Page存储 m 个顺序 key 和 m 个对应的value.value应该为 64-bit record_id 用于表示实际的tuple存储的地方(src&#x2F;include&#x2F;common&#x2F;rid.h)</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">INDEX_TEMPLATE_ARGUMENTS</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">B_PLUS_TREE_LEAF_PAGE_TYPE::Init</span><span class=\"params\">(<span class=\"type\">int</span> max_size, <span class=\"type\">int</span> size, <span class=\"type\">page_id_t</span> next_page_id)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">SetPageType</span>(IndexPageType::LEAF_PAGE);</span><br><span class=\"line\">  <span class=\"built_in\">SetMaxSize</span>(max_size);</span><br><span class=\"line\">  <span class=\"built_in\">SetSize</span>(size);<span class=\"comment\">//size 默认为0</span></span><br><span class=\"line\">  <span class=\"built_in\">SetNextPageId</span>(next_page_id);<span class=\"comment\">//next_page_id默认为INVALID_PAGE_ID</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">INDEX_TEMPLATE_ARGUMENTS</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">B_PLUS_TREE_LEAF_PAGE_TYPE::KeyIndex</span><span class=\"params\">(<span class=\"type\">const</span> KeyType &amp;key, <span class=\"type\">const</span> KeyComparator &amp;comparator, <span class=\"type\">int</span> &amp;index)</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\">    -&gt; <span class=\"type\">bool</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// lower_bound</span></span><br><span class=\"line\">  <span class=\"type\">int</span> l = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"type\">int</span> r = <span class=\"built_in\">GetSize</span>();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (l &gt;= r) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (l &lt; r) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = (l + r) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">comparator</span>(array_[mid].first, key) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      l = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      r = mid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  index = l;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">static_cast</span>&lt;<span class=\"type\">bool</span>&gt;(l != <span class=\"built_in\">GetSize</span>() &amp;&amp; <span class=\"built_in\">comparator</span>(<span class=\"built_in\">KeyAt</span>(l), key) == <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">INDEX_TEMPLATE_ARGUMENTS</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">B_PLUS_TREE_LEAF_PAGE_TYPE::Insert</span><span class=\"params\">(<span class=\"type\">const</span> KeyType &amp;key, <span class=\"type\">const</span> ValueType &amp;value, <span class=\"type\">const</span> KeyComparator &amp;comparator)</span></span></span><br><span class=\"line\"><span class=\"function\">    -&gt; <span class=\"type\">bool</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> pos = <span class=\"number\">-1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">KeyIndex</span>(key, comparator, pos)) &#123;  <span class=\"comment\">// duplicate key</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;<span class=\"comment\">//重复的key，直接返回false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// move</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"built_in\">GetSize</span>() - <span class=\"number\">1</span>; i &gt;= pos; --i) &#123;<span class=\"comment\">//移动array_元素</span></span><br><span class=\"line\">    array_[i + <span class=\"number\">1</span>] = array_[i];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// insert</span></span><br><span class=\"line\">  array_[pos] = &#123;key, value&#125;;<span class=\"comment\">//插入key-value</span></span><br><span class=\"line\">  <span class=\"built_in\">IncreaseSize</span>(<span class=\"number\">1</span>);<span class=\"comment\">//size ++</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Class-BplusTreeHeaderPage\"><a href=\"#Class-BplusTreeHeaderPage\" class=\"headerlink\" title=\"Class BplusTreeHeaderPage\"></a>Class BplusTreeHeaderPage</h3><blockquote>\n<p>头节点，存储了root page id，使得根节点和非根节点一样拥有父节点</p>\n</blockquote>\n<h2 id=\"Task-2a-B-Tree-Data-Structure-Insertion-Point-Search\"><a href=\"#Task-2a-B-Tree-Data-Structure-Insertion-Point-Search\" class=\"headerlink\" title=\"Task #2a B+ Tree Data Structure(Insertion, Point Search)\"></a>Task #2a B+ Tree Data Structure(Insertion, Point Search)</h2><h1 id=\"CheckPoint-2\"><a href=\"#CheckPoint-2\" class=\"headerlink\" title=\"CheckPoint#2\"></a>CheckPoint#2</h1><h2 id=\"Task-2b-B-Tree-Data-Structure-Deletion\"><a href=\"#Task-2b-B-Tree-Data-Structure-Deletion\" class=\"headerlink\" title=\"Task #2b B+ Tree Data Structure(Deletion)\"></a>Task #2b B+ Tree Data Structure(Deletion)</h2><h2 id=\"Task-3-Index-Iterator\"><a href=\"#Task-3-Index-Iterator\" class=\"headerlink\" title=\"Task #3 Index Iterator\"></a>Task #3 Index Iterator</h2><h2 id=\"Task-4-Concurrency-Control\"><a href=\"#Task-4-Concurrency-Control\" class=\"headerlink\" title=\"Task #4 Concurrency Control\"></a>Task #4 Concurrency Control</h2>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"B-Tree\"><a href=\"#B-Tree\" class=\"headerlink\" title=\"B+ Tree\"></a>B+ Tree</h1><p>B+ Tree是一种自平衡树，它将数据有序地存储，并且在search、sequential access、insertions以及deletions操作的复杂度上都满足O(logn),其中sequential access的最终复杂度还与所需数据总量有关<br><img src=\"/../images/cmu15445-project2/1.png\" alt=\"img\"><br>以M—way B+tree为例，它的特点总结如下：</p>\n<ul>\n<li>每个节点最多存储M个key，有M+1个children</li>\n<li>B+ Tree是perfectly balanced，即每个leaf node的深度都一样</li>\n<li>除了root节点，所有节点必须至少处于半满状态，即 M&#x2F;2 - 1 &lt;&#x3D; #keys &lt;&#x3D; M - 1</li>\n<li>假设每个inner node中包含k个keys，那么它必然有k + 1个children</li>\n</ul>\n<h1 id=\"B-Tree-Operations\"><a href=\"#B-Tree-Operations\" class=\"headerlink\" title=\"B+ Tree Operations\"></a>B+ Tree Operations</h1><p>Insert</p>\n<blockquote>\n<ol>\n<li>找到对应的leafNode L</li>\n<li>将key&#x2F;value pair按顺序插入到 L 中</li>\n<li>如果L 还有足够的空间，操作结束；如果空间不足，则需要将L分裂成两个节点，同时在parent node上新增entry，若parent node也空间不足，则递归地分裂，直到root node为止</li>\n</ol>\n</blockquote>\n<p>Max.degree &#x3D; 5时<br><br>从1插入到13的情况  <a href=\"https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html\">BPlusTree可视化网站</a><br><img src=\"/../images/cmu15445-project2/2.png\" alt=\"img\"></p>\n<p>Delete</p>\n<blockquote>\n<ol>\n<li>从root开始，找到目标entry所在的leaf node L</li>\n<li>删除该entry</li>\n<li>如果L仍然处在半满状态，操作结束；否则先尝试从siblings那里借entries，如果失败，则将L 与相应的sibling合并</li>\n<li>如果合并发生了，则可能需要递归地删除parent node中的entry</li>\n</ol>\n</blockquote>\n<h1 id=\"CheckPoint-1\"><a href=\"#CheckPoint-1\" class=\"headerlink\" title=\"CheckPoint#1\"></a>CheckPoint#1</h1><h2 id=\"Task-1-B-Tree-Pages\"><a href=\"#Task-1-B-Tree-Pages\" class=\"headerlink\" title=\"Task #1 B+ Tree Pages\"></a>Task #1 B+ Tree Pages</h2><h3 id=\"class-BPlusTreePage的3个类成员\"><a href=\"#class-BPlusTreePage的3个类成员\" class=\"headerlink\" title=\"class BPlusTreePage的3个类成员\"></a>class BPlusTreePage的3个类成员</h3><p><img src=\"/../images/cmu15445-project2/3.png\" alt=\"img\"><br>GetMinSize函数实现:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">BPlusTreePage::GetMinSize</span><span class=\"params\">()</span> <span class=\"type\">const</span> -&gt; <span class=\"type\">int</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">IsLeafPage</span>()) &#123;<span class=\"comment\">// 叶子节点</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> max_size_ / <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (max_size_ + <span class=\"number\">1</span>) / <span class=\"number\">2</span>; <span class=\"comment\">//内部节点</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"class-BPlusTreeInternalPage-public-BPlusTreePage\"><a href=\"#class-BPlusTreeInternalPage-public-BPlusTreePage\" class=\"headerlink\" title=\"class BPlusTreeInternalPage : public BPlusTreePage \"></a>class BPlusTreeInternalPage : public BPlusTreePage <br></h3><blockquote>\n<p>一个Internal Page存储 m 个顺序 key 和 m + 1 个child pointers(其它BPlusTreePage的page_ids)<br><br>使用一个数组存储key&#x2F;page_id pairs，并且第一个key被设置为invalid，并且查找要从第二个key开始查找</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">INDEX_TEMPLATE_ARGUMENTS</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">B_PLUS_TREE_INTERNAL_PAGE_TYPE::Init</span><span class=\"params\">(<span class=\"type\">int</span> max_size, <span class=\"type\">int</span> size)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">SetPageType</span>(IndexPageType::INTERNAL_PAGE);</span><br><span class=\"line\">  <span class=\"built_in\">SetMaxSize</span>(max_size);</span><br><span class=\"line\">  <span class=\"built_in\">SetSize</span>(size);<span class=\"comment\">//size 默认为1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">INDEX_TEMPLATE_ARGUMENTS</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">B_PLUS_TREE_INTERNAL_PAGE_TYPE::ValueIndex</span><span class=\"params\">(<span class=\"type\">const</span> ValueType &amp;value)</span> <span class=\"type\">const</span> -&gt; <span class=\"type\">int</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= <span class=\"built_in\">GetSize</span>(); ++i) &#123;<span class=\"comment\">//顺序查找</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (array_[i].second == value) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">INDEX_TEMPLATE_ARGUMENTS</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">B_PLUS_TREE_INTERNAL_PAGE_TYPE::LookUp</span><span class=\"params\">(<span class=\"type\">const</span> KeyType &amp;key, <span class=\"type\">const</span> KeyComparator &amp;comparator)</span> <span class=\"type\">const</span> -&gt; ValueType </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"built_in\">GetSize</span>(); ++i) &#123;  <span class=\"comment\">// 顺序查找</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">comparator</span>(key, array_[i].first) &lt; <span class=\"number\">0</span>) &#123;<span class=\"comment\">//找到第一个大于key的array_[i].first</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> array_[i - <span class=\"number\">1</span>].second;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> array_[<span class=\"built_in\">GetSize</span>() - <span class=\"number\">1</span>].second;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">INDEX_TEMPLATE_ARGUMENTS</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">B_PLUS_TREE_INTERNAL_PAGE_TYPE::Insert</span><span class=\"params\">(<span class=\"type\">const</span> KeyType &amp;key, <span class=\"type\">const</span> ValueType &amp;value, <span class=\"type\">const</span> KeyComparator &amp;comparator)</span></span></span><br><span class=\"line\"><span class=\"function\">    -&gt; <span class=\"type\">bool</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">GetSize</span>() == <span class=\"built_in\">GetMaxSize</span>()) &#123;<span class=\"comment\">//已经满了返回false</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// upper_bound</span></span><br><span class=\"line\">  <span class=\"type\">int</span> l = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"type\">int</span> r = <span class=\"built_in\">GetSize</span>();</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (l &lt; r) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = (l + r) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">comparator</span>(array_[mid].first, key) &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      r = mid;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      l = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"built_in\">GetSize</span>() - <span class=\"number\">1</span>; i &gt;= l; --i) &#123;<span class=\"comment\">//元素移位</span></span><br><span class=\"line\">    array_[i + <span class=\"number\">1</span>] = array_[i];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  array_[l] = &#123;key, value&#125;;<span class=\"comment\">//存储插入的key-value</span></span><br><span class=\"line\">  <span class=\"built_in\">IncreaseSize</span>(<span class=\"number\">1</span>);<span class=\"comment\">//size ++</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"class-BPlusTreeLeafPage-public-BPlusTreePage\"><a href=\"#class-BPlusTreeLeafPage-public-BPlusTreePage\" class=\"headerlink\" title=\"class BPlusTreeLeafPage : public BPlusTreePage\"></a>class BPlusTreeLeafPage : public BPlusTreePage</h3><blockquote>\n<p>一个Leaf Page存储 m 个顺序 key 和 m 个对应的value.value应该为 64-bit record_id 用于表示实际的tuple存储的地方(src&#x2F;include&#x2F;common&#x2F;rid.h)</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">INDEX_TEMPLATE_ARGUMENTS</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">B_PLUS_TREE_LEAF_PAGE_TYPE::Init</span><span class=\"params\">(<span class=\"type\">int</span> max_size, <span class=\"type\">int</span> size, <span class=\"type\">page_id_t</span> next_page_id)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">SetPageType</span>(IndexPageType::LEAF_PAGE);</span><br><span class=\"line\">  <span class=\"built_in\">SetMaxSize</span>(max_size);</span><br><span class=\"line\">  <span class=\"built_in\">SetSize</span>(size);<span class=\"comment\">//size 默认为0</span></span><br><span class=\"line\">  <span class=\"built_in\">SetNextPageId</span>(next_page_id);<span class=\"comment\">//next_page_id默认为INVALID_PAGE_ID</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">INDEX_TEMPLATE_ARGUMENTS</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">B_PLUS_TREE_LEAF_PAGE_TYPE::KeyIndex</span><span class=\"params\">(<span class=\"type\">const</span> KeyType &amp;key, <span class=\"type\">const</span> KeyComparator &amp;comparator, <span class=\"type\">int</span> &amp;index)</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\">    -&gt; <span class=\"type\">bool</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// lower_bound</span></span><br><span class=\"line\">  <span class=\"type\">int</span> l = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"type\">int</span> r = <span class=\"built_in\">GetSize</span>();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (l &gt;= r) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (l &lt; r) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = (l + r) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">comparator</span>(array_[mid].first, key) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      l = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      r = mid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  index = l;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">static_cast</span>&lt;<span class=\"type\">bool</span>&gt;(l != <span class=\"built_in\">GetSize</span>() &amp;&amp; <span class=\"built_in\">comparator</span>(<span class=\"built_in\">KeyAt</span>(l), key) == <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">INDEX_TEMPLATE_ARGUMENTS</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">B_PLUS_TREE_LEAF_PAGE_TYPE::Insert</span><span class=\"params\">(<span class=\"type\">const</span> KeyType &amp;key, <span class=\"type\">const</span> ValueType &amp;value, <span class=\"type\">const</span> KeyComparator &amp;comparator)</span></span></span><br><span class=\"line\"><span class=\"function\">    -&gt; <span class=\"type\">bool</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> pos = <span class=\"number\">-1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">KeyIndex</span>(key, comparator, pos)) &#123;  <span class=\"comment\">// duplicate key</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;<span class=\"comment\">//重复的key，直接返回false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// move</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"built_in\">GetSize</span>() - <span class=\"number\">1</span>; i &gt;= pos; --i) &#123;<span class=\"comment\">//移动array_元素</span></span><br><span class=\"line\">    array_[i + <span class=\"number\">1</span>] = array_[i];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// insert</span></span><br><span class=\"line\">  array_[pos] = &#123;key, value&#125;;<span class=\"comment\">//插入key-value</span></span><br><span class=\"line\">  <span class=\"built_in\">IncreaseSize</span>(<span class=\"number\">1</span>);<span class=\"comment\">//size ++</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Class-BplusTreeHeaderPage\"><a href=\"#Class-BplusTreeHeaderPage\" class=\"headerlink\" title=\"Class BplusTreeHeaderPage\"></a>Class BplusTreeHeaderPage</h3><blockquote>\n<p>头节点，存储了root page id，使得根节点和非根节点一样拥有父节点</p>\n</blockquote>\n<h2 id=\"Task-2a-B-Tree-Data-Structure-Insertion-Point-Search\"><a href=\"#Task-2a-B-Tree-Data-Structure-Insertion-Point-Search\" class=\"headerlink\" title=\"Task #2a B+ Tree Data Structure(Insertion, Point Search)\"></a>Task #2a B+ Tree Data Structure(Insertion, Point Search)</h2><h1 id=\"CheckPoint-2\"><a href=\"#CheckPoint-2\" class=\"headerlink\" title=\"CheckPoint#2\"></a>CheckPoint#2</h1><h2 id=\"Task-2b-B-Tree-Data-Structure-Deletion\"><a href=\"#Task-2b-B-Tree-Data-Structure-Deletion\" class=\"headerlink\" title=\"Task #2b B+ Tree Data Structure(Deletion)\"></a>Task #2b B+ Tree Data Structure(Deletion)</h2><h2 id=\"Task-3-Index-Iterator\"><a href=\"#Task-3-Index-Iterator\" class=\"headerlink\" title=\"Task #3 Index Iterator\"></a>Task #3 Index Iterator</h2><h2 id=\"Task-4-Concurrency-Control\"><a href=\"#Task-4-Concurrency-Control\" class=\"headerlink\" title=\"Task #4 Concurrency Control\"></a>Task #4 Concurrency Control</h2>"}],"PostAsset":[],"PostCategory":[{"post_id":"cln6ws35h00095gi5gz5xahk3","category_id":"cln6ws35d00045gi576jbbdc2","_id":"cln6ws35l000f5gi51ufnedey"},{"post_id":"cln6ws35600015gi54uq65v06","category_id":"cln6ws35d00045gi576jbbdc2","_id":"cln6ws35u000k5gi51ahp263e"},{"post_id":"cln6ws35i000a5gi567zcdubj","category_id":"cln6ws35d00045gi576jbbdc2","_id":"cln6ws35v000n5gi52who1j69"},{"post_id":"cln6ws35k000d5gi5gdfwfg8c","category_id":"cln6ws35d00045gi576jbbdc2","_id":"cln6ws35w000r5gi5gyoj146g"},{"post_id":"cln6ws35c00035gi58f3q21z8","category_id":"cln6ws35d00045gi576jbbdc2","_id":"cln6ws35x000u5gi5c9394l6h"},{"post_id":"cln6ws35l000e5gi54ihy0jl0","category_id":"cln6ws35d00045gi576jbbdc2","_id":"cln6ws35y000y5gi58w6ldt2u"},{"post_id":"cln6ws35n000j5gi592bgbuck","category_id":"cln6ws35d00045gi576jbbdc2","_id":"cln6ws35z00115gi5hqcvbnra"},{"post_id":"cln6ws35f00075gi531fkgxkr","category_id":"cln6ws35d00045gi576jbbdc2","_id":"cln6ws36000155gi53zmq3avl"},{"post_id":"cln6ws35u000m5gi56bnrenl6","category_id":"cln6ws35d00045gi576jbbdc2","_id":"cln6ws36200185gi57qe4cavx"},{"post_id":"cln6ws35w000q5gi535fb0dd8","category_id":"cln6ws35d00045gi576jbbdc2","_id":"cln6ws363001c5gi5a56g5kaq"},{"post_id":"cln6ws35x000t5gi58q7b8cy8","category_id":"cln6ws35d00045gi576jbbdc2","_id":"cln6ws364001f5gi5fe9r24ou"},{"post_id":"cln6ws35y000x5gi5f4v6h4hw","category_id":"cln6ws35d00045gi576jbbdc2","_id":"cln6ws366001k5gi5gxycdp8d"},{"post_id":"cln6ws35z00105gi57r9p6kq8","category_id":"cln6ws35d00045gi576jbbdc2","_id":"cln6ws366001n5gi5cek7dhk4"},{"post_id":"cln6ws36000145gi57l5ac8yo","category_id":"cln6ws35d00045gi576jbbdc2","_id":"cln6ws36h001s5gi599pv29p0"},{"post_id":"cln6ws36100175gi5fhek5d3v","category_id":"cln6ws35d00045gi576jbbdc2","_id":"cln6ws36i001v5gi5erpbeink"},{"post_id":"cln6ws363001b5gi54r188p0u","category_id":"cln6ws365001h5gi5evly8fye","_id":"cln6ws36j001z5gi54zpj49a1"},{"post_id":"cln6ws36h001u5gi5684t7waz","category_id":"cln6ws36h001r5gi5a51yhi59","_id":"cln6ws36l00255gi535pggtp0"},{"post_id":"cln6ws364001e5gi5bikja71v","category_id":"cln6ws36h001r5gi5a51yhi59","_id":"cln6ws36m00285gi55e2zgp4l"},{"post_id":"cln6ws36j001y5gi550uw5kg3","category_id":"cln6ws36h001r5gi5a51yhi59","_id":"cln6ws36m002a5gi59rjg2r6r"},{"post_id":"cln6ws36j00225gi52ygl6qer","category_id":"cln6ws36h001r5gi5a51yhi59","_id":"cln6ws36m002e5gi5e3wvecl1"},{"post_id":"cln6ws365001j5gi5egpta3x8","category_id":"cln6ws36j00205gi5f9c315bg","_id":"cln6ws36n002g5gi5h3asbfac"},{"post_id":"cln6ws366001m5gi54plc52ru","category_id":"cln6ws36j00205gi5f9c315bg","_id":"cln6ws36n002j5gi52fwq5y3o"},{"post_id":"cln6ws36c001q5gi52aba9dix","category_id":"cln6ws36j00205gi5f9c315bg","_id":"cln6ws36n002l5gi50wh83g23"},{"post_id":"cln88vsea0000zqi5g90x41r0","category_id":"cln88vsed0001zqi557thdvri","_id":"cln88vsem0004zqi57r5f46m0"},{"post_id":"cln9wo74900006qi5cz6z45gx","category_id":"cln88vsed0001zqi557thdvri","_id":"cln9wo74g00026qi5azaof5hq"},{"post_id":"clt2vlxyc00004ijx7d5nb9h8","category_id":"cln88vsed0001zqi557thdvri","_id":"clt2vlxyj00064ijx3obof8y5"},{"post_id":"clt2vlxyf00014ijxaplt9niw","category_id":"cln88vsed0001zqi557thdvri","_id":"clt2vlxyk00094ijx4xasha4z"},{"post_id":"clt2vlxyg00034ijxgg4b0blp","category_id":"cln88vsed0001zqi557thdvri","_id":"clt2vlxyl000c4ijx5n2vbm3m"},{"post_id":"clt2vlxyh00054ijxbjschbu3","category_id":"cln88vsed0001zqi557thdvri","_id":"clt2vlxym000f4ijx9rqugzzf"},{"post_id":"clt2vlxyj00084ijx3tvb7taj","category_id":"cln88vsed0001zqi557thdvri","_id":"clt2vlxyo000i4ijx3c5qae7t"},{"post_id":"clt2vlxyk000b4ijxhd3cdmxo","category_id":"cln88vsed0001zqi557thdvri","_id":"clt2vlxyr000l4ijxguo01gjv"},{"post_id":"clt2vlxyl000e4ijxhylkblq1","category_id":"cln88vsed0001zqi557thdvri","_id":"clt2vlxys000n4ijxd0ql994g"},{"post_id":"clt2vlxym000h4ijxdmml8zib","category_id":"cln6ws365001h5gi5evly8fye","_id":"clt2vlxz0000q4ijxha3f1w6j"},{"post_id":"clt2vlxyp000k4ijxgcnt7t0p","category_id":"clt2vlxys000o4ijxcpysete2","_id":"clt2vlxz0000s4ijxatqn0aay"},{"post_id":"clt3xhf9k0000dzjxeft50b8h","category_id":"clt2vlxys000o4ijxcpysete2","_id":"clt3xhf9s0002dzjx3mr68s5e"},{"post_id":"clt42429w0000ttjx0hpu61w8","category_id":"clt2vlxys000o4ijxcpysete2","_id":"clt4242a30002ttjxcwh94oo8"}],"PostTag":[{"post_id":"cln6ws35k000d5gi5gdfwfg8c","tag_id":"cln6ws35e00055gi55x0i8k1h","_id":"cln6ws35n000i5gi53so42dil"},{"post_id":"cln6ws35k000d5gi5gdfwfg8c","tag_id":"cln6ws35i000c5gi5dqxyearg","_id":"cln6ws35u000l5gi5105l1yxt"},{"post_id":"cln6ws35600015gi54uq65v06","tag_id":"cln6ws35e00055gi55x0i8k1h","_id":"cln6ws35w000p5gi50p1hd5d0"},{"post_id":"cln6ws35600015gi54uq65v06","tag_id":"cln6ws35i000c5gi5dqxyearg","_id":"cln6ws35x000s5gi52rap1ubv"},{"post_id":"cln6ws35l000e5gi54ihy0jl0","tag_id":"cln6ws35e00055gi55x0i8k1h","_id":"cln6ws35y000w5gi552ef6twz"},{"post_id":"cln6ws35l000e5gi54ihy0jl0","tag_id":"cln6ws35i000c5gi5dqxyearg","_id":"cln6ws35z000z5gi52xu41ciz"},{"post_id":"cln6ws35n000j5gi592bgbuck","tag_id":"cln6ws35e00055gi55x0i8k1h","_id":"cln6ws36000135gi5a4heeio8"},{"post_id":"cln6ws35n000j5gi592bgbuck","tag_id":"cln6ws35i000c5gi5dqxyearg","_id":"cln6ws36100165gi52ogj9d21"},{"post_id":"cln6ws35u000m5gi56bnrenl6","tag_id":"cln6ws35e00055gi55x0i8k1h","_id":"cln6ws362001a5gi505mu7rw8"},{"post_id":"cln6ws35u000m5gi56bnrenl6","tag_id":"cln6ws35i000c5gi5dqxyearg","_id":"cln6ws363001d5gi56r956sms"},{"post_id":"cln6ws35w000q5gi535fb0dd8","tag_id":"cln6ws35e00055gi55x0i8k1h","_id":"cln6ws365001i5gi5gtsrd64w"},{"post_id":"cln6ws35w000q5gi535fb0dd8","tag_id":"cln6ws35i000c5gi5dqxyearg","_id":"cln6ws366001l5gi58luugg48"},{"post_id":"cln6ws35c00035gi58f3q21z8","tag_id":"cln6ws35e00055gi55x0i8k1h","_id":"cln6ws36c001p5gi53cii1s4s"},{"post_id":"cln6ws35c00035gi58f3q21z8","tag_id":"cln6ws35i000c5gi5dqxyearg","_id":"cln6ws36h001t5gi5emgo74gu"},{"post_id":"cln6ws35x000t5gi58q7b8cy8","tag_id":"cln6ws35e00055gi55x0i8k1h","_id":"cln6ws36i001x5gi5bwpy8tg9"},{"post_id":"cln6ws35x000t5gi58q7b8cy8","tag_id":"cln6ws35i000c5gi5dqxyearg","_id":"cln6ws36j00215gi5gqhig45x"},{"post_id":"cln6ws35y000x5gi5f4v6h4hw","tag_id":"cln6ws35e00055gi55x0i8k1h","_id":"cln6ws36l00235gi5f0508yq1"},{"post_id":"cln6ws35y000x5gi5f4v6h4hw","tag_id":"cln6ws35i000c5gi5dqxyearg","_id":"cln6ws36m00275gi56aib69cb"},{"post_id":"cln6ws35z00105gi57r9p6kq8","tag_id":"cln6ws35e00055gi55x0i8k1h","_id":"cln6ws36m00295gi5dlvu37d4"},{"post_id":"cln6ws35z00105gi57r9p6kq8","tag_id":"cln6ws35i000c5gi5dqxyearg","_id":"cln6ws36m002d5gi5f7gu3yiq"},{"post_id":"cln6ws36000145gi57l5ac8yo","tag_id":"cln6ws35e00055gi55x0i8k1h","_id":"cln6ws36n002f5gi58v9u57sc"},{"post_id":"cln6ws36000145gi57l5ac8yo","tag_id":"cln6ws35i000c5gi5dqxyearg","_id":"cln6ws36n002i5gi54t4c1xuw"},{"post_id":"cln6ws35f00075gi531fkgxkr","tag_id":"cln6ws35e00055gi55x0i8k1h","_id":"cln6ws36n002k5gi51qrt3d92"},{"post_id":"cln6ws35f00075gi531fkgxkr","tag_id":"cln6ws35i000c5gi5dqxyearg","_id":"cln6ws36n002n5gi5c1ymgspd"},{"post_id":"cln6ws36100175gi5fhek5d3v","tag_id":"cln6ws35e00055gi55x0i8k1h","_id":"cln6ws36n002o5gi598bn1euf"},{"post_id":"cln6ws36100175gi5fhek5d3v","tag_id":"cln6ws35i000c5gi5dqxyearg","_id":"cln6ws36n002p5gi5hq6n3x8r"},{"post_id":"cln6ws35h00095gi5gz5xahk3","tag_id":"cln6ws35e00055gi55x0i8k1h","_id":"cln6ws36o002r5gi55w83cggx"},{"post_id":"cln6ws35h00095gi5gz5xahk3","tag_id":"cln6ws35i000c5gi5dqxyearg","_id":"cln6ws36o002s5gi5hlz3b9lw"},{"post_id":"cln6ws35i000a5gi567zcdubj","tag_id":"cln6ws35e00055gi55x0i8k1h","_id":"cln6ws36o002u5gi57rke9dom"},{"post_id":"cln6ws35i000a5gi567zcdubj","tag_id":"cln6ws35i000c5gi5dqxyearg","_id":"cln6ws36o002v5gi54me57uyp"},{"post_id":"cln6ws363001b5gi54r188p0u","tag_id":"cln6ws366001o5gi54z9r77gt","_id":"cln6ws36o002w5gi526g9h250"},{"post_id":"cln6ws364001e5gi5bikja71v","tag_id":"cln6ws36i001w5gi55axk0zg9","_id":"cln6ws36o002x5gi5dtokczn4"},{"post_id":"cln6ws365001j5gi5egpta3x8","tag_id":"cln6ws36l00245gi55cblfjl5","_id":"cln6ws36o002y5gi56t8x8q2d"},{"post_id":"cln6ws366001m5gi54plc52ru","tag_id":"cln6ws36m002b5gi5dhgyagpv","_id":"cln6ws36o002z5gi57v6lgaf2"},{"post_id":"cln6ws36c001q5gi52aba9dix","tag_id":"cln6ws36n002h5gi54oyl2cs9","_id":"cln6ws36o00305gi5fhhz9jif"},{"post_id":"cln6ws36h001u5gi5684t7waz","tag_id":"cln6ws36n002m5gi5h8ca977w","_id":"cln6ws36o00315gi52m3z9fle"},{"post_id":"cln6ws36j001y5gi550uw5kg3","tag_id":"cln6ws36n002q5gi5fveqaaip","_id":"cln6ws36o00325gi5g6571bj0"},{"post_id":"cln6ws36j00225gi52ygl6qer","tag_id":"cln6ws36n002m5gi5h8ca977w","_id":"cln6ws36o00335gi5f8ath2wi"},{"post_id":"cln88vsea0000zqi5g90x41r0","tag_id":"cln88vsel0002zqi53m2x8vug","_id":"cln88vsem0003zqi5449417zj"},{"post_id":"cln9wo74900006qi5cz6z45gx","tag_id":"cln88vsel0002zqi53m2x8vug","_id":"cln9wo74g00016qi50g4z1xxx"},{"post_id":"clt2vlxyc00004ijx7d5nb9h8","tag_id":"cln88vsel0002zqi53m2x8vug","_id":"clt2vlxyg00024ijxeyf0f617"},{"post_id":"clt2vlxyf00014ijxaplt9niw","tag_id":"cln88vsel0002zqi53m2x8vug","_id":"clt2vlxyh00044ijx2n0o6asc"},{"post_id":"clt2vlxyg00034ijxgg4b0blp","tag_id":"cln88vsel0002zqi53m2x8vug","_id":"clt2vlxyj00074ijx246xhto5"},{"post_id":"clt2vlxyh00054ijxbjschbu3","tag_id":"cln88vsel0002zqi53m2x8vug","_id":"clt2vlxyk000a4ijxfbggg1bs"},{"post_id":"clt2vlxyj00084ijx3tvb7taj","tag_id":"cln88vsel0002zqi53m2x8vug","_id":"clt2vlxyl000d4ijx3wtodxzd"},{"post_id":"clt2vlxyk000b4ijxhd3cdmxo","tag_id":"cln88vsel0002zqi53m2x8vug","_id":"clt2vlxym000g4ijx5jpn3nis"},{"post_id":"clt2vlxyl000e4ijxhylkblq1","tag_id":"cln88vsel0002zqi53m2x8vug","_id":"clt2vlxyp000j4ijxehh9fols"},{"post_id":"clt2vlxym000h4ijxdmml8zib","tag_id":"cln6ws366001o5gi54z9r77gt","_id":"clt2vlxyr000m4ijx2t674a44"},{"post_id":"clt2vlxyp000k4ijxgcnt7t0p","tag_id":"clt2vlxyz000p4ijx0fmza22w","_id":"clt2vlxz0000r4ijx3z0i1s1i"},{"post_id":"clt3xhf9k0000dzjxeft50b8h","tag_id":"clt2vlxyz000p4ijx0fmza22w","_id":"clt3xhf9r0001dzjx5rutbqlx"},{"post_id":"clt42429w0000ttjx0hpu61w8","tag_id":"clt2vlxyz000p4ijx0fmza22w","_id":"clt4242a30001ttjxe0tu20vd"}],"Tag":[{"name":"MySQL","_id":"cln6ws35e00055gi55x0i8k1h"},{"name":"MySQL是怎样运行的","_id":"cln6ws35i000c5gi5dqxyearg"},{"name":"cmake","_id":"cln6ws366001o5gi54z9r77gt"},{"name":"configure","_id":"cln6ws36i001w5gi55axk0zg9"},{"name":"Linux不同目录详解","_id":"cln6ws36l00245gi55cblfjl5"},{"name":"Linux文件权限","_id":"cln6ws36m002b5gi5dhgyagpv"},{"name":"Linux环境变量配置","_id":"cln6ws36n002h5gi54oyl2cs9"},{"name":"链接、装载与库","_id":"cln6ws36n002m5gi5h8ca977w"},{"name":"深度学习","_id":"cln6ws36n002q5gi5fveqaaip"},{"name":"Learned Index","_id":"cln88vsel0002zqi53m2x8vug"},{"name":"cmu15445—2023","_id":"clt2vlxyz000p4ijx0fmza22w"}]}}
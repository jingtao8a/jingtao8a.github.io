{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"source/images/11_1.jpg","path":"images/11_1.jpg","modified":0,"renderable":0},{"_id":"source/images/12_1.jpg","path":"images/12_1.jpg","modified":0,"renderable":0},{"_id":"source/images/15_1.jpg","path":"images/15_1.jpg","modified":0,"renderable":0},{"_id":"source/images/1_1.jpg","path":"images/1_1.jpg","modified":0,"renderable":0},{"_id":"source/images/1_2.jpg","path":"images/1_2.jpg","modified":0,"renderable":0},{"_id":"source/images/1_3.jpg","path":"images/1_3.jpg","modified":0,"renderable":0},{"_id":"source/images/4_1.jpg","path":"images/4_1.jpg","modified":0,"renderable":0},{"_id":"source/images/4_2.jpg","path":"images/4_2.jpg","modified":0,"renderable":0},{"_id":"source/images/4_3.jpg","path":"images/4_3.jpg","modified":0,"renderable":0},{"_id":"source/images/4_4.jpg","path":"images/4_4.jpg","modified":0,"renderable":0},{"_id":"source/images/5_1.jpg","path":"images/5_1.jpg","modified":0,"renderable":0},{"_id":"source/images/5_2.jpg","path":"images/5_2.jpg","modified":0,"renderable":0},{"_id":"source/images/5_3.jpg","path":"images/5_3.jpg","modified":0,"renderable":0},{"_id":"source/images/5_4.jpg","path":"images/5_4.jpg","modified":0,"renderable":0},{"_id":"source/images/5_5.jpg","path":"images/5_5.jpg","modified":0,"renderable":0},{"_id":"source/images/5_6.jpg","path":"images/5_6.jpg","modified":0,"renderable":0},{"_id":"source/images/5_7.jpg","path":"images/5_7.jpg","modified":0,"renderable":0},{"_id":"source/images/6_1.jpg","path":"images/6_1.jpg","modified":0,"renderable":0},{"_id":"source/images/6_2.jpg","path":"images/6_2.jpg","modified":0,"renderable":0},{"_id":"source/images/6_3.jpg","path":"images/6_3.jpg","modified":0,"renderable":0},{"_id":"source/images/6_4.jpg","path":"images/6_4.jpg","modified":0,"renderable":0},{"_id":"source/images/6_5.jpg","path":"images/6_5.jpg","modified":0,"renderable":0},{"_id":"source/images/6_6.jpg","path":"images/6_6.jpg","modified":0,"renderable":0},{"_id":"source/images/7_1.jpg","path":"images/7_1.jpg","modified":0,"renderable":0},{"_id":"source/images/iverson.jpg","path":"images/iverson.jpg","modified":0,"renderable":0},{"_id":"source/images/sea.jpg","path":"images/sea.jpg","modified":0,"renderable":0},{"_id":"source/images/cmake学习/1.jpg","path":"images/cmake学习/1.jpg","modified":0,"renderable":0},{"_id":"source/images/动手深度学习/1.jpg","path":"images/动手深度学习/1.jpg","modified":0,"renderable":0},{"_id":"source/images/静态链接/1.jpg","path":"images/静态链接/1.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/1-启动选项.md","hash":"bae8f1502b6a8f42517adbabad50549ffb2810a9","modified":1696128945143},{"_id":"source/_posts/10-InnoDB统计数据是如何收集的.md","hash":"3e954d80e8f7532773b3485b544ebd721c90017e","modified":1696128945143},{"_id":"source/_posts/11-MySQL基于规则的优化.md","hash":"6f64633936250f4c1f0a8ed93e4b5d75f9077cae","modified":1696128945143},{"_id":"source/_posts/12-事务.md","hash":"be8647d8285867ea0b86eabd156501a920a54cea","modified":1696128945143},{"_id":"source/_posts/13-redo日志.md","hash":"f0fe71f00aeb017e58f43494e103568cb883d2a8","modified":1696128945143},{"_id":"source/_posts/14-undo日志.md","hash":"2a866a64c2c910785bebb635ac0b6e04e631dbcd","modified":1696128945143},{"_id":"source/_posts/15-事务的隔离级别.md","hash":"efa1424dc2a52b8d3e4e0f2148851c3839cd6e37","modified":1696128945143},{"_id":"source/_posts/2-系统变量.md","hash":"d229e7234752acac8b70aab661b4763e03c6bf8a","modified":1696128945143},{"_id":"source/_posts/3-状态变量.md","hash":"446a784d9a7cd6e86ff21b0bd60e1b1a8f0042d5","modified":1696128945143},{"_id":"source/_posts/4-字符集和比较规则.md","hash":"4ac1539c5e2e4bc6c43367ffa49b20c1ab863dcd","modified":1696128945143},{"_id":"source/_posts/5-InnoDB记录行格式.md","hash":"4f7b6bbba9c6b10a02bd19f56167dfb0fd2144bb","modified":1696128945143},{"_id":"source/_posts/6-InnoDB数据页结构.md","hash":"cf46d9ed38b8b4e185b2c147bd80ec7c63ae25bb","modified":1696128945143},{"_id":"source/_posts/7-B-树索引.md","hash":"75a326a8525fc68b838bc2e438b5536d89315457","modified":1696128945143},{"_id":"source/_posts/8-单表访问方法.md","hash":"eabcdb1eda9f9e848943a4a4957348f2e9d0f0de","modified":1696128945143},{"_id":"source/_posts/9-连接的原理.md","hash":"af4edfaed1d71cccb6bb30bf1430b7ddfc4cb5cb","modified":1696128945143},{"_id":"source/_posts/cmake学习.md","hash":"11b655ce14260d6680bf7df1c212b9648ebf9a32","modified":1696128945143},{"_id":"source/_posts/configure命令.md","hash":"d68e7670862ab564020ade6be7f74b188a303cc9","modified":1696128945143},{"_id":"source/_posts/linux下目录各个文件夹详解.md","hash":"7d83b544c4274d83285610d3d8a21de37ffda80d","modified":1696128945143},{"_id":"source/_posts/linux文件权限和属性.md","hash":"c7aabd2aaac5622f14cb55c887a7d1a3ee7ecf05","modified":1696128945143},{"_id":"source/_posts/linux配置环境变量.md","hash":"da6d306acda912d86a27ca941b955569a0d7a8e9","modified":1696128945143},{"_id":"source/_posts/动态链接.md","hash":"dbf0590c3558646e05dfd96055e73b07694d4fd5","modified":1696128945143},{"_id":"source/_posts/动手深度学习.md","hash":"33119e4e2bbd27e12b0810a113231f1b01536d1e","modified":1696128945143},{"_id":"source/_posts/静态链接.md","hash":"67ed097e214b9762f4170a99b0c69f3d10a0db8a","modified":1696128945143},{"_id":"source/about/index.md","hash":"4d1119de797376ea463107fc4cd7dfa11e57b31b","modified":1696128945143},{"_id":"source/archives/index.md","hash":"a3ae9f105553a01db8c9c14cd7e21f15832336b9","modified":1696128945143},{"_id":"source/categories/index.md","hash":"fe0d71c5e645ea7427fda048ea775e7187cb05f0","modified":1696128945147},{"_id":"source/images/11_1.jpg","hash":"7fba275af4c21ca33a86e7c5818b8df8897b995a","modified":1696128945147},{"_id":"source/images/12_1.jpg","hash":"6d8fa5e9416af4517b5d3b13410b30164ee4dfc1","modified":1696128945147},{"_id":"source/images/15_1.jpg","hash":"74a5deaa9da211e904953d7ed1ae3b90a3b60d16","modified":1696128945147},{"_id":"source/images/1_1.jpg","hash":"13218fc8811d226f5a02d55fa787833db0c8508f","modified":1696128945147},{"_id":"source/images/1_2.jpg","hash":"4a3f87de5d7eeda8f28678d6637e0a6d32ddae38","modified":1696128945147},{"_id":"source/images/1_3.jpg","hash":"197dc8960f42742441de15822c45aeb1eb00e2f3","modified":1696128945147},{"_id":"source/images/4_1.jpg","hash":"4a5c734eadcce35878c0925ffb6e48d99f92eb19","modified":1696128945147},{"_id":"source/images/4_2.jpg","hash":"70f74288b1c22c265a9ee8a677718ea9473a4e6f","modified":1696128945147},{"_id":"source/images/4_3.jpg","hash":"47198c6712a391a3210cba44580504f36b203e2b","modified":1696128945147},{"_id":"source/images/4_4.jpg","hash":"8e66437505eb82ef908dc37eb39a226af346429e","modified":1696128945147},{"_id":"source/images/5_1.jpg","hash":"ae6ae760e7004a81fde167d86e5c501d91e75ee2","modified":1696128945147},{"_id":"source/images/5_2.jpg","hash":"d2ddb5a456d9d6b74364ded5b27e41b23d62d47f","modified":1696128945147},{"_id":"source/images/5_3.jpg","hash":"ce2a9837e9ecfa86ad55f308cb5c7689d662cdcc","modified":1696128945147},{"_id":"source/images/5_4.jpg","hash":"802d7fd1d057c985bf80a2597cd2066de015ad0b","modified":1696128945147},{"_id":"source/images/5_6.jpg","hash":"9f1de4e064b04eb1968819245cd2d9598db43780","modified":1696128945147},{"_id":"source/images/5_7.jpg","hash":"1c750f9a8e531f84a1a73cf6e9bea8af12cff067","modified":1696128945147},{"_id":"source/images/6_1.jpg","hash":"c8d69ce82bb99ce5364e834bad449d907a6d3c1a","modified":1696128945147},{"_id":"source/images/6_2.jpg","hash":"b64ece41c5a5fe750ef7ba2c7045276178fa1c8b","modified":1696128945147},{"_id":"source/images/6_3.jpg","hash":"55f81540bfeb9f76a541efed34d9fe0af90aec41","modified":1696128945147},{"_id":"source/images/6_5.jpg","hash":"6b1511fab938a0dc909474914933e502ad22a27a","modified":1696128945147},{"_id":"source/images/6_6.jpg","hash":"4f65ec8246fa81f2a734fb9c9ede064b0e606f1c","modified":1696128945147},{"_id":"source/images/7_1.jpg","hash":"00a2e9c144febb2dd234b539febe016a80386da8","modified":1696128945147},{"_id":"source/images/iverson.jpg","hash":"2021f44d0263e3cc95d9560b646a80dee12e07c1","modified":1696128945147},{"_id":"source/tags/index.md","hash":"31d17baa85a98f68ae05621cb7217514ff744a35","modified":1696128945147},{"_id":"source/images/cmake学习/1.jpg","hash":"c02a6d08106affb9def98cb17b971cb6d2f348f6","modified":1696128945147},{"_id":"source/images/动手深度学习/1.jpg","hash":"c54415c44f1a34de6ba19524db4ed333fcfa7bc6","modified":1696128945147},{"_id":"source/images/静态链接/1.jpg","hash":"71ce721de4fb919f70c9312253a06cf6f324587f","modified":1696128945147},{"_id":"source/images/5_5.jpg","hash":"2d1cd40900b2642ba5dd07b08168557714d7d311","modified":1696128945147},{"_id":"source/images/6_4.jpg","hash":"3b841570770cb1d7d5a5375e9eeed80ec2058a23","modified":1696128945147},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1696130626148},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1696130626148},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1696130626148},{"_id":"themes/next/.gitignore","hash":"56f3470755c20311ddd30d421b377697a6e5e68b","modified":1696130626148},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1696130626148},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1696130626148},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1696130626148},{"_id":"themes/next/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1696130626148},{"_id":"themes/next/_config.yml","hash":"5bb174360f614e42d985399c598b8d0906730ff7","modified":1696131732056},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1696130626148},{"_id":"themes/next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1696130626148},{"_id":"themes/next/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1696130626156},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1696130626148},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1696130626148},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1696130626148},{"_id":"themes/next/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1696130626148},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1696130626148},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1696130626148},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1696130626148},{"_id":"themes/next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1696130626148},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1696130626148},{"_id":"themes/next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1696130626148},{"_id":"themes/next/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1696130626148},{"_id":"themes/next/languages/default.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1696130626148},{"_id":"themes/next/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1696130626148},{"_id":"themes/next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1696130626148},{"_id":"themes/next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1696130626148},{"_id":"themes/next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1696130626148},{"_id":"themes/next/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1696130626148},{"_id":"themes/next/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1696130626148},{"_id":"themes/next/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1696130626148},{"_id":"themes/next/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1696130626148},{"_id":"themes/next/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1696130626148},{"_id":"themes/next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1696130626152},{"_id":"themes/next/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1696130626152},{"_id":"themes/next/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1696130626152},{"_id":"themes/next/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1696130626152},{"_id":"themes/next/languages/tr.yml","hash":"2b041eeb8bd096f549464f191cfc1ea0181daca4","modified":1696130626152},{"_id":"themes/next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1696130626152},{"_id":"themes/next/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1696130626152},{"_id":"themes/next/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1696130626152},{"_id":"themes/next/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1696130626152},{"_id":"themes/next/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1696130626152},{"_id":"themes/next/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1696130626152},{"_id":"themes/next/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1696130626156},{"_id":"themes/next/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1696130626156},{"_id":"themes/next/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1696130626156},{"_id":"themes/next/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1696130626156},{"_id":"themes/next/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1696130626156},{"_id":"themes/next/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1696130626156},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1696130626156},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1696130626148},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1696130626148},{"_id":"themes/next/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1696130626148},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1696130626148},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1696130626148},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1696130626148},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1696130626148},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1696130626148},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1696130626148},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1696130626148},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1696130626148},{"_id":"themes/next/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1696130626148},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1696130626148},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1696130626152},{"_id":"themes/next/layout/_macro/post.swig","hash":"090b5a9b6fca8e968178004cbd6cff205b7eba57","modified":1696130626152},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1696130626152},{"_id":"themes/next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1696130626152},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4369b313cbbeae742cb35f86d23d99d4285f7359","modified":1696130626152},{"_id":"themes/next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1696130626156},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1696130626156},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1696130626156},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1696130626156},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1696130626156},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1696130626156},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1696130626156},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1696130626156},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"b782eb2e34c0c15440837040b5d65b093ab6ec04","modified":1696130626156},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1696130626156},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1696130626156},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1696130626156},{"_id":"themes/next/scripts/events/index.js","hash":"5743cde07f3d2aa11532a168a652e52ec28514fd","modified":1696130626156},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1696130626156},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1696130626156},{"_id":"themes/next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1696130626156},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1696130626156},{"_id":"themes/next/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1696130626156},{"_id":"themes/next/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1696130626156},{"_id":"themes/next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1696130626156},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1696130626156},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1696130626156},{"_id":"themes/next/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1696130626156},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1696130626156},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1696130626156},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1696130626156},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1696130626156},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1696130626156},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1696130626156},{"_id":"themes/next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1696130626156},{"_id":"themes/next/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1696130626156},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1696130626156},{"_id":"themes/next/source/css/_colors.styl","hash":"a8442520f719d3d7a19811cb3b85bcfd4a596e1f","modified":1696130626156},{"_id":"themes/next/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1696130626160},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1696130626160},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1696130626160},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1696130626160},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1696130626160},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1696130626160},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1696130626160},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1696130626160},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1696130626160},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1696130626160},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1696130626160},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1696130626160},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1696130626160},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1696130626160},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1696130626160},{"_id":"themes/next/source/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1696130626160},{"_id":"themes/next/source/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1696130626160},{"_id":"themes/next/source/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1696130626160},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1696130626160},{"_id":"themes/next/source/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1696130626160},{"_id":"themes/next/source/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1696130626168},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1696130626168},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1696130626152},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"810d544019e4a8651b756dd23e5592ee851eda71","modified":1696130626152},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1696130626152},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1696130626152},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1696130626152},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1696130626152},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1696130626156},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1696130626156},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1696130626156},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1696130626156},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1696130626156},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1696130626156},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1696130626156},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1696130626156},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1696130626156},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1696130626156},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1696130626156},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1696130626156},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1696130626156},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1696130626156},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1696130626156},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1696130626156},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1696130626156},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1696130626156},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1696130626156},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1696130626156},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1696130626156},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1696130626156},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1696130626156},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1696130626156},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1696130626156},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1696130626156},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1696130626156},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1696130626156},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1696130626156},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1696130626156},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1696130626156},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1696130626156},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1696130626156},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1696130626156},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1696130626156},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1696130626156},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1696130626156},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1696130626156},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1696130626156},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1696130626156},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1696130626156},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1696130626156},{"_id":"themes/next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1696130626156},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1696130626156},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1696130626156},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1696130626156},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1696130626156},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1696130626156},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1696130626156},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1696130626156},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1696130626156},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1696130626156},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1696130626156},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1696130626160},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1696130626160},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1696130626160},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"612ec843372dae709acb17112c1145a53450cc59","modified":1696130626160},{"_id":"themes/next/source/css/_variables/base.styl","hash":"818508748b7a62e02035e87fe58e75b603ed56dc","modified":1696130626160},{"_id":"themes/next/source/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1696130626160},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1696130626168},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1696130626168},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1696130626168},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1696130626156},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1696130626156},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1696130626156},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1696130626156},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1696130626156},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1696130626156},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"0b2c4b78eead410020d7c4ded59c75592a648df8","modified":1696130626156},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1696130626156},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1696130626160},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1696130626160},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1696130626160},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1696130626160},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"18ce72d90459c9aa66910ac64eae115f2dde3767","modified":1696130626160},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1696130626160},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1696130626160},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1696130626160},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1696130626160},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1696130626160},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1696130626160},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1696130626160},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1696130626160},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1696130626160},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"93db5dafe9294542a6b5f647643cb9deaced8e06","modified":1696130626160},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1696130626160},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1696130626160},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1696130626160},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1696130626160},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1696130626160},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"85da2f3006f4bef9a2199416ecfab4d288f848c4","modified":1696130626160},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44f47c88c06d89d06f220f102649057118715828","modified":1696130626160},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1696130626160},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1696130626160},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1696130626168},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1696130626168},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1696130626156},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1696130626156},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1696130626156},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1696130626156},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1696130626156},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1696130626156},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1696130626156},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1696130626156},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1696130626156},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1696130626156},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1696130626156},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1696130626156},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1696130626156},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"d114b2a531129e739a27ba6271cfe6857aa9a865","modified":1696130626156},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1696130626156},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1696130626156},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1696130626156},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1696130626156},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1696130626156},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1696130626156},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1696130626156},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1696130626156},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1696130626156},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1696130626156},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1696130626156},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1696130626156},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1696130626156},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1696130626156},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1696130626156},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1696130626156},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1696130626156},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1696130626156},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1696130626156},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1696130626156},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1696130626156},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1696130626156},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1696130626156},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1696130626156},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1696130626156},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1696130626156},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1696130626156},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1696130626160},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1696130626160},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1696130626160},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1696130626160},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1696130626160},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1696130626160},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1696130626160},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1696130626160},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1696130626160},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1696130626160},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1696130626160},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1696130626168},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1696130626168},{"_id":"source/images/sea.jpg","hash":"260f342bf5a77615bb2329886ac7ed4836bac87d","modified":1696128945147},{"_id":"public/search.xml","hash":"d04b5490db99aac4efeddfb5da6bc5a5f954e5b5","modified":1696131294109},{"_id":"public/about/index.html","hash":"74d8f286a94a3160abee8a27b7635b0107bf1ef8","modified":1696131740326},{"_id":"public/archives/index.html","hash":"ef1800bff29b19cf34ac35cb404940a70826324d","modified":1696131740326},{"_id":"public/categories/index.html","hash":"9c4ebb19367b9ea298a13507338cf2fcc1b65600","modified":1696131740326},{"_id":"public/tags/index.html","hash":"1eb0b036ad4a5b2e6d3f2766bee958c1197168e6","modified":1696131740326},{"_id":"public/2023/05/28/静态链接/index.html","hash":"37051878b8f7d79b2396103e8320033654cb6af5","modified":1696131740326},{"_id":"public/2023/05/28/configure命令/index.html","hash":"f243089876fd3d0ca5ae10ae1f94e538cd85ff8a","modified":1696131740326},{"_id":"public/2023/05/28/cmake学习/index.html","hash":"291d097665820cf39ef3bb1afa44b42470e0de52","modified":1696131740326},{"_id":"public/2023/05/28/linux配置环境变量/index.html","hash":"f31742a15c10617f550441c7e714a21e4a672f1b","modified":1696131740326},{"_id":"public/2023/05/28/linux下目录各个文件夹详解/index.html","hash":"850910c496161c1f5ef85f6e6bb8e854ef28ac20","modified":1696131740326},{"_id":"public/2023/05/28/linux文件权限和属性/index.html","hash":"415876b4b6b59cc0147ca83a7c331e524db5b1a0","modified":1696131740326},{"_id":"public/2023/05/27/15-事务的隔离级别/index.html","hash":"538081c992e1f300510843c16fe8679debcfc611","modified":1696131740326},{"_id":"public/2023/05/27/14-undo日志/index.html","hash":"9cc786257a2fab791d269a15ae6956640af84f5c","modified":1696131740326},{"_id":"public/2023/05/27/13-redo日志/index.html","hash":"d9131be00b25a326a911020b438372225104af93","modified":1696131740326},{"_id":"public/2023/05/27/11-MySQL基于规则的优化/index.html","hash":"62aee1c35e0a41cbb956ad8938dab57c0456f49a","modified":1696131740326},{"_id":"public/2023/05/27/10-InnoDB统计数据是如何收集的/index.html","hash":"9e23b0cc5b439cd45238f7d55ffd593c0167e39e","modified":1696131740326},{"_id":"public/2023/05/27/9-连接的原理/index.html","hash":"64d1d3f7240347f9192ae7ace216a8bee4b0d26b","modified":1696131740326},{"_id":"public/2023/05/27/8-单表访问方法/index.html","hash":"33d5bce0ec0c78894bfa73e7529ce0051dac241e","modified":1696131740326},{"_id":"public/2023/05/27/3-状态变量/index.html","hash":"75d864d3259ba70fb250b093d61cd48650a46af2","modified":1696131740326},{"_id":"public/archives/page/2/index.html","hash":"0b9ab34d344fcf9cc379d35087e62ff9e896d2c1","modified":1696131740326},{"_id":"public/archives/page/3/index.html","hash":"9bb434e838df6e5a9547072607d233cd7e99628c","modified":1696131740326},{"_id":"public/archives/2023/index.html","hash":"979ca462819508008ee613f0a35a78fe6dbbd76a","modified":1696131740326},{"_id":"public/archives/2023/page/2/index.html","hash":"9959081ac6a40c7f90200c799f42e78553789cff","modified":1696131740326},{"_id":"public/archives/2023/page/3/index.html","hash":"82259d8076a545b8307cfd27be0393f78daad808","modified":1696131740326},{"_id":"public/archives/2023/05/index.html","hash":"5fcaafc779c113ab7fcd987ba935bdce9f60384a","modified":1696131740326},{"_id":"public/archives/2023/05/page/2/index.html","hash":"feb3cb87c465366eff20ea86c08f1807fdeb60a5","modified":1696131740326},{"_id":"public/archives/2023/05/page/3/index.html","hash":"9f24283cbb550726b979642f2c267bfcc13cde33","modified":1696131740326},{"_id":"public/categories/数据库/index.html","hash":"a692fa690bfab4f31a7e07af81aa4ab9b9c7c0fe","modified":1696131740326},{"_id":"public/categories/数据库/page/2/index.html","hash":"adece4a199037303f3a8da367d59ceb3081960cf","modified":1696131740326},{"_id":"public/categories/cmake/index.html","hash":"71fd9231dfa1f9fcd949dd6ee7696adeca2dffa2","modified":1696131740326},{"_id":"public/categories/随笔/index.html","hash":"5f8a5e2ac05d5038e0fc43589e479a446a4d430d","modified":1696131740326},{"_id":"public/categories/Linux/index.html","hash":"cdc659b2320a90a28188b31d28f8c33e88f36bda","modified":1696131740326},{"_id":"public/tags/MySQL/index.html","hash":"376947ec8486dd1e71caeb3f12db6c03cb6f6cbf","modified":1696131740326},{"_id":"public/tags/MySQL/page/2/index.html","hash":"af886bfca9ab0cafea46f58459321bee466cf2bc","modified":1696131740326},{"_id":"public/tags/MySQL是怎样运行的/index.html","hash":"4f21452ca1d27b2961e115fcd4316d7259b9dcad","modified":1696131740326},{"_id":"public/tags/MySQL是怎样运行的/page/2/index.html","hash":"f965967238447fb2dc95f64e11c228ceda846685","modified":1696131740326},{"_id":"public/tags/cmake/index.html","hash":"b9ba07963eb1d6e178ba16ff5e729cd6192b07d6","modified":1696131740326},{"_id":"public/tags/configure/index.html","hash":"fc97d15bf7b3e61911a593ae1ed96be659aa6890","modified":1696131740326},{"_id":"public/tags/Linux不同目录详解/index.html","hash":"1fde9d0c1b7dc6a952169d30f971879c04e14235","modified":1696131740326},{"_id":"public/tags/Linux文件权限/index.html","hash":"9a55896876095fd6c3e92b32f092654e16c1706b","modified":1696131740326},{"_id":"public/tags/Linux环境变量配置/index.html","hash":"ffcc8e5f91525db833cc29140b9e5f034a9e8b13","modified":1696131740326},{"_id":"public/tags/链接、装载与库/index.html","hash":"8787dd3b8c787e22c230f98e2b43eddfb6c67ae5","modified":1696131740326},{"_id":"public/tags/深度学习/index.html","hash":"4020637c3155b4098df7418678d6ddc166601ebc","modified":1696131740326},{"_id":"public/2023/05/28/动态链接/index.html","hash":"1be83b79611ff5850d79ad8fa7405f070dae8857","modified":1696131740326},{"_id":"public/2023/05/28/动手深度学习/index.html","hash":"73f8fce45c3f612c1c684538f12c234581d48ec0","modified":1696131740326},{"_id":"public/2023/05/27/12-事务/index.html","hash":"14dfc8424bd88957c2d098bcfa07fd1dc35ec61e","modified":1696131740326},{"_id":"public/2023/05/27/7-B-树索引/index.html","hash":"9b8993fc31714212bb0c8d808f964b75142ba6e6","modified":1696131740326},{"_id":"public/2023/05/27/6-InnoDB数据页结构/index.html","hash":"6ec384a22360eab609bc928093f217b8b15e072d","modified":1696131740326},{"_id":"public/2023/05/27/5-InnoDB记录行格式/index.html","hash":"d15d41ef1b12b298fc07c5e775422475a393c249","modified":1696131740326},{"_id":"public/2023/05/27/4-字符集和比较规则/index.html","hash":"d238a2b711d47691102662622af61348d79bb9d3","modified":1696131740326},{"_id":"public/2023/05/27/2-系统变量/index.html","hash":"6cf9f06be7978bb32742bbd2cc5319daa935b80b","modified":1696131740326},{"_id":"public/2023/05/27/1-启动选项/index.html","hash":"a8d7f381efbf828af6b4c278b92ebbc89912a673","modified":1696131740326},{"_id":"public/index.html","hash":"76eb46a841bb5f6a3ab9c2cb38aa9f8a20e51753","modified":1696131740326},{"_id":"public/page/2/index.html","hash":"e1c37fb87b9b07bd7cc333e88499f52a75ea948f","modified":1696131740326},{"_id":"public/page/3/index.html","hash":"7d03bb4c7f30dd401544db5521169fc41fd73afc","modified":1696131740326},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1696131294109},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1696131294109},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1696131294109},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1696131294109},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1696131294109},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1696131294109},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1696131294109},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1696131294109},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1696131294109},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1696131294109},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1696131294109},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1696131294109},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1696131294109},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1696131294109},{"_id":"public/images/11_1.jpg","hash":"7fba275af4c21ca33a86e7c5818b8df8897b995a","modified":1696131294109},{"_id":"public/images/12_1.jpg","hash":"6d8fa5e9416af4517b5d3b13410b30164ee4dfc1","modified":1696131294109},{"_id":"public/images/15_1.jpg","hash":"74a5deaa9da211e904953d7ed1ae3b90a3b60d16","modified":1696131294109},{"_id":"public/images/1_1.jpg","hash":"13218fc8811d226f5a02d55fa787833db0c8508f","modified":1696131294109},{"_id":"public/images/1_2.jpg","hash":"4a3f87de5d7eeda8f28678d6637e0a6d32ddae38","modified":1696131294109},{"_id":"public/images/1_3.jpg","hash":"197dc8960f42742441de15822c45aeb1eb00e2f3","modified":1696131294109},{"_id":"public/images/4_1.jpg","hash":"4a5c734eadcce35878c0925ffb6e48d99f92eb19","modified":1696131294109},{"_id":"public/images/4_2.jpg","hash":"70f74288b1c22c265a9ee8a677718ea9473a4e6f","modified":1696131294109},{"_id":"public/images/4_3.jpg","hash":"47198c6712a391a3210cba44580504f36b203e2b","modified":1696131294109},{"_id":"public/images/4_4.jpg","hash":"8e66437505eb82ef908dc37eb39a226af346429e","modified":1696131294109},{"_id":"public/images/5_1.jpg","hash":"ae6ae760e7004a81fde167d86e5c501d91e75ee2","modified":1696131294109},{"_id":"public/images/5_2.jpg","hash":"d2ddb5a456d9d6b74364ded5b27e41b23d62d47f","modified":1696131294109},{"_id":"public/images/5_3.jpg","hash":"ce2a9837e9ecfa86ad55f308cb5c7689d662cdcc","modified":1696131294109},{"_id":"public/images/5_4.jpg","hash":"802d7fd1d057c985bf80a2597cd2066de015ad0b","modified":1696131294109},{"_id":"public/images/5_6.jpg","hash":"9f1de4e064b04eb1968819245cd2d9598db43780","modified":1696131294109},{"_id":"public/images/5_7.jpg","hash":"1c750f9a8e531f84a1a73cf6e9bea8af12cff067","modified":1696131294109},{"_id":"public/images/6_1.jpg","hash":"c8d69ce82bb99ce5364e834bad449d907a6d3c1a","modified":1696131294109},{"_id":"public/images/6_2.jpg","hash":"b64ece41c5a5fe750ef7ba2c7045276178fa1c8b","modified":1696131294109},{"_id":"public/images/6_3.jpg","hash":"55f81540bfeb9f76a541efed34d9fe0af90aec41","modified":1696131294109},{"_id":"public/images/6_5.jpg","hash":"6b1511fab938a0dc909474914933e502ad22a27a","modified":1696131294109},{"_id":"public/images/6_6.jpg","hash":"4f65ec8246fa81f2a734fb9c9ede064b0e606f1c","modified":1696131294109},{"_id":"public/images/7_1.jpg","hash":"00a2e9c144febb2dd234b539febe016a80386da8","modified":1696131294109},{"_id":"public/images/iverson.jpg","hash":"2021f44d0263e3cc95d9560b646a80dee12e07c1","modified":1696131294109},{"_id":"public/images/cmake学习/1.jpg","hash":"c02a6d08106affb9def98cb17b971cb6d2f348f6","modified":1696131294109},{"_id":"public/images/动手深度学习/1.jpg","hash":"c54415c44f1a34de6ba19524db4ed333fcfa7bc6","modified":1696131294109},{"_id":"public/images/静态链接/1.jpg","hash":"71ce721de4fb919f70c9312253a06cf6f324587f","modified":1696131294109},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1696131294109},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1696131294109},{"_id":"public/images/5_5.jpg","hash":"2d1cd40900b2642ba5dd07b08168557714d7d311","modified":1696131294109},{"_id":"public/images/6_4.jpg","hash":"3b841570770cb1d7d5a5375e9eeed80ec2058a23","modified":1696131294109},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1696131294109},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1696131294109},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1696131294109},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1696131294109},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1696131294109},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1696131294109},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1696131294109},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1696131294109},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1696131294109},{"_id":"public/css/main.css","hash":"7655194206540f036c0f38d231562740c3c97b04","modified":1696131294109},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1696131294109},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1696131294109},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1696131294109},{"_id":"public/images/sea.jpg","hash":"260f342bf5a77615bb2329886ac7ed4836bac87d","modified":1696131294109}],"Category":[{"name":"数据库","_id":"cln6ws35d00045gi576jbbdc2"},{"name":"cmake","_id":"cln6ws365001h5gi5evly8fye"},{"name":"随笔","_id":"cln6ws36h001r5gi5a51yhi59"},{"name":"Linux","_id":"cln6ws36j00205gi5f9c315bg"}],"Data":[],"Page":[{"title":"about","date":"2023-05-28T01:03:50.000Z","type":"about","comments":0,"_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2023-05-27 21:03:50\ntype: \"about\"\ncomments: false\n---\n","updated":"2023-10-01T02:55:45.143Z","path":"about/index.html","layout":"page","_id":"cln6ws35400005gi51gw2657b","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"archives","date":"2023-05-28T01:43:41.000Z","type":"tags","comments":0,"_content":"","source":"archives/index.md","raw":"---\ntitle: archives\ndate: 2023-05-27 21:43:41\ntype: \"tags\"\ncomments: false\n---\n","updated":"2023-10-01T02:55:45.143Z","path":"archives/index.html","layout":"page","_id":"cln6ws35b00025gi5dojw51dk","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2023-05-28T01:03:31.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2023-05-27 21:03:31\ntype: \"categories\"\ncomments: false\n---\n","updated":"2023-10-01T02:55:45.147Z","path":"categories/index.html","layout":"page","_id":"cln6ws35f00065gi51ce9cbe8","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2023-05-28T01:03:37.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2023-05-27 21:03:37\ntype: \"tags\"\ncomments: false\n---\n","updated":"2023-10-01T02:55:45.147Z","path":"tags/index.html","layout":"page","_id":"cln6ws35g00085gi59ti55loa","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"1.启动选项","date":"2023-05-27T18:11:32.000Z","_content":"\n>在MySQL安装目录下的bin目录中的各种可执行文件，不论是服务器相关的程序（比如mysqld、mysqld_safe）还是客户端相关的程序（比如mysql、mysqladmin），在启动的时候基本都可以指定启动参数。这些启动参数可以放在命令行中指定，也可以把它们放在配置文件中指定。\n\n```\nmysqld --skip-networking 禁止客户端使用TCP/IP网络进行通信\nmysqld --default-storage-engine=MyISAM 指定服务端的存储引擎'\n```\n```\nmysql -h -u -p 客户端\n```\n\n### 配置文件\n>MySQL程序在启动时会寻找多个路径下的配置文件，这些路径有的是固定的，有的是可以在命令行指定的。根据操作系统的不同，配置文件的路径也有所不同。\n\n![本地图片](images/1_1.jpg)\n\n- %WINDIR%是机器上的Windows目录，通常是C:\\WINDOWS，可以使用echo %WINDIR%查看\n\n- BASEDIR指的是MySQL安装目录\n- 第四个路径指的是我们在启动程序时可以通过指定default-extra-file参数来额外配置文件路径\n```\nmysqld --defaults-extra-file=C:\\Users\\xiaohaizi\\my_extra_file.txt\n```\n\n![本地图片](images/1_2.jpg)\n\n- MYSQL_HOME是一个环境变量，该变量的值是我们自己设置的，我们想设置就设置，不想设置就不设置。该变量的值代表一个路径，我们可以在该路径下创建一个my.cnf配置文件，那么这个配置文件中只能放置关于启动服务器程序相关的选项（言外之意就是其他的配置文件既能存放服务器相关的选项也能存放客户端相关的选项，.mylogin.cnf除外，它只能存放客户端相关的一些选项）\n- defaults-extra-file的含义与Windows中的一样。\n**在mysqld_safe调用mysqld时，会把它处理不了的这个skip-networking选项交给mysqld处理。**\n\n### 配置文件的内容\n[server]\n(具体的启动选项...)\n\n[mysqld]\n(具体的启动选项...)\n\n[mysqld_safe]\n(具体的启动选项...)\n\n[client]\n(具体的启动选项...)\n\n[mysql]\n(具体的启动选项...)\n\n[mysqladmin]\n(具体的启动选项...)\n\n![本地图片](images/1_3.jpg)\n不同的启动命令读取配置文件的不同的组\n\n\n\n### 配置文件的优先级\n如果我们在多个配置文件中设置了相同的启动选项，那以最后一个配置文件中的为准\n\n### 同一个配置文件中多个组的优先级\n比如mysqld命令启动服务端程序，可以访问配置文件中的[mysqld]、[server]等，那么将以最后一个出现的组中的启动选项为准\n\n### default-file使用\n 如果我们不想让MySQL到默认的路径下搜索配置文件（就是上表中列出的那些），可以在命令行指定defaults-file选项，比如这样（以UNIX系统为例）：\n```\nmysqld --defaults-file=/tmp/myconfig.txt\n```\n**如果同一个启动选项既出现在配置文件中，又出现在命令行中，以命令行为准**\n\n\n\n\n","source":"_posts/1-启动选项.md","raw":"---\ntitle: 1.启动选项\ndate: 2023-05-27 14:11:32\ntags: [MySQL, MySQL是怎样运行的]\ncategories: 数据库\n---\n\n>在MySQL安装目录下的bin目录中的各种可执行文件，不论是服务器相关的程序（比如mysqld、mysqld_safe）还是客户端相关的程序（比如mysql、mysqladmin），在启动的时候基本都可以指定启动参数。这些启动参数可以放在命令行中指定，也可以把它们放在配置文件中指定。\n\n```\nmysqld --skip-networking 禁止客户端使用TCP/IP网络进行通信\nmysqld --default-storage-engine=MyISAM 指定服务端的存储引擎'\n```\n```\nmysql -h -u -p 客户端\n```\n\n### 配置文件\n>MySQL程序在启动时会寻找多个路径下的配置文件，这些路径有的是固定的，有的是可以在命令行指定的。根据操作系统的不同，配置文件的路径也有所不同。\n\n![本地图片](images/1_1.jpg)\n\n- %WINDIR%是机器上的Windows目录，通常是C:\\WINDOWS，可以使用echo %WINDIR%查看\n\n- BASEDIR指的是MySQL安装目录\n- 第四个路径指的是我们在启动程序时可以通过指定default-extra-file参数来额外配置文件路径\n```\nmysqld --defaults-extra-file=C:\\Users\\xiaohaizi\\my_extra_file.txt\n```\n\n![本地图片](images/1_2.jpg)\n\n- MYSQL_HOME是一个环境变量，该变量的值是我们自己设置的，我们想设置就设置，不想设置就不设置。该变量的值代表一个路径，我们可以在该路径下创建一个my.cnf配置文件，那么这个配置文件中只能放置关于启动服务器程序相关的选项（言外之意就是其他的配置文件既能存放服务器相关的选项也能存放客户端相关的选项，.mylogin.cnf除外，它只能存放客户端相关的一些选项）\n- defaults-extra-file的含义与Windows中的一样。\n**在mysqld_safe调用mysqld时，会把它处理不了的这个skip-networking选项交给mysqld处理。**\n\n### 配置文件的内容\n[server]\n(具体的启动选项...)\n\n[mysqld]\n(具体的启动选项...)\n\n[mysqld_safe]\n(具体的启动选项...)\n\n[client]\n(具体的启动选项...)\n\n[mysql]\n(具体的启动选项...)\n\n[mysqladmin]\n(具体的启动选项...)\n\n![本地图片](images/1_3.jpg)\n不同的启动命令读取配置文件的不同的组\n\n\n\n### 配置文件的优先级\n如果我们在多个配置文件中设置了相同的启动选项，那以最后一个配置文件中的为准\n\n### 同一个配置文件中多个组的优先级\n比如mysqld命令启动服务端程序，可以访问配置文件中的[mysqld]、[server]等，那么将以最后一个出现的组中的启动选项为准\n\n### default-file使用\n 如果我们不想让MySQL到默认的路径下搜索配置文件（就是上表中列出的那些），可以在命令行指定defaults-file选项，比如这样（以UNIX系统为例）：\n```\nmysqld --defaults-file=/tmp/myconfig.txt\n```\n**如果同一个启动选项既出现在配置文件中，又出现在命令行中，以命令行为准**\n\n\n\n\n","slug":"1-启动选项","published":1,"updated":"2023-10-01T02:55:45.143Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cln6ws35600015gi54uq65v06","content":"<blockquote>\n<p>在MySQL安装目录下的bin目录中的各种可执行文件，不论是服务器相关的程序（比如mysqld、mysqld_safe）还是客户端相关的程序（比如mysql、mysqladmin），在启动的时候基本都可以指定启动参数。这些启动参数可以放在命令行中指定，也可以把它们放在配置文件中指定。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqld --skip-networking 禁止客户端使用TCP/IP网络进行通信</span><br><span class=\"line\">mysqld --default-storage-engine=MyISAM 指定服务端的存储引擎&#x27;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -h -u -p 客户端</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><blockquote>\n<p>MySQL程序在启动时会寻找多个路径下的配置文件，这些路径有的是固定的，有的是可以在命令行指定的。根据操作系统的不同，配置文件的路径也有所不同。</p>\n</blockquote>\n<p><img src=\"/images/1_1.jpg\" alt=\"本地图片\"></p>\n<ul>\n<li><p>%WINDIR%是机器上的Windows目录，通常是C:\\WINDOWS，可以使用echo %WINDIR%查看</p>\n</li>\n<li><p>BASEDIR指的是MySQL安装目录</p>\n</li>\n<li><p>第四个路径指的是我们在启动程序时可以通过指定default-extra-file参数来额外配置文件路径</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqld --defaults-extra-file=C:\\Users\\xiaohaizi\\my_extra_file.txt</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><img src=\"/images/1_2.jpg\" alt=\"本地图片\"></p>\n<ul>\n<li>MYSQL_HOME是一个环境变量，该变量的值是我们自己设置的，我们想设置就设置，不想设置就不设置。该变量的值代表一个路径，我们可以在该路径下创建一个my.cnf配置文件，那么这个配置文件中只能放置关于启动服务器程序相关的选项（言外之意就是其他的配置文件既能存放服务器相关的选项也能存放客户端相关的选项，.mylogin.cnf除外，它只能存放客户端相关的一些选项）</li>\n<li>defaults-extra-file的含义与Windows中的一样。<br><strong>在mysqld_safe调用mysqld时，会把它处理不了的这个skip-networking选项交给mysqld处理。</strong></li>\n</ul>\n<h3 id=\"配置文件的内容\"><a href=\"#配置文件的内容\" class=\"headerlink\" title=\"配置文件的内容\"></a>配置文件的内容</h3><p>[server]<br>(具体的启动选项…)</p>\n<p>[mysqld]<br>(具体的启动选项…)</p>\n<p>[mysqld_safe]<br>(具体的启动选项…)</p>\n<p>[client]<br>(具体的启动选项…)</p>\n<p>[mysql]<br>(具体的启动选项…)</p>\n<p>[mysqladmin]<br>(具体的启动选项…)</p>\n<p><img src=\"/images/1_3.jpg\" alt=\"本地图片\"><br>不同的启动命令读取配置文件的不同的组</p>\n<h3 id=\"配置文件的优先级\"><a href=\"#配置文件的优先级\" class=\"headerlink\" title=\"配置文件的优先级\"></a>配置文件的优先级</h3><p>如果我们在多个配置文件中设置了相同的启动选项，那以最后一个配置文件中的为准</p>\n<h3 id=\"同一个配置文件中多个组的优先级\"><a href=\"#同一个配置文件中多个组的优先级\" class=\"headerlink\" title=\"同一个配置文件中多个组的优先级\"></a>同一个配置文件中多个组的优先级</h3><p>比如mysqld命令启动服务端程序，可以访问配置文件中的[mysqld]、[server]等，那么将以最后一个出现的组中的启动选项为准</p>\n<h3 id=\"default-file使用\"><a href=\"#default-file使用\" class=\"headerlink\" title=\"default-file使用\"></a>default-file使用</h3><p> 如果我们不想让MySQL到默认的路径下搜索配置文件（就是上表中列出的那些），可以在命令行指定defaults-file选项，比如这样（以UNIX系统为例）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqld --defaults-file=/tmp/myconfig.txt</span><br></pre></td></tr></table></figure>\n<p><strong>如果同一个启动选项既出现在配置文件中，又出现在命令行中，以命令行为准</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>在MySQL安装目录下的bin目录中的各种可执行文件，不论是服务器相关的程序（比如mysqld、mysqld_safe）还是客户端相关的程序（比如mysql、mysqladmin），在启动的时候基本都可以指定启动参数。这些启动参数可以放在命令行中指定，也可以把它们放在配置文件中指定。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqld --skip-networking 禁止客户端使用TCP/IP网络进行通信</span><br><span class=\"line\">mysqld --default-storage-engine=MyISAM 指定服务端的存储引擎&#x27;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -h -u -p 客户端</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><blockquote>\n<p>MySQL程序在启动时会寻找多个路径下的配置文件，这些路径有的是固定的，有的是可以在命令行指定的。根据操作系统的不同，配置文件的路径也有所不同。</p>\n</blockquote>\n<p><img src=\"/images/1_1.jpg\" alt=\"本地图片\"></p>\n<ul>\n<li><p>%WINDIR%是机器上的Windows目录，通常是C:\\WINDOWS，可以使用echo %WINDIR%查看</p>\n</li>\n<li><p>BASEDIR指的是MySQL安装目录</p>\n</li>\n<li><p>第四个路径指的是我们在启动程序时可以通过指定default-extra-file参数来额外配置文件路径</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqld --defaults-extra-file=C:\\Users\\xiaohaizi\\my_extra_file.txt</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><img src=\"/images/1_2.jpg\" alt=\"本地图片\"></p>\n<ul>\n<li>MYSQL_HOME是一个环境变量，该变量的值是我们自己设置的，我们想设置就设置，不想设置就不设置。该变量的值代表一个路径，我们可以在该路径下创建一个my.cnf配置文件，那么这个配置文件中只能放置关于启动服务器程序相关的选项（言外之意就是其他的配置文件既能存放服务器相关的选项也能存放客户端相关的选项，.mylogin.cnf除外，它只能存放客户端相关的一些选项）</li>\n<li>defaults-extra-file的含义与Windows中的一样。<br><strong>在mysqld_safe调用mysqld时，会把它处理不了的这个skip-networking选项交给mysqld处理。</strong></li>\n</ul>\n<h3 id=\"配置文件的内容\"><a href=\"#配置文件的内容\" class=\"headerlink\" title=\"配置文件的内容\"></a>配置文件的内容</h3><p>[server]<br>(具体的启动选项…)</p>\n<p>[mysqld]<br>(具体的启动选项…)</p>\n<p>[mysqld_safe]<br>(具体的启动选项…)</p>\n<p>[client]<br>(具体的启动选项…)</p>\n<p>[mysql]<br>(具体的启动选项…)</p>\n<p>[mysqladmin]<br>(具体的启动选项…)</p>\n<p><img src=\"/images/1_3.jpg\" alt=\"本地图片\"><br>不同的启动命令读取配置文件的不同的组</p>\n<h3 id=\"配置文件的优先级\"><a href=\"#配置文件的优先级\" class=\"headerlink\" title=\"配置文件的优先级\"></a>配置文件的优先级</h3><p>如果我们在多个配置文件中设置了相同的启动选项，那以最后一个配置文件中的为准</p>\n<h3 id=\"同一个配置文件中多个组的优先级\"><a href=\"#同一个配置文件中多个组的优先级\" class=\"headerlink\" title=\"同一个配置文件中多个组的优先级\"></a>同一个配置文件中多个组的优先级</h3><p>比如mysqld命令启动服务端程序，可以访问配置文件中的[mysqld]、[server]等，那么将以最后一个出现的组中的启动选项为准</p>\n<h3 id=\"default-file使用\"><a href=\"#default-file使用\" class=\"headerlink\" title=\"default-file使用\"></a>default-file使用</h3><p> 如果我们不想让MySQL到默认的路径下搜索配置文件（就是上表中列出的那些），可以在命令行指定defaults-file选项，比如这样（以UNIX系统为例）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqld --defaults-file=/tmp/myconfig.txt</span><br></pre></td></tr></table></figure>\n<p><strong>如果同一个启动选项既出现在配置文件中，又出现在命令行中，以命令行为准</strong></p>\n"},{"title":"10.InnoDB统计数据是如何收集的","date":"2023-05-27T18:20:43.000Z","_content":"\nInnoDB提供了两种存储统计数据的方式\n- 永久性的统计数据：\n这些数据存储在磁盘上，服务器重启之后这些统计数据还在\n- 非永久性的统计数据：\n这种数据存储在内存中，服务器重启之后，在某些适当的场景下才会重新收集这些统计数据\n> 系统变量innodb_status_persistent来控制到底采用哪种方式去存储统计数据。另外，InnoDB默认是以表为单位来收集和存储统计数据的，所以可以把某些表的统计数据存储在磁盘上，把另一些表的统计数据存储在内存中。可以在创建和修改表的时候通过指定STATS_PERSISTENT属性来指明该表的统计数据存储方式\n","source":"_posts/10-InnoDB统计数据是如何收集的.md","raw":"---\ntitle: 10.InnoDB统计数据是如何收集的\ndate: 2023-05-27 14:20:43\ntags: [MySQL,MySQL是怎样运行的]\ncategories: 数据库\n---\n\nInnoDB提供了两种存储统计数据的方式\n- 永久性的统计数据：\n这些数据存储在磁盘上，服务器重启之后这些统计数据还在\n- 非永久性的统计数据：\n这种数据存储在内存中，服务器重启之后，在某些适当的场景下才会重新收集这些统计数据\n> 系统变量innodb_status_persistent来控制到底采用哪种方式去存储统计数据。另外，InnoDB默认是以表为单位来收集和存储统计数据的，所以可以把某些表的统计数据存储在磁盘上，把另一些表的统计数据存储在内存中。可以在创建和修改表的时候通过指定STATS_PERSISTENT属性来指明该表的统计数据存储方式\n","slug":"10-InnoDB统计数据是如何收集的","published":1,"updated":"2023-10-01T02:55:45.143Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cln6ws35c00035gi58f3q21z8","content":"<p>InnoDB提供了两种存储统计数据的方式</p>\n<ul>\n<li>永久性的统计数据：<br>这些数据存储在磁盘上，服务器重启之后这些统计数据还在</li>\n<li>非永久性的统计数据：<br>这种数据存储在内存中，服务器重启之后，在某些适当的场景下才会重新收集这些统计数据<blockquote>\n<p>系统变量innodb_status_persistent来控制到底采用哪种方式去存储统计数据。另外，InnoDB默认是以表为单位来收集和存储统计数据的，所以可以把某些表的统计数据存储在磁盘上，把另一些表的统计数据存储在内存中。可以在创建和修改表的时候通过指定STATS_PERSISTENT属性来指明该表的统计数据存储方式</p>\n</blockquote>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>InnoDB提供了两种存储统计数据的方式</p>\n<ul>\n<li>永久性的统计数据：<br>这些数据存储在磁盘上，服务器重启之后这些统计数据还在</li>\n<li>非永久性的统计数据：<br>这种数据存储在内存中，服务器重启之后，在某些适当的场景下才会重新收集这些统计数据<blockquote>\n<p>系统变量innodb_status_persistent来控制到底采用哪种方式去存储统计数据。另外，InnoDB默认是以表为单位来收集和存储统计数据的，所以可以把某些表的统计数据存储在磁盘上，把另一些表的统计数据存储在内存中。可以在创建和修改表的时候通过指定STATS_PERSISTENT属性来指明该表的统计数据存储方式</p>\n</blockquote>\n</li>\n</ul>\n"},{"title":"11.MySQL基于规则的优化","date":"2023-05-27T18:21:17.000Z","_content":"\n## 条件简化\n1.移除不必要的括号\n2.常量传递\n3.等值传递\n4.表达式计算\n5.HAVING子句和WHERE子句的合并\n\n子查询的执行方式\n- 对于包含不相关的标量子查询或者行子查询的语句来说，MySQL会分别独立执行外层查询和子查询，就当作两个单表查询就行\n- 对于相关的标量子查询或者行子查询，它的执行方式如下：\n![QQ截图20230217111828.png](images/11_1.jpg)\n\n\nIN子查询优化\n\n如果子查询的结果集中的记录条数很少，那么把子查询和外层查询分别看成两个单独的单表查询效率还是很高的，但是子查询的结果集太多的话会导致一下问题\n- 结果集太多，内存无法存下\n- 对于外层查询来说，如果子查询的结果集太多，就意味着IN子句中的参数很多，会导致（1.无法有效的使用索引，只能对外层查询进行全表扫描 2.在对外层查询执行全表扫描时，由于IN子句中的参数太多，这会导致检测一条记录是否符合和IN子句中的参数匹配花费的时间太长）\n>解决办法：不直接将不相关子查询的结果集当作外层查询的参数，而是将该结果写入一个临时表（1.该临时表的列就是子查询结果集中的列 2.写入临时表的记录会被去重 3.一般情况下子查询结果不会大的离谱，所以会为集合中的数据建立基于内存的存储引擎的临时表，并为该表建立哈希索引，如果子查询结果很大，会转而使用基于磁盘的存储引擎来保存结果集中的记录，索引类型也对应转变为B+树索引）\n\n物化表转连接\n\n松散索引扫描\n\n如果IN子查询不满足转换为semi-join的条件，又不能转换为物化表或者转换为物化表的成本太大，那么它就会转换为EXISTS查询","source":"_posts/11-MySQL基于规则的优化.md","raw":"---\ntitle: 11.MySQL基于规则的优化\ndate: 2023-05-27 14:21:17\ntags: [MySQL,MySQL是怎样运行的]\ncategories: 数据库\n---\n\n## 条件简化\n1.移除不必要的括号\n2.常量传递\n3.等值传递\n4.表达式计算\n5.HAVING子句和WHERE子句的合并\n\n子查询的执行方式\n- 对于包含不相关的标量子查询或者行子查询的语句来说，MySQL会分别独立执行外层查询和子查询，就当作两个单表查询就行\n- 对于相关的标量子查询或者行子查询，它的执行方式如下：\n![QQ截图20230217111828.png](images/11_1.jpg)\n\n\nIN子查询优化\n\n如果子查询的结果集中的记录条数很少，那么把子查询和外层查询分别看成两个单独的单表查询效率还是很高的，但是子查询的结果集太多的话会导致一下问题\n- 结果集太多，内存无法存下\n- 对于外层查询来说，如果子查询的结果集太多，就意味着IN子句中的参数很多，会导致（1.无法有效的使用索引，只能对外层查询进行全表扫描 2.在对外层查询执行全表扫描时，由于IN子句中的参数太多，这会导致检测一条记录是否符合和IN子句中的参数匹配花费的时间太长）\n>解决办法：不直接将不相关子查询的结果集当作外层查询的参数，而是将该结果写入一个临时表（1.该临时表的列就是子查询结果集中的列 2.写入临时表的记录会被去重 3.一般情况下子查询结果不会大的离谱，所以会为集合中的数据建立基于内存的存储引擎的临时表，并为该表建立哈希索引，如果子查询结果很大，会转而使用基于磁盘的存储引擎来保存结果集中的记录，索引类型也对应转变为B+树索引）\n\n物化表转连接\n\n松散索引扫描\n\n如果IN子查询不满足转换为semi-join的条件，又不能转换为物化表或者转换为物化表的成本太大，那么它就会转换为EXISTS查询","slug":"11-MySQL基于规则的优化","published":1,"updated":"2023-10-01T02:55:45.143Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cln6ws35f00075gi531fkgxkr","content":"<h2 id=\"条件简化\"><a href=\"#条件简化\" class=\"headerlink\" title=\"条件简化\"></a>条件简化</h2><p>1.移除不必要的括号<br>2.常量传递<br>3.等值传递<br>4.表达式计算<br>5.HAVING子句和WHERE子句的合并</p>\n<p>子查询的执行方式</p>\n<ul>\n<li>对于包含不相关的标量子查询或者行子查询的语句来说，MySQL会分别独立执行外层查询和子查询，就当作两个单表查询就行</li>\n<li>对于相关的标量子查询或者行子查询，它的执行方式如下：<br><img src=\"/images/11_1.jpg\" alt=\"QQ截图20230217111828.png\"></li>\n</ul>\n<p>IN子查询优化</p>\n<p>如果子查询的结果集中的记录条数很少，那么把子查询和外层查询分别看成两个单独的单表查询效率还是很高的，但是子查询的结果集太多的话会导致一下问题</p>\n<ul>\n<li>结果集太多，内存无法存下</li>\n<li>对于外层查询来说，如果子查询的结果集太多，就意味着IN子句中的参数很多，会导致（1.无法有效的使用索引，只能对外层查询进行全表扫描 2.在对外层查询执行全表扫描时，由于IN子句中的参数太多，这会导致检测一条记录是否符合和IN子句中的参数匹配花费的时间太长）<blockquote>\n<p>解决办法：不直接将不相关子查询的结果集当作外层查询的参数，而是将该结果写入一个临时表（1.该临时表的列就是子查询结果集中的列 2.写入临时表的记录会被去重 3.一般情况下子查询结果不会大的离谱，所以会为集合中的数据建立基于内存的存储引擎的临时表，并为该表建立哈希索引，如果子查询结果很大，会转而使用基于磁盘的存储引擎来保存结果集中的记录，索引类型也对应转变为B+树索引）</p>\n</blockquote>\n</li>\n</ul>\n<p>物化表转连接</p>\n<p>松散索引扫描</p>\n<p>如果IN子查询不满足转换为semi-join的条件，又不能转换为物化表或者转换为物化表的成本太大，那么它就会转换为EXISTS查询</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"条件简化\"><a href=\"#条件简化\" class=\"headerlink\" title=\"条件简化\"></a>条件简化</h2><p>1.移除不必要的括号<br>2.常量传递<br>3.等值传递<br>4.表达式计算<br>5.HAVING子句和WHERE子句的合并</p>\n<p>子查询的执行方式</p>\n<ul>\n<li>对于包含不相关的标量子查询或者行子查询的语句来说，MySQL会分别独立执行外层查询和子查询，就当作两个单表查询就行</li>\n<li>对于相关的标量子查询或者行子查询，它的执行方式如下：<br><img src=\"/images/11_1.jpg\" alt=\"QQ截图20230217111828.png\"></li>\n</ul>\n<p>IN子查询优化</p>\n<p>如果子查询的结果集中的记录条数很少，那么把子查询和外层查询分别看成两个单独的单表查询效率还是很高的，但是子查询的结果集太多的话会导致一下问题</p>\n<ul>\n<li>结果集太多，内存无法存下</li>\n<li>对于外层查询来说，如果子查询的结果集太多，就意味着IN子句中的参数很多，会导致（1.无法有效的使用索引，只能对外层查询进行全表扫描 2.在对外层查询执行全表扫描时，由于IN子句中的参数太多，这会导致检测一条记录是否符合和IN子句中的参数匹配花费的时间太长）<blockquote>\n<p>解决办法：不直接将不相关子查询的结果集当作外层查询的参数，而是将该结果写入一个临时表（1.该临时表的列就是子查询结果集中的列 2.写入临时表的记录会被去重 3.一般情况下子查询结果不会大的离谱，所以会为集合中的数据建立基于内存的存储引擎的临时表，并为该表建立哈希索引，如果子查询结果很大，会转而使用基于磁盘的存储引擎来保存结果集中的记录，索引类型也对应转变为B+树索引）</p>\n</blockquote>\n</li>\n</ul>\n<p>物化表转连接</p>\n<p>松散索引扫描</p>\n<p>如果IN子查询不满足转换为semi-join的条件，又不能转换为物化表或者转换为物化表的成本太大，那么它就会转换为EXISTS查询</p>\n"},{"title":"12.事务","date":"2023-05-27T18:21:58.000Z","_content":"\n1.原子性：要么全做，要么全不做\n2.隔离性：保证其它的状态转换不会影响到本次的状态转换\n3.一致性（符合所有现实世界的约束）：\n>- 数据库本身能为我们保证一部分一致性需求,比如MySQL数据库可以为表建立主键、唯一索引、外键、声明某个列为NOT NULL来拒绝NULL值的插入。又比如对某个列建立了唯一索引时，如果插入某条记录时该列的值重复了，那么MySQL就会报错并且拒绝插入，MySQL还支持CHECK语法来自定义约束,但是实际上MySQL并不会去检查CHECK子句中的约束是否成立，但是我们还是可以通过定义触发器的方式来自定义一些约束条件以保证数据库中的一致性\n> - 更多的一致性需求需要靠写业务代码的程序员自己保证，现实生活中复杂的一致性需求比比皆是，而由于性能问题把一致性需求交给数据库去解决这是不现实的，所以就把锅甩给了业务端程序员\n\n原子性和隔离性都会对一致性产生影响，数据库某些操作的原子性和隔离性都是保证一致性的一种手段，在操作执行完成后保证符合所有既定的约束则是一种结果\n\n4.持久性：状态转换后，这个转换的结果是永久保留的\n\n事务的定义：把需要保证原子性、隔离性、一致性、持久性的一个或多个数据库操作称之为一个事务\n\n事务的状态转换图如下\n![微信截图_20230218105257.png](images/12_1.jpg)\n\n### 隐式提交\n当我们适用START TRANSACTION 或者BEGIN 语句开启了一个事务，或者把系统标量auto commit为OFF时，事务就不会进行自动提交，但是如果我们输入了某些语句之后就会悄悄的提交掉\n1.定义或修改数据库对象的数据定义语言：所谓的数据库对象，指的就是数据库、表、视图、存储过程等，当我们使用CREATE、ALTER、DROP等语句去修改这些所谓的数据库对象时，就会隐式的提交前面语句所属的事务\n2.隐式使用或修改数据库中的表：当我们使用ALTER USER、CREATE USER、DROP USER、GRANT、RENAME USER、REVOKE、SET PASSWORD等语句时也会隐式的提交前面语句所属于的事务\n3.事务控制或关于锁定的语句：当我们在一个事务还没有提交或者回滚时就又使用START TRANSACTION 或者BEGIN语句开启了另一个事务，会隐式提交上一个事务\n4.加载数据的语句：使用LOAD DATA等\n5.关于MySQL复制的一些语句：使用START SLAVE、STOP SLAVE、RESET SLAVE、CHANGE MASTER TO等语句时也会隐式的提交前面语句所属的事务\n6.其它的一些语句：使用ANALYZE TABLE、CACHE INDEX、CHECK TABLE、FLUSH、LOAD INDEX INTO CACHE、OPTIMIZE TABLE、REPAIR TABLE、RESET等语句\n\n### 保存点\n定义保存点的语法如下：\n```\nSAVEPOINT 保存点的名称\n```\n```\nROLLBACK [WORK] TO [SAVEPOINT] 保存点名称\n```\n\n","source":"_posts/12-事务.md","raw":"---\ntitle: 12.事务\ndate: 2023-05-27 14:21:58\ntags: [MySQL,MySQL是怎样运行的]\ncategories: 数据库\n---\n\n1.原子性：要么全做，要么全不做\n2.隔离性：保证其它的状态转换不会影响到本次的状态转换\n3.一致性（符合所有现实世界的约束）：\n>- 数据库本身能为我们保证一部分一致性需求,比如MySQL数据库可以为表建立主键、唯一索引、外键、声明某个列为NOT NULL来拒绝NULL值的插入。又比如对某个列建立了唯一索引时，如果插入某条记录时该列的值重复了，那么MySQL就会报错并且拒绝插入，MySQL还支持CHECK语法来自定义约束,但是实际上MySQL并不会去检查CHECK子句中的约束是否成立，但是我们还是可以通过定义触发器的方式来自定义一些约束条件以保证数据库中的一致性\n> - 更多的一致性需求需要靠写业务代码的程序员自己保证，现实生活中复杂的一致性需求比比皆是，而由于性能问题把一致性需求交给数据库去解决这是不现实的，所以就把锅甩给了业务端程序员\n\n原子性和隔离性都会对一致性产生影响，数据库某些操作的原子性和隔离性都是保证一致性的一种手段，在操作执行完成后保证符合所有既定的约束则是一种结果\n\n4.持久性：状态转换后，这个转换的结果是永久保留的\n\n事务的定义：把需要保证原子性、隔离性、一致性、持久性的一个或多个数据库操作称之为一个事务\n\n事务的状态转换图如下\n![微信截图_20230218105257.png](images/12_1.jpg)\n\n### 隐式提交\n当我们适用START TRANSACTION 或者BEGIN 语句开启了一个事务，或者把系统标量auto commit为OFF时，事务就不会进行自动提交，但是如果我们输入了某些语句之后就会悄悄的提交掉\n1.定义或修改数据库对象的数据定义语言：所谓的数据库对象，指的就是数据库、表、视图、存储过程等，当我们使用CREATE、ALTER、DROP等语句去修改这些所谓的数据库对象时，就会隐式的提交前面语句所属的事务\n2.隐式使用或修改数据库中的表：当我们使用ALTER USER、CREATE USER、DROP USER、GRANT、RENAME USER、REVOKE、SET PASSWORD等语句时也会隐式的提交前面语句所属于的事务\n3.事务控制或关于锁定的语句：当我们在一个事务还没有提交或者回滚时就又使用START TRANSACTION 或者BEGIN语句开启了另一个事务，会隐式提交上一个事务\n4.加载数据的语句：使用LOAD DATA等\n5.关于MySQL复制的一些语句：使用START SLAVE、STOP SLAVE、RESET SLAVE、CHANGE MASTER TO等语句时也会隐式的提交前面语句所属的事务\n6.其它的一些语句：使用ANALYZE TABLE、CACHE INDEX、CHECK TABLE、FLUSH、LOAD INDEX INTO CACHE、OPTIMIZE TABLE、REPAIR TABLE、RESET等语句\n\n### 保存点\n定义保存点的语法如下：\n```\nSAVEPOINT 保存点的名称\n```\n```\nROLLBACK [WORK] TO [SAVEPOINT] 保存点名称\n```\n\n","slug":"12-事务","published":1,"updated":"2023-10-01T02:55:45.143Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cln6ws35h00095gi5gz5xahk3","content":"<p>1.原子性：要么全做，要么全不做<br>2.隔离性：保证其它的状态转换不会影响到本次的状态转换<br>3.一致性（符合所有现实世界的约束）：</p>\n<blockquote>\n<ul>\n<li>数据库本身能为我们保证一部分一致性需求,比如MySQL数据库可以为表建立主键、唯一索引、外键、声明某个列为NOT NULL来拒绝NULL值的插入。又比如对某个列建立了唯一索引时，如果插入某条记录时该列的值重复了，那么MySQL就会报错并且拒绝插入，MySQL还支持CHECK语法来自定义约束,但是实际上MySQL并不会去检查CHECK子句中的约束是否成立，但是我们还是可以通过定义触发器的方式来自定义一些约束条件以保证数据库中的一致性</li>\n<li>更多的一致性需求需要靠写业务代码的程序员自己保证，现实生活中复杂的一致性需求比比皆是，而由于性能问题把一致性需求交给数据库去解决这是不现实的，所以就把锅甩给了业务端程序员</li>\n</ul>\n</blockquote>\n<p>原子性和隔离性都会对一致性产生影响，数据库某些操作的原子性和隔离性都是保证一致性的一种手段，在操作执行完成后保证符合所有既定的约束则是一种结果</p>\n<p>4.持久性：状态转换后，这个转换的结果是永久保留的</p>\n<p>事务的定义：把需要保证原子性、隔离性、一致性、持久性的一个或多个数据库操作称之为一个事务</p>\n<p>事务的状态转换图如下<br><img src=\"/images/12_1.jpg\" alt=\"微信截图_20230218105257.png\"></p>\n<h3 id=\"隐式提交\"><a href=\"#隐式提交\" class=\"headerlink\" title=\"隐式提交\"></a>隐式提交</h3><p>当我们适用START TRANSACTION 或者BEGIN 语句开启了一个事务，或者把系统标量auto commit为OFF时，事务就不会进行自动提交，但是如果我们输入了某些语句之后就会悄悄的提交掉<br>1.定义或修改数据库对象的数据定义语言：所谓的数据库对象，指的就是数据库、表、视图、存储过程等，当我们使用CREATE、ALTER、DROP等语句去修改这些所谓的数据库对象时，就会隐式的提交前面语句所属的事务<br>2.隐式使用或修改数据库中的表：当我们使用ALTER USER、CREATE USER、DROP USER、GRANT、RENAME USER、REVOKE、SET PASSWORD等语句时也会隐式的提交前面语句所属于的事务<br>3.事务控制或关于锁定的语句：当我们在一个事务还没有提交或者回滚时就又使用START TRANSACTION 或者BEGIN语句开启了另一个事务，会隐式提交上一个事务<br>4.加载数据的语句：使用LOAD DATA等<br>5.关于MySQL复制的一些语句：使用START SLAVE、STOP SLAVE、RESET SLAVE、CHANGE MASTER TO等语句时也会隐式的提交前面语句所属的事务<br>6.其它的一些语句：使用ANALYZE TABLE、CACHE INDEX、CHECK TABLE、FLUSH、LOAD INDEX INTO CACHE、OPTIMIZE TABLE、REPAIR TABLE、RESET等语句</p>\n<h3 id=\"保存点\"><a href=\"#保存点\" class=\"headerlink\" title=\"保存点\"></a>保存点</h3><p>定义保存点的语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SAVEPOINT 保存点的名称</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ROLLBACK [WORK] TO [SAVEPOINT] 保存点名称</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>1.原子性：要么全做，要么全不做<br>2.隔离性：保证其它的状态转换不会影响到本次的状态转换<br>3.一致性（符合所有现实世界的约束）：</p>\n<blockquote>\n<ul>\n<li>数据库本身能为我们保证一部分一致性需求,比如MySQL数据库可以为表建立主键、唯一索引、外键、声明某个列为NOT NULL来拒绝NULL值的插入。又比如对某个列建立了唯一索引时，如果插入某条记录时该列的值重复了，那么MySQL就会报错并且拒绝插入，MySQL还支持CHECK语法来自定义约束,但是实际上MySQL并不会去检查CHECK子句中的约束是否成立，但是我们还是可以通过定义触发器的方式来自定义一些约束条件以保证数据库中的一致性</li>\n<li>更多的一致性需求需要靠写业务代码的程序员自己保证，现实生活中复杂的一致性需求比比皆是，而由于性能问题把一致性需求交给数据库去解决这是不现实的，所以就把锅甩给了业务端程序员</li>\n</ul>\n</blockquote>\n<p>原子性和隔离性都会对一致性产生影响，数据库某些操作的原子性和隔离性都是保证一致性的一种手段，在操作执行完成后保证符合所有既定的约束则是一种结果</p>\n<p>4.持久性：状态转换后，这个转换的结果是永久保留的</p>\n<p>事务的定义：把需要保证原子性、隔离性、一致性、持久性的一个或多个数据库操作称之为一个事务</p>\n<p>事务的状态转换图如下<br><img src=\"/images/12_1.jpg\" alt=\"微信截图_20230218105257.png\"></p>\n<h3 id=\"隐式提交\"><a href=\"#隐式提交\" class=\"headerlink\" title=\"隐式提交\"></a>隐式提交</h3><p>当我们适用START TRANSACTION 或者BEGIN 语句开启了一个事务，或者把系统标量auto commit为OFF时，事务就不会进行自动提交，但是如果我们输入了某些语句之后就会悄悄的提交掉<br>1.定义或修改数据库对象的数据定义语言：所谓的数据库对象，指的就是数据库、表、视图、存储过程等，当我们使用CREATE、ALTER、DROP等语句去修改这些所谓的数据库对象时，就会隐式的提交前面语句所属的事务<br>2.隐式使用或修改数据库中的表：当我们使用ALTER USER、CREATE USER、DROP USER、GRANT、RENAME USER、REVOKE、SET PASSWORD等语句时也会隐式的提交前面语句所属于的事务<br>3.事务控制或关于锁定的语句：当我们在一个事务还没有提交或者回滚时就又使用START TRANSACTION 或者BEGIN语句开启了另一个事务，会隐式提交上一个事务<br>4.加载数据的语句：使用LOAD DATA等<br>5.关于MySQL复制的一些语句：使用START SLAVE、STOP SLAVE、RESET SLAVE、CHANGE MASTER TO等语句时也会隐式的提交前面语句所属的事务<br>6.其它的一些语句：使用ANALYZE TABLE、CACHE INDEX、CHECK TABLE、FLUSH、LOAD INDEX INTO CACHE、OPTIMIZE TABLE、REPAIR TABLE、RESET等语句</p>\n<h3 id=\"保存点\"><a href=\"#保存点\" class=\"headerlink\" title=\"保存点\"></a>保存点</h3><p>定义保存点的语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SAVEPOINT 保存点的名称</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ROLLBACK [WORK] TO [SAVEPOINT] 保存点名称</span><br></pre></td></tr></table></figure>\n\n"},{"title":"13.redo日志","date":"2023-05-27T18:22:32.000Z","_content":"\n与在事务提交时将所有修改过的内存中的页面刷新到磁盘中相比，只将该事务执行过程中产生的redo日志刷新到磁盘的好处如下\n1.redo日志占用的空间非常小\n2.redo日志是顺序写入磁盘的\n\n每条语句包含多个mtr，每个mtr包含一组redo log\n一个mtr运行结束后，会将产生的一组redolog复制到log buffer中，在一些情况下它们会被刷新到磁盘里\n1.log buffer空间不足时\n2.事务提交时\n3.后台线程不停地刷\n4.正常关闭服务器\n5.做checkpoint 时\n6.其它情况\n\nredo日志文件前4个block\n- log file header：描述该日志文件地一些整体属性\n- checkpoint1\n- 无用\n- checkpoint2\n\nLog Sequence Number（日志序列号）lsn\n每一组由mtr生成地redo日志都有一个唯一的lsn值与其对应，lsn值越小，说明redo日志产生的越早\n\n\n在mtr结束时，还会将执行过程中可能修改过的页面加入到buffer pool 的flush链表\n\ncheckpoint：\nredo日志只是为了系统崩溃后恢复脏页用的，如果对应的脏页已经刷新到磁盘，就不需要对应的redo日志了，所以判断某些redo日志占用的磁盘空间是否可以覆盖的依据就是它对应的脏页是否已经刷新到磁盘里。\n\n做一次checkpoint其实可以分为两个步骤\n1.计算一下当前系统中可以被覆盖的redo日志对应的lsn值最大是多少（有必要的话更新checkpoint_lsn）\n2.将checkpoint_lsn和对应的redo日志文件组偏移量以及此次checkpoint的编号写到日志文件的管理信息（目前系统做了多少次checkpoint的变量checkpoint_no，每做一次checkpoint，该变量就加1）","source":"_posts/13-redo日志.md","raw":"---\ntitle: 13.redo日志\ndate: 2023-05-27 14:22:32\ntags: [MySQL,MySQL是怎样运行的]\ncategories: 数据库\n---\n\n与在事务提交时将所有修改过的内存中的页面刷新到磁盘中相比，只将该事务执行过程中产生的redo日志刷新到磁盘的好处如下\n1.redo日志占用的空间非常小\n2.redo日志是顺序写入磁盘的\n\n每条语句包含多个mtr，每个mtr包含一组redo log\n一个mtr运行结束后，会将产生的一组redolog复制到log buffer中，在一些情况下它们会被刷新到磁盘里\n1.log buffer空间不足时\n2.事务提交时\n3.后台线程不停地刷\n4.正常关闭服务器\n5.做checkpoint 时\n6.其它情况\n\nredo日志文件前4个block\n- log file header：描述该日志文件地一些整体属性\n- checkpoint1\n- 无用\n- checkpoint2\n\nLog Sequence Number（日志序列号）lsn\n每一组由mtr生成地redo日志都有一个唯一的lsn值与其对应，lsn值越小，说明redo日志产生的越早\n\n\n在mtr结束时，还会将执行过程中可能修改过的页面加入到buffer pool 的flush链表\n\ncheckpoint：\nredo日志只是为了系统崩溃后恢复脏页用的，如果对应的脏页已经刷新到磁盘，就不需要对应的redo日志了，所以判断某些redo日志占用的磁盘空间是否可以覆盖的依据就是它对应的脏页是否已经刷新到磁盘里。\n\n做一次checkpoint其实可以分为两个步骤\n1.计算一下当前系统中可以被覆盖的redo日志对应的lsn值最大是多少（有必要的话更新checkpoint_lsn）\n2.将checkpoint_lsn和对应的redo日志文件组偏移量以及此次checkpoint的编号写到日志文件的管理信息（目前系统做了多少次checkpoint的变量checkpoint_no，每做一次checkpoint，该变量就加1）","slug":"13-redo日志","published":1,"updated":"2023-10-01T02:55:45.143Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cln6ws35i000a5gi567zcdubj","content":"<p>与在事务提交时将所有修改过的内存中的页面刷新到磁盘中相比，只将该事务执行过程中产生的redo日志刷新到磁盘的好处如下<br>1.redo日志占用的空间非常小<br>2.redo日志是顺序写入磁盘的</p>\n<p>每条语句包含多个mtr，每个mtr包含一组redo log<br>一个mtr运行结束后，会将产生的一组redolog复制到log buffer中，在一些情况下它们会被刷新到磁盘里<br>1.log buffer空间不足时<br>2.事务提交时<br>3.后台线程不停地刷<br>4.正常关闭服务器<br>5.做checkpoint 时<br>6.其它情况</p>\n<p>redo日志文件前4个block</p>\n<ul>\n<li>log file header：描述该日志文件地一些整体属性</li>\n<li>checkpoint1</li>\n<li>无用</li>\n<li>checkpoint2</li>\n</ul>\n<p>Log Sequence Number（日志序列号）lsn<br>每一组由mtr生成地redo日志都有一个唯一的lsn值与其对应，lsn值越小，说明redo日志产生的越早</p>\n<p>在mtr结束时，还会将执行过程中可能修改过的页面加入到buffer pool 的flush链表</p>\n<p>checkpoint：<br>redo日志只是为了系统崩溃后恢复脏页用的，如果对应的脏页已经刷新到磁盘，就不需要对应的redo日志了，所以判断某些redo日志占用的磁盘空间是否可以覆盖的依据就是它对应的脏页是否已经刷新到磁盘里。</p>\n<p>做一次checkpoint其实可以分为两个步骤<br>1.计算一下当前系统中可以被覆盖的redo日志对应的lsn值最大是多少（有必要的话更新checkpoint_lsn）<br>2.将checkpoint_lsn和对应的redo日志文件组偏移量以及此次checkpoint的编号写到日志文件的管理信息（目前系统做了多少次checkpoint的变量checkpoint_no，每做一次checkpoint，该变量就加1）</p>\n","site":{"data":{}},"excerpt":"","more":"<p>与在事务提交时将所有修改过的内存中的页面刷新到磁盘中相比，只将该事务执行过程中产生的redo日志刷新到磁盘的好处如下<br>1.redo日志占用的空间非常小<br>2.redo日志是顺序写入磁盘的</p>\n<p>每条语句包含多个mtr，每个mtr包含一组redo log<br>一个mtr运行结束后，会将产生的一组redolog复制到log buffer中，在一些情况下它们会被刷新到磁盘里<br>1.log buffer空间不足时<br>2.事务提交时<br>3.后台线程不停地刷<br>4.正常关闭服务器<br>5.做checkpoint 时<br>6.其它情况</p>\n<p>redo日志文件前4个block</p>\n<ul>\n<li>log file header：描述该日志文件地一些整体属性</li>\n<li>checkpoint1</li>\n<li>无用</li>\n<li>checkpoint2</li>\n</ul>\n<p>Log Sequence Number（日志序列号）lsn<br>每一组由mtr生成地redo日志都有一个唯一的lsn值与其对应，lsn值越小，说明redo日志产生的越早</p>\n<p>在mtr结束时，还会将执行过程中可能修改过的页面加入到buffer pool 的flush链表</p>\n<p>checkpoint：<br>redo日志只是为了系统崩溃后恢复脏页用的，如果对应的脏页已经刷新到磁盘，就不需要对应的redo日志了，所以判断某些redo日志占用的磁盘空间是否可以覆盖的依据就是它对应的脏页是否已经刷新到磁盘里。</p>\n<p>做一次checkpoint其实可以分为两个步骤<br>1.计算一下当前系统中可以被覆盖的redo日志对应的lsn值最大是多少（有必要的话更新checkpoint_lsn）<br>2.将checkpoint_lsn和对应的redo日志文件组偏移量以及此次checkpoint的编号写到日志文件的管理信息（目前系统做了多少次checkpoint的变量checkpoint_no，每做一次checkpoint，该变量就加1）</p>\n"},{"title":"14.undo日志","date":"2023-05-27T18:23:03.000Z","_content":"\n## 事务id\n- 对于只读事务来说，只有在它第一次对某个用户创建的临时表执行增、删、改操作时才会为这个事务分配一个事务id\n- 对于读写事务来说，只有在它第一次对某个表（包括用户创建的临时表）执行增、删、改操作时才会为这个事务分配一个事务id\n\n聚簇索引的记录还会自动添加名为trx_id、roll_pointer的隐藏列\n其中trx_id就是对这个聚簇索引记录做改动的语句所在的事务对应的事务id\nroll_pointer就是一个指向记录对应的undo日志的一个指针","source":"_posts/14-undo日志.md","raw":"---\ntitle: 14.undo日志\ndate: 2023-05-27 14:23:03\ntags: [MySQL,MySQL是怎样运行的]\ncategories: 数据库\n---\n\n## 事务id\n- 对于只读事务来说，只有在它第一次对某个用户创建的临时表执行增、删、改操作时才会为这个事务分配一个事务id\n- 对于读写事务来说，只有在它第一次对某个表（包括用户创建的临时表）执行增、删、改操作时才会为这个事务分配一个事务id\n\n聚簇索引的记录还会自动添加名为trx_id、roll_pointer的隐藏列\n其中trx_id就是对这个聚簇索引记录做改动的语句所在的事务对应的事务id\nroll_pointer就是一个指向记录对应的undo日志的一个指针","slug":"14-undo日志","published":1,"updated":"2023-10-01T02:55:45.143Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cln6ws35k000d5gi5gdfwfg8c","content":"<h2 id=\"事务id\"><a href=\"#事务id\" class=\"headerlink\" title=\"事务id\"></a>事务id</h2><ul>\n<li>对于只读事务来说，只有在它第一次对某个用户创建的临时表执行增、删、改操作时才会为这个事务分配一个事务id</li>\n<li>对于读写事务来说，只有在它第一次对某个表（包括用户创建的临时表）执行增、删、改操作时才会为这个事务分配一个事务id</li>\n</ul>\n<p>聚簇索引的记录还会自动添加名为trx_id、roll_pointer的隐藏列<br>其中trx_id就是对这个聚簇索引记录做改动的语句所在的事务对应的事务id<br>roll_pointer就是一个指向记录对应的undo日志的一个指针</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"事务id\"><a href=\"#事务id\" class=\"headerlink\" title=\"事务id\"></a>事务id</h2><ul>\n<li>对于只读事务来说，只有在它第一次对某个用户创建的临时表执行增、删、改操作时才会为这个事务分配一个事务id</li>\n<li>对于读写事务来说，只有在它第一次对某个表（包括用户创建的临时表）执行增、删、改操作时才会为这个事务分配一个事务id</li>\n</ul>\n<p>聚簇索引的记录还会自动添加名为trx_id、roll_pointer的隐藏列<br>其中trx_id就是对这个聚簇索引记录做改动的语句所在的事务对应的事务id<br>roll_pointer就是一个指向记录对应的undo日志的一个指针</p>\n"},{"title":"15.事务的隔离级别","date":"2023-05-27T18:23:33.000Z","_content":"\n事务并发执行遇到的问题\n1.脏写：\n一个事务修改了另一个未提交事务修改过的数据\n2.脏读\n一个事务读到了另一个未提交事务修改过的数据\n3.不可重复读\n一个事务只能读到另一个已经提交的事务修改过的数据，并且其它事务每对该数据进行一次修改，并提交后都能查询得到最新值\n4.幻读\n一个事务先根据某些条件查询出一些记录，之后另一个事务又向表中插入了符合这些条件的记录，原先的事务再次按照该条件查询时，能把另一个事务插入的记录也读出来\n\nMySQL四种隔离级别\n![微信截图_20230219113504.png](images/15_1.jpg)\n\nMVCC原理（多版本并发控制）\n版本链\nREAD COMMITTED和REPEATABLE READ生成ReadView的时机不同","source":"_posts/15-事务的隔离级别.md","raw":"---\ntitle: 15.事务的隔离级别\ndate: 2023-05-27 14:23:33\ntags: [MySQL,MySQL是怎样运行的]\ncategories: 数据库\n---\n\n事务并发执行遇到的问题\n1.脏写：\n一个事务修改了另一个未提交事务修改过的数据\n2.脏读\n一个事务读到了另一个未提交事务修改过的数据\n3.不可重复读\n一个事务只能读到另一个已经提交的事务修改过的数据，并且其它事务每对该数据进行一次修改，并提交后都能查询得到最新值\n4.幻读\n一个事务先根据某些条件查询出一些记录，之后另一个事务又向表中插入了符合这些条件的记录，原先的事务再次按照该条件查询时，能把另一个事务插入的记录也读出来\n\nMySQL四种隔离级别\n![微信截图_20230219113504.png](images/15_1.jpg)\n\nMVCC原理（多版本并发控制）\n版本链\nREAD COMMITTED和REPEATABLE READ生成ReadView的时机不同","slug":"15-事务的隔离级别","published":1,"updated":"2023-10-01T02:55:45.143Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cln6ws35l000e5gi54ihy0jl0","content":"<p>事务并发执行遇到的问题<br>1.脏写：<br>一个事务修改了另一个未提交事务修改过的数据<br>2.脏读<br>一个事务读到了另一个未提交事务修改过的数据<br>3.不可重复读<br>一个事务只能读到另一个已经提交的事务修改过的数据，并且其它事务每对该数据进行一次修改，并提交后都能查询得到最新值<br>4.幻读<br>一个事务先根据某些条件查询出一些记录，之后另一个事务又向表中插入了符合这些条件的记录，原先的事务再次按照该条件查询时，能把另一个事务插入的记录也读出来</p>\n<p>MySQL四种隔离级别<br><img src=\"/images/15_1.jpg\" alt=\"微信截图_20230219113504.png\"></p>\n<p>MVCC原理（多版本并发控制）<br>版本链<br>READ COMMITTED和REPEATABLE READ生成ReadView的时机不同</p>\n","site":{"data":{}},"excerpt":"","more":"<p>事务并发执行遇到的问题<br>1.脏写：<br>一个事务修改了另一个未提交事务修改过的数据<br>2.脏读<br>一个事务读到了另一个未提交事务修改过的数据<br>3.不可重复读<br>一个事务只能读到另一个已经提交的事务修改过的数据，并且其它事务每对该数据进行一次修改，并提交后都能查询得到最新值<br>4.幻读<br>一个事务先根据某些条件查询出一些记录，之后另一个事务又向表中插入了符合这些条件的记录，原先的事务再次按照该条件查询时，能把另一个事务插入的记录也读出来</p>\n<p>MySQL四种隔离级别<br><img src=\"/images/15_1.jpg\" alt=\"微信截图_20230219113504.png\"></p>\n<p>MVCC原理（多版本并发控制）<br>版本链<br>READ COMMITTED和REPEATABLE READ生成ReadView的时机不同</p>\n"},{"title":"2.系统变量","date":"2023-05-27T18:15:34.000Z","_content":"### 系统变量简介\n>MySQL服务器程序运行过程中会用到许多影响程序行为的变量，它们被称为MySQL系统变量，比如允许同时连入的客户端数量用系统变量max_connections表示，表的默认存储引擎用系统变量default_storage_engine表示，查询缓存的大小用系统变量query_cache_size表示，MySQL服务器程序的系统变量有好几百条，我们就不一一列举了。\n\n我们可以使用下列命令查看MySQL服务器程序支持的系统变量以及它们的当前值：\n```\nSHOW VARIABLES [LIKE 匹配的模式];\n```\n### 设置系统变量\n#### 通过启动选项设置\n1.通过命令行添加启动选项。\n2.通过配置文件添加启动选项\n\n#### 服务器程序运行过程中设置\n##### 设置不同作用范围的系统变量\n>我们前面说过，多个客户端程序可以同时连接到一个服务器程序。对于同一个系统变量，我们有时想让不同的客户端有不同的值。比方说狗哥使用客户端A，他想让当前客户端对应的默认存储引擎为InnoDB，所以他可以把系统变量default_storage_engine的值设置为InnoDB；猫爷使用客户端B，他想让当前客户端对应的默认存储引擎为MyISAM，所以他可以把系统变量default_storage_engine的值设置为MyISAM。这样可以使狗哥和猫爷的的客户端拥有不同的默认存储引擎，使用时互不影响，十分方便。但是这样各个客户端都私有一份系统变量会产生这么两个问题：\n\n- 有一些系统变量并不是针对单个客户端的，比如允许同时连接到服务器的客户端数量max_connections，查询缓存的大小query_cache_size，这些公有的系统变量让某个客户端私有显然不合适。\n- 一个新连接到服务器的客户端对应的系统变量的值该怎么设置？\n>为了解决这两个问题，设计MySQL的大佬提出了系统变量的作用范围的概念，具体来说作用范围分为这两种,GLOBAL（全局变量，影响服务器整体操作）和SESSION（会话变量，影响某个客户端连接的操作，别名LOCAL）通过启动选项设置的系统变量的作用范围都是GLOBAL的，也就是对所有客户端都有效的\n\n在服务器程序运行期间通过客户端程序设置系统变量的语法：\n```\nSET [GLOBAL|SESSION] 系统变量名 = 值;\n```\n##### 查看不同作用范围的系统变量\n```\nSHOW [GLOBAL|SESSION] VARIABLES [LIKE 匹配的模式];\n```\n小贴士：如果某个客户端改变了某个系统变量在`GLOBAL`作用范围的值，并不会影响该系统变量在当前已经连接的客户端作用范围为`SESSION`的值，只会影响后续连入的客户端在作用范围为`SESSION`的值。\n\n##### 注意事项\n*   并不是所有系统变量都具有`GLOBAL`和`SESSION`的作用范围。\n\n    *   有一些系统变量只具有`GLOBAL`作用范围，比方说`max_connections`，表示服务器程序支持同时最多有多少个客户端程序进行连接。\n\n    *   有一些系统变量只具有`SESSION`作用范围，比如`insert_id`，表示在对某个包含`AUTO_INCREMENT`列的表进行插入时，该列初始的值。\n\n    *   有一些系统变量的值既具有`GLOBAL`作用范围，也具有`SESSION`作用范围，比如我们前面用到的`default_storage_engine`，而且其实大部分的系统变量都是这样的，\n\n*   有些系统变量是只读的，并不能设置值。\n\n      比方说`version`，表示当前`MySQL`的版本，我们客户端是不能设置它的值的，只能在`SHOW VARIABLES`语句里查看。\n","source":"_posts/2-系统变量.md","raw":"---\ntitle: 2.系统变量\ndate: 2023-05-27 14:15:34\ntags: [MySQL, MySQL是怎样运行的]\ncategories: 数据库\n---\n### 系统变量简介\n>MySQL服务器程序运行过程中会用到许多影响程序行为的变量，它们被称为MySQL系统变量，比如允许同时连入的客户端数量用系统变量max_connections表示，表的默认存储引擎用系统变量default_storage_engine表示，查询缓存的大小用系统变量query_cache_size表示，MySQL服务器程序的系统变量有好几百条，我们就不一一列举了。\n\n我们可以使用下列命令查看MySQL服务器程序支持的系统变量以及它们的当前值：\n```\nSHOW VARIABLES [LIKE 匹配的模式];\n```\n### 设置系统变量\n#### 通过启动选项设置\n1.通过命令行添加启动选项。\n2.通过配置文件添加启动选项\n\n#### 服务器程序运行过程中设置\n##### 设置不同作用范围的系统变量\n>我们前面说过，多个客户端程序可以同时连接到一个服务器程序。对于同一个系统变量，我们有时想让不同的客户端有不同的值。比方说狗哥使用客户端A，他想让当前客户端对应的默认存储引擎为InnoDB，所以他可以把系统变量default_storage_engine的值设置为InnoDB；猫爷使用客户端B，他想让当前客户端对应的默认存储引擎为MyISAM，所以他可以把系统变量default_storage_engine的值设置为MyISAM。这样可以使狗哥和猫爷的的客户端拥有不同的默认存储引擎，使用时互不影响，十分方便。但是这样各个客户端都私有一份系统变量会产生这么两个问题：\n\n- 有一些系统变量并不是针对单个客户端的，比如允许同时连接到服务器的客户端数量max_connections，查询缓存的大小query_cache_size，这些公有的系统变量让某个客户端私有显然不合适。\n- 一个新连接到服务器的客户端对应的系统变量的值该怎么设置？\n>为了解决这两个问题，设计MySQL的大佬提出了系统变量的作用范围的概念，具体来说作用范围分为这两种,GLOBAL（全局变量，影响服务器整体操作）和SESSION（会话变量，影响某个客户端连接的操作，别名LOCAL）通过启动选项设置的系统变量的作用范围都是GLOBAL的，也就是对所有客户端都有效的\n\n在服务器程序运行期间通过客户端程序设置系统变量的语法：\n```\nSET [GLOBAL|SESSION] 系统变量名 = 值;\n```\n##### 查看不同作用范围的系统变量\n```\nSHOW [GLOBAL|SESSION] VARIABLES [LIKE 匹配的模式];\n```\n小贴士：如果某个客户端改变了某个系统变量在`GLOBAL`作用范围的值，并不会影响该系统变量在当前已经连接的客户端作用范围为`SESSION`的值，只会影响后续连入的客户端在作用范围为`SESSION`的值。\n\n##### 注意事项\n*   并不是所有系统变量都具有`GLOBAL`和`SESSION`的作用范围。\n\n    *   有一些系统变量只具有`GLOBAL`作用范围，比方说`max_connections`，表示服务器程序支持同时最多有多少个客户端程序进行连接。\n\n    *   有一些系统变量只具有`SESSION`作用范围，比如`insert_id`，表示在对某个包含`AUTO_INCREMENT`列的表进行插入时，该列初始的值。\n\n    *   有一些系统变量的值既具有`GLOBAL`作用范围，也具有`SESSION`作用范围，比如我们前面用到的`default_storage_engine`，而且其实大部分的系统变量都是这样的，\n\n*   有些系统变量是只读的，并不能设置值。\n\n      比方说`version`，表示当前`MySQL`的版本，我们客户端是不能设置它的值的，只能在`SHOW VARIABLES`语句里查看。\n","slug":"2-系统变量","published":1,"updated":"2023-10-01T02:55:45.143Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cln6ws35n000j5gi592bgbuck","content":"<h3 id=\"系统变量简介\"><a href=\"#系统变量简介\" class=\"headerlink\" title=\"系统变量简介\"></a>系统变量简介</h3><blockquote>\n<p>MySQL服务器程序运行过程中会用到许多影响程序行为的变量，它们被称为MySQL系统变量，比如允许同时连入的客户端数量用系统变量max_connections表示，表的默认存储引擎用系统变量default_storage_engine表示，查询缓存的大小用系统变量query_cache_size表示，MySQL服务器程序的系统变量有好几百条，我们就不一一列举了。</p>\n</blockquote>\n<p>我们可以使用下列命令查看MySQL服务器程序支持的系统变量以及它们的当前值：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHOW VARIABLES [LIKE 匹配的模式];</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置系统变量\"><a href=\"#设置系统变量\" class=\"headerlink\" title=\"设置系统变量\"></a>设置系统变量</h3><h4 id=\"通过启动选项设置\"><a href=\"#通过启动选项设置\" class=\"headerlink\" title=\"通过启动选项设置\"></a>通过启动选项设置</h4><p>1.通过命令行添加启动选项。<br>2.通过配置文件添加启动选项</p>\n<h4 id=\"服务器程序运行过程中设置\"><a href=\"#服务器程序运行过程中设置\" class=\"headerlink\" title=\"服务器程序运行过程中设置\"></a>服务器程序运行过程中设置</h4><h5 id=\"设置不同作用范围的系统变量\"><a href=\"#设置不同作用范围的系统变量\" class=\"headerlink\" title=\"设置不同作用范围的系统变量\"></a>设置不同作用范围的系统变量</h5><blockquote>\n<p>我们前面说过，多个客户端程序可以同时连接到一个服务器程序。对于同一个系统变量，我们有时想让不同的客户端有不同的值。比方说狗哥使用客户端A，他想让当前客户端对应的默认存储引擎为InnoDB，所以他可以把系统变量default_storage_engine的值设置为InnoDB；猫爷使用客户端B，他想让当前客户端对应的默认存储引擎为MyISAM，所以他可以把系统变量default_storage_engine的值设置为MyISAM。这样可以使狗哥和猫爷的的客户端拥有不同的默认存储引擎，使用时互不影响，十分方便。但是这样各个客户端都私有一份系统变量会产生这么两个问题：</p>\n</blockquote>\n<ul>\n<li>有一些系统变量并不是针对单个客户端的，比如允许同时连接到服务器的客户端数量max_connections，查询缓存的大小query_cache_size，这些公有的系统变量让某个客户端私有显然不合适。</li>\n<li>一个新连接到服务器的客户端对应的系统变量的值该怎么设置？<blockquote>\n<p>为了解决这两个问题，设计MySQL的大佬提出了系统变量的作用范围的概念，具体来说作用范围分为这两种,GLOBAL（全局变量，影响服务器整体操作）和SESSION（会话变量，影响某个客户端连接的操作，别名LOCAL）通过启动选项设置的系统变量的作用范围都是GLOBAL的，也就是对所有客户端都有效的</p>\n</blockquote>\n</li>\n</ul>\n<p>在服务器程序运行期间通过客户端程序设置系统变量的语法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SET [GLOBAL|SESSION] 系统变量名 = 值;</span><br></pre></td></tr></table></figure>\n<h5 id=\"查看不同作用范围的系统变量\"><a href=\"#查看不同作用范围的系统变量\" class=\"headerlink\" title=\"查看不同作用范围的系统变量\"></a>查看不同作用范围的系统变量</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHOW [GLOBAL|SESSION] VARIABLES [LIKE 匹配的模式];</span><br></pre></td></tr></table></figure>\n<p>小贴士：如果某个客户端改变了某个系统变量在<code>GLOBAL</code>作用范围的值，并不会影响该系统变量在当前已经连接的客户端作用范围为<code>SESSION</code>的值，只会影响后续连入的客户端在作用范围为<code>SESSION</code>的值。</p>\n<h5 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h5><ul>\n<li><p>并不是所有系统变量都具有<code>GLOBAL</code>和<code>SESSION</code>的作用范围。</p>\n<ul>\n<li><p>有一些系统变量只具有<code>GLOBAL</code>作用范围，比方说<code>max_connections</code>，表示服务器程序支持同时最多有多少个客户端程序进行连接。</p>\n</li>\n<li><p>有一些系统变量只具有<code>SESSION</code>作用范围，比如<code>insert_id</code>，表示在对某个包含<code>AUTO_INCREMENT</code>列的表进行插入时，该列初始的值。</p>\n</li>\n<li><p>有一些系统变量的值既具有<code>GLOBAL</code>作用范围，也具有<code>SESSION</code>作用范围，比如我们前面用到的<code>default_storage_engine</code>，而且其实大部分的系统变量都是这样的，</p>\n</li>\n</ul>\n</li>\n<li><p>有些系统变量是只读的，并不能设置值。</p>\n<p>  比方说<code>version</code>，表示当前<code>MySQL</code>的版本，我们客户端是不能设置它的值的，只能在<code>SHOW VARIABLES</code>语句里查看。</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"系统变量简介\"><a href=\"#系统变量简介\" class=\"headerlink\" title=\"系统变量简介\"></a>系统变量简介</h3><blockquote>\n<p>MySQL服务器程序运行过程中会用到许多影响程序行为的变量，它们被称为MySQL系统变量，比如允许同时连入的客户端数量用系统变量max_connections表示，表的默认存储引擎用系统变量default_storage_engine表示，查询缓存的大小用系统变量query_cache_size表示，MySQL服务器程序的系统变量有好几百条，我们就不一一列举了。</p>\n</blockquote>\n<p>我们可以使用下列命令查看MySQL服务器程序支持的系统变量以及它们的当前值：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHOW VARIABLES [LIKE 匹配的模式];</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置系统变量\"><a href=\"#设置系统变量\" class=\"headerlink\" title=\"设置系统变量\"></a>设置系统变量</h3><h4 id=\"通过启动选项设置\"><a href=\"#通过启动选项设置\" class=\"headerlink\" title=\"通过启动选项设置\"></a>通过启动选项设置</h4><p>1.通过命令行添加启动选项。<br>2.通过配置文件添加启动选项</p>\n<h4 id=\"服务器程序运行过程中设置\"><a href=\"#服务器程序运行过程中设置\" class=\"headerlink\" title=\"服务器程序运行过程中设置\"></a>服务器程序运行过程中设置</h4><h5 id=\"设置不同作用范围的系统变量\"><a href=\"#设置不同作用范围的系统变量\" class=\"headerlink\" title=\"设置不同作用范围的系统变量\"></a>设置不同作用范围的系统变量</h5><blockquote>\n<p>我们前面说过，多个客户端程序可以同时连接到一个服务器程序。对于同一个系统变量，我们有时想让不同的客户端有不同的值。比方说狗哥使用客户端A，他想让当前客户端对应的默认存储引擎为InnoDB，所以他可以把系统变量default_storage_engine的值设置为InnoDB；猫爷使用客户端B，他想让当前客户端对应的默认存储引擎为MyISAM，所以他可以把系统变量default_storage_engine的值设置为MyISAM。这样可以使狗哥和猫爷的的客户端拥有不同的默认存储引擎，使用时互不影响，十分方便。但是这样各个客户端都私有一份系统变量会产生这么两个问题：</p>\n</blockquote>\n<ul>\n<li>有一些系统变量并不是针对单个客户端的，比如允许同时连接到服务器的客户端数量max_connections，查询缓存的大小query_cache_size，这些公有的系统变量让某个客户端私有显然不合适。</li>\n<li>一个新连接到服务器的客户端对应的系统变量的值该怎么设置？<blockquote>\n<p>为了解决这两个问题，设计MySQL的大佬提出了系统变量的作用范围的概念，具体来说作用范围分为这两种,GLOBAL（全局变量，影响服务器整体操作）和SESSION（会话变量，影响某个客户端连接的操作，别名LOCAL）通过启动选项设置的系统变量的作用范围都是GLOBAL的，也就是对所有客户端都有效的</p>\n</blockquote>\n</li>\n</ul>\n<p>在服务器程序运行期间通过客户端程序设置系统变量的语法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SET [GLOBAL|SESSION] 系统变量名 = 值;</span><br></pre></td></tr></table></figure>\n<h5 id=\"查看不同作用范围的系统变量\"><a href=\"#查看不同作用范围的系统变量\" class=\"headerlink\" title=\"查看不同作用范围的系统变量\"></a>查看不同作用范围的系统变量</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHOW [GLOBAL|SESSION] VARIABLES [LIKE 匹配的模式];</span><br></pre></td></tr></table></figure>\n<p>小贴士：如果某个客户端改变了某个系统变量在<code>GLOBAL</code>作用范围的值，并不会影响该系统变量在当前已经连接的客户端作用范围为<code>SESSION</code>的值，只会影响后续连入的客户端在作用范围为<code>SESSION</code>的值。</p>\n<h5 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h5><ul>\n<li><p>并不是所有系统变量都具有<code>GLOBAL</code>和<code>SESSION</code>的作用范围。</p>\n<ul>\n<li><p>有一些系统变量只具有<code>GLOBAL</code>作用范围，比方说<code>max_connections</code>，表示服务器程序支持同时最多有多少个客户端程序进行连接。</p>\n</li>\n<li><p>有一些系统变量只具有<code>SESSION</code>作用范围，比如<code>insert_id</code>，表示在对某个包含<code>AUTO_INCREMENT</code>列的表进行插入时，该列初始的值。</p>\n</li>\n<li><p>有一些系统变量的值既具有<code>GLOBAL</code>作用范围，也具有<code>SESSION</code>作用范围，比如我们前面用到的<code>default_storage_engine</code>，而且其实大部分的系统变量都是这样的，</p>\n</li>\n</ul>\n</li>\n<li><p>有些系统变量是只读的，并不能设置值。</p>\n<p>  比方说<code>version</code>，表示当前<code>MySQL</code>的版本，我们客户端是不能设置它的值的，只能在<code>SHOW VARIABLES</code>语句里查看。</p>\n</li>\n</ul>\n"},{"title":"3.状态变量","date":"2023-05-27T18:16:34.000Z","_content":"\n\n### 状态变量\n>为了让我们更好的了解服务器程序的运行情况，MySQL服务器程序中维护了很多关于程序运行状态的变量，它们被称为状态变量。比方说Threads_connected表示当前有多少客户端与服务器建立了连接，Handler_update表示已经更新了多少行记录等，像这样显示服务器程序状态信息的状态变量还有好几百个，我们就不一一介绍了，等遇到了会详细说它们的作用的。\n\n  由于状态变量是用来显示服务器程序运行状况的，所以它们的值只能由服务器程序自己来设置，我们程序员是不能设置的。与系统变量类似，状态变量也有GLOBAL和SESSION两个作用范围的，所以查看状态变量的语句可以这么写：\n```\nSHOW [GLOBAL|SESSION] STATUS [LIKE 匹配的模式];\n```","source":"_posts/3-状态变量.md","raw":"---\ntitle: 3.状态变量\ndate: 2023-05-27 14:16:34\ntags: [MySQL,MySQL是怎样运行的]\ncategories: 数据库\n---\n\n\n### 状态变量\n>为了让我们更好的了解服务器程序的运行情况，MySQL服务器程序中维护了很多关于程序运行状态的变量，它们被称为状态变量。比方说Threads_connected表示当前有多少客户端与服务器建立了连接，Handler_update表示已经更新了多少行记录等，像这样显示服务器程序状态信息的状态变量还有好几百个，我们就不一一介绍了，等遇到了会详细说它们的作用的。\n\n  由于状态变量是用来显示服务器程序运行状况的，所以它们的值只能由服务器程序自己来设置，我们程序员是不能设置的。与系统变量类似，状态变量也有GLOBAL和SESSION两个作用范围的，所以查看状态变量的语句可以这么写：\n```\nSHOW [GLOBAL|SESSION] STATUS [LIKE 匹配的模式];\n```","slug":"3-状态变量","published":1,"updated":"2023-10-01T02:55:45.143Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cln6ws35u000m5gi56bnrenl6","content":"<h3 id=\"状态变量\"><a href=\"#状态变量\" class=\"headerlink\" title=\"状态变量\"></a>状态变量</h3><blockquote>\n<p>为了让我们更好的了解服务器程序的运行情况，MySQL服务器程序中维护了很多关于程序运行状态的变量，它们被称为状态变量。比方说Threads_connected表示当前有多少客户端与服务器建立了连接，Handler_update表示已经更新了多少行记录等，像这样显示服务器程序状态信息的状态变量还有好几百个，我们就不一一介绍了，等遇到了会详细说它们的作用的。</p>\n</blockquote>\n<p>  由于状态变量是用来显示服务器程序运行状况的，所以它们的值只能由服务器程序自己来设置，我们程序员是不能设置的。与系统变量类似，状态变量也有GLOBAL和SESSION两个作用范围的，所以查看状态变量的语句可以这么写：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHOW [GLOBAL|SESSION] STATUS [LIKE 匹配的模式];</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"状态变量\"><a href=\"#状态变量\" class=\"headerlink\" title=\"状态变量\"></a>状态变量</h3><blockquote>\n<p>为了让我们更好的了解服务器程序的运行情况，MySQL服务器程序中维护了很多关于程序运行状态的变量，它们被称为状态变量。比方说Threads_connected表示当前有多少客户端与服务器建立了连接，Handler_update表示已经更新了多少行记录等，像这样显示服务器程序状态信息的状态变量还有好几百个，我们就不一一介绍了，等遇到了会详细说它们的作用的。</p>\n</blockquote>\n<p>  由于状态变量是用来显示服务器程序运行状况的，所以它们的值只能由服务器程序自己来设置，我们程序员是不能设置的。与系统变量类似，状态变量也有GLOBAL和SESSION两个作用范围的，所以查看状态变量的语句可以这么写：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHOW [GLOBAL|SESSION] STATUS [LIKE 匹配的模式];</span><br></pre></td></tr></table></figure>"},{"title":"4.字符集和比较规则","date":"2023-05-27T18:17:04.000Z","_content":"## ASCII字符集\n>总共128个字符，包括一些不可见字符\n## ISO 8859-1 字符集（latin1）\n>共收录256个字符，是在ASCII字符集的基础上又扩充了128个西欧常用字符（包括德法两国的字母），也可以使用1个字节来进行编码。\n## GB2312字符集\n>收录了汉字以及拉丁字母，希腊字母 收录了汉字以及拉丁字母、希腊字母、日文平假名及片假名字母、俄语西里尔字母。其中收录汉字6763个，其他文字符号682个。同时这种字符集又兼容ASCII字符集，所以在编码方式上显得有些奇怪：\n1.如果该字符在ASCII字符集中，则采用1字节编码\n2.否则采用2字节编码\n## GBK字符集\n>GBK字符集只是在收录字符范围上对GB2312字符集作了扩充，编码方式上兼容GB2312\n## utf8字符集\n>收录地球上能想到的所有字符，而且还在不断扩充。这种字符集兼容ASCII字符集，采用变长编码方式，编码一个字符需要使用1～4个字节\n\n**其实准确的说，utf8只是Unicode字符集的一种编码方案，Unicode字符集可以采用utf8、utf16、utf32这几种编码方案，utf8使用1～4个字节编码一个字符，utf16使用2个或4个字节编码一个字符，utf32使用4个字节编码一个字符。更详细的Unicode和其编码方案的知识不是本书的重点，大家上网查查。MySQL中并不区分字符集和编码方案的概念，所以后边介绍的时候把utf8、utf16、utf32都当作一种字符集对待。** \n\n## MySQL中支持的字符集和排序规则\n#### MySQL中的utf8和utf8mb4\n- utf8mb3：阉割过的utf8字符集，只使用1～3个字节表示字符。\n- utf8mb4：正宗的utf8字符集，使用1～4个字节表示字符。\n\n#### MySQL字符集的查看\n```\nSHOW (CHARACTER SET|CHARSET) [LIKE 匹配的模式];\n```\n\n#### MySQL比较规则的查看\n```\nSHOW COLLATION [LIKE 匹配的模式];\n```\n#### 各个级别的字符集和比较规则\n- 服务器级别\nMySQL提供了两个系统变量来表示服务器级别的字符集和比较规则:\n![QQ截图20221205152423.png](images/4_1.jpg)\n服务器级别默认的字符集是utf8，默认的比较规则是utf8_general_ci\n可以用以下命令查看：\n```\nSHOW VARIABLES LIKE [匹配模式]\n```\n- 数据库级别\n我们在创建和修改数据库的时候可以指定该数据库的字符集和比较规则\n```\nCREATE DATABASE 数据库名\n    [[DEFAULT] CHARACTER SET 字符集名称]\n    [[DEFAULT] COLLATE 比较规则名称];\n\nALTER DATABASE 数据库名\n    [[DEFAULT] CHARACTER SET 字符集名称]\n    [[DEFAULT] COLLATE 比较规则名称];\n```\n如果想查看当前数据库使用的字符集和比较规则，可以查看下面两个系统变量的值（前提是使用USE语句选择当前默认数据库，如果没有默认数据库，则变量与相应的服务器级系统变量具有相同的值）：\n![QQ截图20221205153115.png](images/4_2.jpg)\n\n- 表级别\n我们也可以在创建和修改表的时候指定表的字符集和比较规则，语法如下：\n```\nCREATE TABLE 表名 (列的信息)\n    [[DEFAULT] CHARACTER SET 字符集名称]\n    [COLLATE 比较规则名称]\n\nALTER TABLE 表名\n    [[DEFAULT] CHARACTER SET 字符集名称]\n    [COLLATE 比较规则名称]\n```\n\n- 列级别\n需要注意的是，对于存储字符串的列，同一个表中的不同的列也可以有不同的字符集和比较规则。我们在创建和修改列定义的时候可以指定该列的字符集和比较规则，语法如下：\n```\nCREATE TABLE 表名(\n    列名 字符串类型 [CHARACTER SET 字符集名称] [COLLATE 比较规则名称],\n    其他列...\n);\n\nALTER TABLE 表名 MODIFY 列名 字符串类型 [CHARACTER SET 字符集名称] [COLLATE 比较规则名称];\n\n```\n对于某个列来说，如果在创建和修改的语句中没有指明字符集和比较规则，将使用该列所在表的字符集和比较规则作为该列的字符集和比较规则。\n**小贴士：在转换列的字符集时需要注意，如果转换前列中存储的数据不能用转换后的字符集进行表示，就会发生错误。比方说原先列使用的字符集是utf8，列中存储了一些汉字，现在把列的字符集转换为ascii的话就会出错，因为ascii字符集并不能表示汉字字符。**\n\n## MySQL中字符集的转换\n>我们知道从客户端发往服务器的请求本质上就是一个字符串，服务器向客户端返回的结果本质上也是一个字符串，而字符串其实是使用某种字符集编码的二进制数据。\n\n![QQ截图20221205153733.png](images/4_3.jpg)\n\n![QQ截图20221205153848.png](images/4_4.jpg)\n\n","source":"_posts/4-字符集和比较规则.md","raw":"---\ntitle: 4.字符集和比较规则\ndate: 2023-05-27 14:17:04\ntags: [MySQL,MySQL是怎样运行的]\ncategories: 数据库\n---\n## ASCII字符集\n>总共128个字符，包括一些不可见字符\n## ISO 8859-1 字符集（latin1）\n>共收录256个字符，是在ASCII字符集的基础上又扩充了128个西欧常用字符（包括德法两国的字母），也可以使用1个字节来进行编码。\n## GB2312字符集\n>收录了汉字以及拉丁字母，希腊字母 收录了汉字以及拉丁字母、希腊字母、日文平假名及片假名字母、俄语西里尔字母。其中收录汉字6763个，其他文字符号682个。同时这种字符集又兼容ASCII字符集，所以在编码方式上显得有些奇怪：\n1.如果该字符在ASCII字符集中，则采用1字节编码\n2.否则采用2字节编码\n## GBK字符集\n>GBK字符集只是在收录字符范围上对GB2312字符集作了扩充，编码方式上兼容GB2312\n## utf8字符集\n>收录地球上能想到的所有字符，而且还在不断扩充。这种字符集兼容ASCII字符集，采用变长编码方式，编码一个字符需要使用1～4个字节\n\n**其实准确的说，utf8只是Unicode字符集的一种编码方案，Unicode字符集可以采用utf8、utf16、utf32这几种编码方案，utf8使用1～4个字节编码一个字符，utf16使用2个或4个字节编码一个字符，utf32使用4个字节编码一个字符。更详细的Unicode和其编码方案的知识不是本书的重点，大家上网查查。MySQL中并不区分字符集和编码方案的概念，所以后边介绍的时候把utf8、utf16、utf32都当作一种字符集对待。** \n\n## MySQL中支持的字符集和排序规则\n#### MySQL中的utf8和utf8mb4\n- utf8mb3：阉割过的utf8字符集，只使用1～3个字节表示字符。\n- utf8mb4：正宗的utf8字符集，使用1～4个字节表示字符。\n\n#### MySQL字符集的查看\n```\nSHOW (CHARACTER SET|CHARSET) [LIKE 匹配的模式];\n```\n\n#### MySQL比较规则的查看\n```\nSHOW COLLATION [LIKE 匹配的模式];\n```\n#### 各个级别的字符集和比较规则\n- 服务器级别\nMySQL提供了两个系统变量来表示服务器级别的字符集和比较规则:\n![QQ截图20221205152423.png](images/4_1.jpg)\n服务器级别默认的字符集是utf8，默认的比较规则是utf8_general_ci\n可以用以下命令查看：\n```\nSHOW VARIABLES LIKE [匹配模式]\n```\n- 数据库级别\n我们在创建和修改数据库的时候可以指定该数据库的字符集和比较规则\n```\nCREATE DATABASE 数据库名\n    [[DEFAULT] CHARACTER SET 字符集名称]\n    [[DEFAULT] COLLATE 比较规则名称];\n\nALTER DATABASE 数据库名\n    [[DEFAULT] CHARACTER SET 字符集名称]\n    [[DEFAULT] COLLATE 比较规则名称];\n```\n如果想查看当前数据库使用的字符集和比较规则，可以查看下面两个系统变量的值（前提是使用USE语句选择当前默认数据库，如果没有默认数据库，则变量与相应的服务器级系统变量具有相同的值）：\n![QQ截图20221205153115.png](images/4_2.jpg)\n\n- 表级别\n我们也可以在创建和修改表的时候指定表的字符集和比较规则，语法如下：\n```\nCREATE TABLE 表名 (列的信息)\n    [[DEFAULT] CHARACTER SET 字符集名称]\n    [COLLATE 比较规则名称]\n\nALTER TABLE 表名\n    [[DEFAULT] CHARACTER SET 字符集名称]\n    [COLLATE 比较规则名称]\n```\n\n- 列级别\n需要注意的是，对于存储字符串的列，同一个表中的不同的列也可以有不同的字符集和比较规则。我们在创建和修改列定义的时候可以指定该列的字符集和比较规则，语法如下：\n```\nCREATE TABLE 表名(\n    列名 字符串类型 [CHARACTER SET 字符集名称] [COLLATE 比较规则名称],\n    其他列...\n);\n\nALTER TABLE 表名 MODIFY 列名 字符串类型 [CHARACTER SET 字符集名称] [COLLATE 比较规则名称];\n\n```\n对于某个列来说，如果在创建和修改的语句中没有指明字符集和比较规则，将使用该列所在表的字符集和比较规则作为该列的字符集和比较规则。\n**小贴士：在转换列的字符集时需要注意，如果转换前列中存储的数据不能用转换后的字符集进行表示，就会发生错误。比方说原先列使用的字符集是utf8，列中存储了一些汉字，现在把列的字符集转换为ascii的话就会出错，因为ascii字符集并不能表示汉字字符。**\n\n## MySQL中字符集的转换\n>我们知道从客户端发往服务器的请求本质上就是一个字符串，服务器向客户端返回的结果本质上也是一个字符串，而字符串其实是使用某种字符集编码的二进制数据。\n\n![QQ截图20221205153733.png](images/4_3.jpg)\n\n![QQ截图20221205153848.png](images/4_4.jpg)\n\n","slug":"4-字符集和比较规则","published":1,"updated":"2023-10-01T02:55:45.143Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cln6ws35w000q5gi535fb0dd8","content":"<h2 id=\"ASCII字符集\"><a href=\"#ASCII字符集\" class=\"headerlink\" title=\"ASCII字符集\"></a>ASCII字符集</h2><blockquote>\n<p>总共128个字符，包括一些不可见字符</p>\n</blockquote>\n<h2 id=\"ISO-8859-1-字符集（latin1）\"><a href=\"#ISO-8859-1-字符集（latin1）\" class=\"headerlink\" title=\"ISO 8859-1 字符集（latin1）\"></a>ISO 8859-1 字符集（latin1）</h2><blockquote>\n<p>共收录256个字符，是在ASCII字符集的基础上又扩充了128个西欧常用字符（包括德法两国的字母），也可以使用1个字节来进行编码。</p>\n</blockquote>\n<h2 id=\"GB2312字符集\"><a href=\"#GB2312字符集\" class=\"headerlink\" title=\"GB2312字符集\"></a>GB2312字符集</h2><blockquote>\n<p>收录了汉字以及拉丁字母，希腊字母 收录了汉字以及拉丁字母、希腊字母、日文平假名及片假名字母、俄语西里尔字母。其中收录汉字6763个，其他文字符号682个。同时这种字符集又兼容ASCII字符集，所以在编码方式上显得有些奇怪：<br>1.如果该字符在ASCII字符集中，则采用1字节编码<br>2.否则采用2字节编码</p>\n</blockquote>\n<h2 id=\"GBK字符集\"><a href=\"#GBK字符集\" class=\"headerlink\" title=\"GBK字符集\"></a>GBK字符集</h2><blockquote>\n<p>GBK字符集只是在收录字符范围上对GB2312字符集作了扩充，编码方式上兼容GB2312</p>\n</blockquote>\n<h2 id=\"utf8字符集\"><a href=\"#utf8字符集\" class=\"headerlink\" title=\"utf8字符集\"></a>utf8字符集</h2><blockquote>\n<p>收录地球上能想到的所有字符，而且还在不断扩充。这种字符集兼容ASCII字符集，采用变长编码方式，编码一个字符需要使用1～4个字节</p>\n</blockquote>\n<p><strong>其实准确的说，utf8只是Unicode字符集的一种编码方案，Unicode字符集可以采用utf8、utf16、utf32这几种编码方案，utf8使用1～4个字节编码一个字符，utf16使用2个或4个字节编码一个字符，utf32使用4个字节编码一个字符。更详细的Unicode和其编码方案的知识不是本书的重点，大家上网查查。MySQL中并不区分字符集和编码方案的概念，所以后边介绍的时候把utf8、utf16、utf32都当作一种字符集对待。</strong> </p>\n<h2 id=\"MySQL中支持的字符集和排序规则\"><a href=\"#MySQL中支持的字符集和排序规则\" class=\"headerlink\" title=\"MySQL中支持的字符集和排序规则\"></a>MySQL中支持的字符集和排序规则</h2><h4 id=\"MySQL中的utf8和utf8mb4\"><a href=\"#MySQL中的utf8和utf8mb4\" class=\"headerlink\" title=\"MySQL中的utf8和utf8mb4\"></a>MySQL中的utf8和utf8mb4</h4><ul>\n<li>utf8mb3：阉割过的utf8字符集，只使用1～3个字节表示字符。</li>\n<li>utf8mb4：正宗的utf8字符集，使用1～4个字节表示字符。</li>\n</ul>\n<h4 id=\"MySQL字符集的查看\"><a href=\"#MySQL字符集的查看\" class=\"headerlink\" title=\"MySQL字符集的查看\"></a>MySQL字符集的查看</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHOW (CHARACTER SET|CHARSET) [LIKE 匹配的模式];</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"MySQL比较规则的查看\"><a href=\"#MySQL比较规则的查看\" class=\"headerlink\" title=\"MySQL比较规则的查看\"></a>MySQL比较规则的查看</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHOW COLLATION [LIKE 匹配的模式];</span><br></pre></td></tr></table></figure>\n<h4 id=\"各个级别的字符集和比较规则\"><a href=\"#各个级别的字符集和比较规则\" class=\"headerlink\" title=\"各个级别的字符集和比较规则\"></a>各个级别的字符集和比较规则</h4><ul>\n<li><p>服务器级别<br>MySQL提供了两个系统变量来表示服务器级别的字符集和比较规则:<br><img src=\"/images/4_1.jpg\" alt=\"QQ截图20221205152423.png\"><br>服务器级别默认的字符集是utf8，默认的比较规则是utf8_general_ci<br>可以用以下命令查看：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHOW VARIABLES LIKE [匹配模式]</span><br></pre></td></tr></table></figure></li>\n<li><p>数据库级别<br>我们在创建和修改数据库的时候可以指定该数据库的字符集和比较规则</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE DATABASE 数据库名</span><br><span class=\"line\">    [[DEFAULT] CHARACTER SET 字符集名称]</span><br><span class=\"line\">    [[DEFAULT] COLLATE 比较规则名称];</span><br><span class=\"line\"></span><br><span class=\"line\">ALTER DATABASE 数据库名</span><br><span class=\"line\">    [[DEFAULT] CHARACTER SET 字符集名称]</span><br><span class=\"line\">    [[DEFAULT] COLLATE 比较规则名称];</span><br></pre></td></tr></table></figure>\n<p>如果想查看当前数据库使用的字符集和比较规则，可以查看下面两个系统变量的值（前提是使用USE语句选择当前默认数据库，如果没有默认数据库，则变量与相应的服务器级系统变量具有相同的值）：<br><img src=\"/images/4_2.jpg\" alt=\"QQ截图20221205153115.png\"></p>\n</li>\n<li><p>表级别<br>我们也可以在创建和修改表的时候指定表的字符集和比较规则，语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE 表名 (列的信息)</span><br><span class=\"line\">    [[DEFAULT] CHARACTER SET 字符集名称]</span><br><span class=\"line\">    [COLLATE 比较规则名称]</span><br><span class=\"line\"></span><br><span class=\"line\">ALTER TABLE 表名</span><br><span class=\"line\">    [[DEFAULT] CHARACTER SET 字符集名称]</span><br><span class=\"line\">    [COLLATE 比较规则名称]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>列级别<br>需要注意的是，对于存储字符串的列，同一个表中的不同的列也可以有不同的字符集和比较规则。我们在创建和修改列定义的时候可以指定该列的字符集和比较规则，语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE 表名(</span><br><span class=\"line\">    列名 字符串类型 [CHARACTER SET 字符集名称] [COLLATE 比较规则名称],</span><br><span class=\"line\">    其他列...</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">ALTER TABLE 表名 MODIFY 列名 字符串类型 [CHARACTER SET 字符集名称] [COLLATE 比较规则名称];</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>对于某个列来说，如果在创建和修改的语句中没有指明字符集和比较规则，将使用该列所在表的字符集和比较规则作为该列的字符集和比较规则。<br><strong>小贴士：在转换列的字符集时需要注意，如果转换前列中存储的数据不能用转换后的字符集进行表示，就会发生错误。比方说原先列使用的字符集是utf8，列中存储了一些汉字，现在把列的字符集转换为ascii的话就会出错，因为ascii字符集并不能表示汉字字符。</strong></p>\n</li>\n</ul>\n<h2 id=\"MySQL中字符集的转换\"><a href=\"#MySQL中字符集的转换\" class=\"headerlink\" title=\"MySQL中字符集的转换\"></a>MySQL中字符集的转换</h2><blockquote>\n<p>我们知道从客户端发往服务器的请求本质上就是一个字符串，服务器向客户端返回的结果本质上也是一个字符串，而字符串其实是使用某种字符集编码的二进制数据。</p>\n</blockquote>\n<p><img src=\"/images/4_3.jpg\" alt=\"QQ截图20221205153733.png\"></p>\n<p><img src=\"/images/4_4.jpg\" alt=\"QQ截图20221205153848.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"ASCII字符集\"><a href=\"#ASCII字符集\" class=\"headerlink\" title=\"ASCII字符集\"></a>ASCII字符集</h2><blockquote>\n<p>总共128个字符，包括一些不可见字符</p>\n</blockquote>\n<h2 id=\"ISO-8859-1-字符集（latin1）\"><a href=\"#ISO-8859-1-字符集（latin1）\" class=\"headerlink\" title=\"ISO 8859-1 字符集（latin1）\"></a>ISO 8859-1 字符集（latin1）</h2><blockquote>\n<p>共收录256个字符，是在ASCII字符集的基础上又扩充了128个西欧常用字符（包括德法两国的字母），也可以使用1个字节来进行编码。</p>\n</blockquote>\n<h2 id=\"GB2312字符集\"><a href=\"#GB2312字符集\" class=\"headerlink\" title=\"GB2312字符集\"></a>GB2312字符集</h2><blockquote>\n<p>收录了汉字以及拉丁字母，希腊字母 收录了汉字以及拉丁字母、希腊字母、日文平假名及片假名字母、俄语西里尔字母。其中收录汉字6763个，其他文字符号682个。同时这种字符集又兼容ASCII字符集，所以在编码方式上显得有些奇怪：<br>1.如果该字符在ASCII字符集中，则采用1字节编码<br>2.否则采用2字节编码</p>\n</blockquote>\n<h2 id=\"GBK字符集\"><a href=\"#GBK字符集\" class=\"headerlink\" title=\"GBK字符集\"></a>GBK字符集</h2><blockquote>\n<p>GBK字符集只是在收录字符范围上对GB2312字符集作了扩充，编码方式上兼容GB2312</p>\n</blockquote>\n<h2 id=\"utf8字符集\"><a href=\"#utf8字符集\" class=\"headerlink\" title=\"utf8字符集\"></a>utf8字符集</h2><blockquote>\n<p>收录地球上能想到的所有字符，而且还在不断扩充。这种字符集兼容ASCII字符集，采用变长编码方式，编码一个字符需要使用1～4个字节</p>\n</blockquote>\n<p><strong>其实准确的说，utf8只是Unicode字符集的一种编码方案，Unicode字符集可以采用utf8、utf16、utf32这几种编码方案，utf8使用1～4个字节编码一个字符，utf16使用2个或4个字节编码一个字符，utf32使用4个字节编码一个字符。更详细的Unicode和其编码方案的知识不是本书的重点，大家上网查查。MySQL中并不区分字符集和编码方案的概念，所以后边介绍的时候把utf8、utf16、utf32都当作一种字符集对待。</strong> </p>\n<h2 id=\"MySQL中支持的字符集和排序规则\"><a href=\"#MySQL中支持的字符集和排序规则\" class=\"headerlink\" title=\"MySQL中支持的字符集和排序规则\"></a>MySQL中支持的字符集和排序规则</h2><h4 id=\"MySQL中的utf8和utf8mb4\"><a href=\"#MySQL中的utf8和utf8mb4\" class=\"headerlink\" title=\"MySQL中的utf8和utf8mb4\"></a>MySQL中的utf8和utf8mb4</h4><ul>\n<li>utf8mb3：阉割过的utf8字符集，只使用1～3个字节表示字符。</li>\n<li>utf8mb4：正宗的utf8字符集，使用1～4个字节表示字符。</li>\n</ul>\n<h4 id=\"MySQL字符集的查看\"><a href=\"#MySQL字符集的查看\" class=\"headerlink\" title=\"MySQL字符集的查看\"></a>MySQL字符集的查看</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHOW (CHARACTER SET|CHARSET) [LIKE 匹配的模式];</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"MySQL比较规则的查看\"><a href=\"#MySQL比较规则的查看\" class=\"headerlink\" title=\"MySQL比较规则的查看\"></a>MySQL比较规则的查看</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHOW COLLATION [LIKE 匹配的模式];</span><br></pre></td></tr></table></figure>\n<h4 id=\"各个级别的字符集和比较规则\"><a href=\"#各个级别的字符集和比较规则\" class=\"headerlink\" title=\"各个级别的字符集和比较规则\"></a>各个级别的字符集和比较规则</h4><ul>\n<li><p>服务器级别<br>MySQL提供了两个系统变量来表示服务器级别的字符集和比较规则:<br><img src=\"/images/4_1.jpg\" alt=\"QQ截图20221205152423.png\"><br>服务器级别默认的字符集是utf8，默认的比较规则是utf8_general_ci<br>可以用以下命令查看：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHOW VARIABLES LIKE [匹配模式]</span><br></pre></td></tr></table></figure></li>\n<li><p>数据库级别<br>我们在创建和修改数据库的时候可以指定该数据库的字符集和比较规则</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE DATABASE 数据库名</span><br><span class=\"line\">    [[DEFAULT] CHARACTER SET 字符集名称]</span><br><span class=\"line\">    [[DEFAULT] COLLATE 比较规则名称];</span><br><span class=\"line\"></span><br><span class=\"line\">ALTER DATABASE 数据库名</span><br><span class=\"line\">    [[DEFAULT] CHARACTER SET 字符集名称]</span><br><span class=\"line\">    [[DEFAULT] COLLATE 比较规则名称];</span><br></pre></td></tr></table></figure>\n<p>如果想查看当前数据库使用的字符集和比较规则，可以查看下面两个系统变量的值（前提是使用USE语句选择当前默认数据库，如果没有默认数据库，则变量与相应的服务器级系统变量具有相同的值）：<br><img src=\"/images/4_2.jpg\" alt=\"QQ截图20221205153115.png\"></p>\n</li>\n<li><p>表级别<br>我们也可以在创建和修改表的时候指定表的字符集和比较规则，语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE 表名 (列的信息)</span><br><span class=\"line\">    [[DEFAULT] CHARACTER SET 字符集名称]</span><br><span class=\"line\">    [COLLATE 比较规则名称]</span><br><span class=\"line\"></span><br><span class=\"line\">ALTER TABLE 表名</span><br><span class=\"line\">    [[DEFAULT] CHARACTER SET 字符集名称]</span><br><span class=\"line\">    [COLLATE 比较规则名称]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>列级别<br>需要注意的是，对于存储字符串的列，同一个表中的不同的列也可以有不同的字符集和比较规则。我们在创建和修改列定义的时候可以指定该列的字符集和比较规则，语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE 表名(</span><br><span class=\"line\">    列名 字符串类型 [CHARACTER SET 字符集名称] [COLLATE 比较规则名称],</span><br><span class=\"line\">    其他列...</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">ALTER TABLE 表名 MODIFY 列名 字符串类型 [CHARACTER SET 字符集名称] [COLLATE 比较规则名称];</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>对于某个列来说，如果在创建和修改的语句中没有指明字符集和比较规则，将使用该列所在表的字符集和比较规则作为该列的字符集和比较规则。<br><strong>小贴士：在转换列的字符集时需要注意，如果转换前列中存储的数据不能用转换后的字符集进行表示，就会发生错误。比方说原先列使用的字符集是utf8，列中存储了一些汉字，现在把列的字符集转换为ascii的话就会出错，因为ascii字符集并不能表示汉字字符。</strong></p>\n</li>\n</ul>\n<h2 id=\"MySQL中字符集的转换\"><a href=\"#MySQL中字符集的转换\" class=\"headerlink\" title=\"MySQL中字符集的转换\"></a>MySQL中字符集的转换</h2><blockquote>\n<p>我们知道从客户端发往服务器的请求本质上就是一个字符串，服务器向客户端返回的结果本质上也是一个字符串，而字符串其实是使用某种字符集编码的二进制数据。</p>\n</blockquote>\n<p><img src=\"/images/4_3.jpg\" alt=\"QQ截图20221205153733.png\"></p>\n<p><img src=\"/images/4_4.jpg\" alt=\"QQ截图20221205153848.png\"></p>\n"},{"title":"5.InnoDB记录行格式","date":"2023-05-27T18:17:56.000Z","_content":"# InnoDB页简介\n>InnoDB是一个将表中的数据存储到磁盘上的存储引擎。由于磁盘IO和内存IO速度差了几个量级，InnoDB采取的方式是：**将数据划分为若干个页，以页作为磁盘和内存之间的交互的基本单位，InnoDB中页的大小一般为16KB**。\n\n# InnoDB行格式\n>我们平时是以记录为单位来向表中插入数据的，这些记录在磁盘上的存放方式也被称为**行格式**或者**记录格式**\n### 指定行格式的语法\n```\nCREATE TABLE 表名 (列的信息) ROW_FORMAT=行格式名称\n    \nALTER TABLE 表名 ROW_FORMAT=行格式名称\n\n```\n### COMPACT行格式\n![QQ截图20221205160357.png](images/5_1.jpg)\n\n一条完整的记录其实可以被分为记录的额外信息和记录的真实数据两大部分。\n- 记录的额外信息：服务器为了描述这条记录而不得不添加的一些信息，分为3类，变长字段长度列表、NULL值列表、记录头信息\n1.变长字段长度列表：MySQL支持一些变长的数据类型，比如VARCHAR(M)、VARBINARY(M)、各种TEXT类型，各种BLOB类型，这些变长字段占用的存储空间分为两部分（真正的数据内容和占用的字节数），对于CHAR(M）类型的列来说，当列采用的是定长字符集时，该列占用的字节数不会被加到变长字段长度列表，而如果采用变长字符集时，该列占用的字节数也会被加到变长字段长度列表\n**在COMPACT行格式中，把所有的变长字段的真实数据占用的字节长度都存放在记录的开头部位，从而形成一个变长字段长度列表，按逆序排放**\n2.NULL值列表：处理过程是这样的，先统计表中哪些列允许存储NULL值(主键列、被NOT NULL修饰的列都是不可以存储NULL值的)，所以在统计的时候不会把这些列算进去，接着如果有的列可以存储NULL值，那么就需要NULL值列表，将每个允许存储NULL的列对应一个二进制位（为1代表该列值为NULL，为0代表不为NULL），其次MySQL规定NULL值列表必须用整数个字节的位表示，如果使用的二进制位个数不是整数个字节，则在字节的高位补0\n3.记录头信息：它是由固定的5个字节组成，不同位代表不同意思\n![QQ截图20221205161836.png](images/5_2.jpg)\n\n- 记录的真实数据\nMySQL会为每个记录默认的添加一些列（也称为隐藏列），具体的列如下：\n![QQ截图20221205162406.png](images/5_3.jpg)\nInnoDB表对主键的生成策略:优先使用用户自定义主键作为主键，如果用户没有定义主键，则选取一个Unique键作为主键，如果表中连Unique键都没有定义的化，则InnoDB会为表默认添加一个名为row_id的隐藏列作为主键\n\n### Redundant行格式\n![QQ截图20221207112201.png](images/5_4.jpg)\n- 记录的额外信息\n1.字段长度偏移列表：与compact行格式相比，没有了变长两个字，多了偏移两个字，Redundant的行格式会把该条记录中所有（包括隐藏列）的长度信息都按照逆序存储到字段长度偏移列表。同时Redundant的行格式是按照两个相邻数值的差值来计算各个列值的长度。\n![QQ截图20221207115628.png](images/5_5/jpg)\n\n- 记录头信息\n![QQ截图20221207113712.png](images/5_6.jpg)\n![QQ截图20221207113735.png](images/5_7.jpg)\n\n对于Compact和Reduntant行格式来说，如果某一列中的数据非常多的话，在本记录的真实数据处只会存储该列的前768个字节的数据和一个指向其它页的地址，然后把剩下的数据存放到其它页中，这个过程叫做**行溢出，存储超出768字节的那些页也被称为溢出页**","source":"_posts/5-InnoDB记录行格式.md","raw":"---\ntitle: 5.InnoDB记录行格式\ndate: 2023-05-27 14:17:56\ntags: [MySQL,MySQL是怎样运行的]\ncategories: 数据库\n---\n# InnoDB页简介\n>InnoDB是一个将表中的数据存储到磁盘上的存储引擎。由于磁盘IO和内存IO速度差了几个量级，InnoDB采取的方式是：**将数据划分为若干个页，以页作为磁盘和内存之间的交互的基本单位，InnoDB中页的大小一般为16KB**。\n\n# InnoDB行格式\n>我们平时是以记录为单位来向表中插入数据的，这些记录在磁盘上的存放方式也被称为**行格式**或者**记录格式**\n### 指定行格式的语法\n```\nCREATE TABLE 表名 (列的信息) ROW_FORMAT=行格式名称\n    \nALTER TABLE 表名 ROW_FORMAT=行格式名称\n\n```\n### COMPACT行格式\n![QQ截图20221205160357.png](images/5_1.jpg)\n\n一条完整的记录其实可以被分为记录的额外信息和记录的真实数据两大部分。\n- 记录的额外信息：服务器为了描述这条记录而不得不添加的一些信息，分为3类，变长字段长度列表、NULL值列表、记录头信息\n1.变长字段长度列表：MySQL支持一些变长的数据类型，比如VARCHAR(M)、VARBINARY(M)、各种TEXT类型，各种BLOB类型，这些变长字段占用的存储空间分为两部分（真正的数据内容和占用的字节数），对于CHAR(M）类型的列来说，当列采用的是定长字符集时，该列占用的字节数不会被加到变长字段长度列表，而如果采用变长字符集时，该列占用的字节数也会被加到变长字段长度列表\n**在COMPACT行格式中，把所有的变长字段的真实数据占用的字节长度都存放在记录的开头部位，从而形成一个变长字段长度列表，按逆序排放**\n2.NULL值列表：处理过程是这样的，先统计表中哪些列允许存储NULL值(主键列、被NOT NULL修饰的列都是不可以存储NULL值的)，所以在统计的时候不会把这些列算进去，接着如果有的列可以存储NULL值，那么就需要NULL值列表，将每个允许存储NULL的列对应一个二进制位（为1代表该列值为NULL，为0代表不为NULL），其次MySQL规定NULL值列表必须用整数个字节的位表示，如果使用的二进制位个数不是整数个字节，则在字节的高位补0\n3.记录头信息：它是由固定的5个字节组成，不同位代表不同意思\n![QQ截图20221205161836.png](images/5_2.jpg)\n\n- 记录的真实数据\nMySQL会为每个记录默认的添加一些列（也称为隐藏列），具体的列如下：\n![QQ截图20221205162406.png](images/5_3.jpg)\nInnoDB表对主键的生成策略:优先使用用户自定义主键作为主键，如果用户没有定义主键，则选取一个Unique键作为主键，如果表中连Unique键都没有定义的化，则InnoDB会为表默认添加一个名为row_id的隐藏列作为主键\n\n### Redundant行格式\n![QQ截图20221207112201.png](images/5_4.jpg)\n- 记录的额外信息\n1.字段长度偏移列表：与compact行格式相比，没有了变长两个字，多了偏移两个字，Redundant的行格式会把该条记录中所有（包括隐藏列）的长度信息都按照逆序存储到字段长度偏移列表。同时Redundant的行格式是按照两个相邻数值的差值来计算各个列值的长度。\n![QQ截图20221207115628.png](images/5_5/jpg)\n\n- 记录头信息\n![QQ截图20221207113712.png](images/5_6.jpg)\n![QQ截图20221207113735.png](images/5_7.jpg)\n\n对于Compact和Reduntant行格式来说，如果某一列中的数据非常多的话，在本记录的真实数据处只会存储该列的前768个字节的数据和一个指向其它页的地址，然后把剩下的数据存放到其它页中，这个过程叫做**行溢出，存储超出768字节的那些页也被称为溢出页**","slug":"5-InnoDB记录行格式","published":1,"updated":"2023-10-01T02:55:45.143Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cln6ws35x000t5gi58q7b8cy8","content":"<h1 id=\"InnoDB页简介\"><a href=\"#InnoDB页简介\" class=\"headerlink\" title=\"InnoDB页简介\"></a>InnoDB页简介</h1><blockquote>\n<p>InnoDB是一个将表中的数据存储到磁盘上的存储引擎。由于磁盘IO和内存IO速度差了几个量级，InnoDB采取的方式是：<strong>将数据划分为若干个页，以页作为磁盘和内存之间的交互的基本单位，InnoDB中页的大小一般为16KB</strong>。</p>\n</blockquote>\n<h1 id=\"InnoDB行格式\"><a href=\"#InnoDB行格式\" class=\"headerlink\" title=\"InnoDB行格式\"></a>InnoDB行格式</h1><blockquote>\n<p>我们平时是以记录为单位来向表中插入数据的，这些记录在磁盘上的存放方式也被称为<strong>行格式</strong>或者<strong>记录格式</strong></p>\n</blockquote>\n<h3 id=\"指定行格式的语法\"><a href=\"#指定行格式的语法\" class=\"headerlink\" title=\"指定行格式的语法\"></a>指定行格式的语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE 表名 (列的信息) ROW_FORMAT=行格式名称</span><br><span class=\"line\">    </span><br><span class=\"line\">ALTER TABLE 表名 ROW_FORMAT=行格式名称</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"COMPACT行格式\"><a href=\"#COMPACT行格式\" class=\"headerlink\" title=\"COMPACT行格式\"></a>COMPACT行格式</h3><p><img src=\"/images/5_1.jpg\" alt=\"QQ截图20221205160357.png\"></p>\n<p>一条完整的记录其实可以被分为记录的额外信息和记录的真实数据两大部分。</p>\n<ul>\n<li><p>记录的额外信息：服务器为了描述这条记录而不得不添加的一些信息，分为3类，变长字段长度列表、NULL值列表、记录头信息<br>1.变长字段长度列表：MySQL支持一些变长的数据类型，比如VARCHAR(M)、VARBINARY(M)、各种TEXT类型，各种BLOB类型，这些变长字段占用的存储空间分为两部分（真正的数据内容和占用的字节数），对于CHAR(M）类型的列来说，当列采用的是定长字符集时，该列占用的字节数不会被加到变长字段长度列表，而如果采用变长字符集时，该列占用的字节数也会被加到变长字段长度列表<br><strong>在COMPACT行格式中，把所有的变长字段的真实数据占用的字节长度都存放在记录的开头部位，从而形成一个变长字段长度列表，按逆序排放</strong><br>2.NULL值列表：处理过程是这样的，先统计表中哪些列允许存储NULL值(主键列、被NOT NULL修饰的列都是不可以存储NULL值的)，所以在统计的时候不会把这些列算进去，接着如果有的列可以存储NULL值，那么就需要NULL值列表，将每个允许存储NULL的列对应一个二进制位（为1代表该列值为NULL，为0代表不为NULL），其次MySQL规定NULL值列表必须用整数个字节的位表示，如果使用的二进制位个数不是整数个字节，则在字节的高位补0<br>3.记录头信息：它是由固定的5个字节组成，不同位代表不同意思<br><img src=\"/images/5_2.jpg\" alt=\"QQ截图20221205161836.png\"></p>\n</li>\n<li><p>记录的真实数据<br>MySQL会为每个记录默认的添加一些列（也称为隐藏列），具体的列如下：<br><img src=\"/images/5_3.jpg\" alt=\"QQ截图20221205162406.png\"><br>InnoDB表对主键的生成策略:优先使用用户自定义主键作为主键，如果用户没有定义主键，则选取一个Unique键作为主键，如果表中连Unique键都没有定义的化，则InnoDB会为表默认添加一个名为row_id的隐藏列作为主键</p>\n</li>\n</ul>\n<h3 id=\"Redundant行格式\"><a href=\"#Redundant行格式\" class=\"headerlink\" title=\"Redundant行格式\"></a>Redundant行格式</h3><p><img src=\"/images/5_4.jpg\" alt=\"QQ截图20221207112201.png\"></p>\n<ul>\n<li><p>记录的额外信息<br>1.字段长度偏移列表：与compact行格式相比，没有了变长两个字，多了偏移两个字，Redundant的行格式会把该条记录中所有（包括隐藏列）的长度信息都按照逆序存储到字段长度偏移列表。同时Redundant的行格式是按照两个相邻数值的差值来计算各个列值的长度。<br><img src=\"/images/5_5/jpg\" alt=\"QQ截图20221207115628.png\"></p>\n</li>\n<li><p>记录头信息<br><img src=\"/images/5_6.jpg\" alt=\"QQ截图20221207113712.png\"><br><img src=\"/images/5_7.jpg\" alt=\"QQ截图20221207113735.png\"></p>\n</li>\n</ul>\n<p>对于Compact和Reduntant行格式来说，如果某一列中的数据非常多的话，在本记录的真实数据处只会存储该列的前768个字节的数据和一个指向其它页的地址，然后把剩下的数据存放到其它页中，这个过程叫做<strong>行溢出，存储超出768字节的那些页也被称为溢出页</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"InnoDB页简介\"><a href=\"#InnoDB页简介\" class=\"headerlink\" title=\"InnoDB页简介\"></a>InnoDB页简介</h1><blockquote>\n<p>InnoDB是一个将表中的数据存储到磁盘上的存储引擎。由于磁盘IO和内存IO速度差了几个量级，InnoDB采取的方式是：<strong>将数据划分为若干个页，以页作为磁盘和内存之间的交互的基本单位，InnoDB中页的大小一般为16KB</strong>。</p>\n</blockquote>\n<h1 id=\"InnoDB行格式\"><a href=\"#InnoDB行格式\" class=\"headerlink\" title=\"InnoDB行格式\"></a>InnoDB行格式</h1><blockquote>\n<p>我们平时是以记录为单位来向表中插入数据的，这些记录在磁盘上的存放方式也被称为<strong>行格式</strong>或者<strong>记录格式</strong></p>\n</blockquote>\n<h3 id=\"指定行格式的语法\"><a href=\"#指定行格式的语法\" class=\"headerlink\" title=\"指定行格式的语法\"></a>指定行格式的语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE 表名 (列的信息) ROW_FORMAT=行格式名称</span><br><span class=\"line\">    </span><br><span class=\"line\">ALTER TABLE 表名 ROW_FORMAT=行格式名称</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"COMPACT行格式\"><a href=\"#COMPACT行格式\" class=\"headerlink\" title=\"COMPACT行格式\"></a>COMPACT行格式</h3><p><img src=\"/images/5_1.jpg\" alt=\"QQ截图20221205160357.png\"></p>\n<p>一条完整的记录其实可以被分为记录的额外信息和记录的真实数据两大部分。</p>\n<ul>\n<li><p>记录的额外信息：服务器为了描述这条记录而不得不添加的一些信息，分为3类，变长字段长度列表、NULL值列表、记录头信息<br>1.变长字段长度列表：MySQL支持一些变长的数据类型，比如VARCHAR(M)、VARBINARY(M)、各种TEXT类型，各种BLOB类型，这些变长字段占用的存储空间分为两部分（真正的数据内容和占用的字节数），对于CHAR(M）类型的列来说，当列采用的是定长字符集时，该列占用的字节数不会被加到变长字段长度列表，而如果采用变长字符集时，该列占用的字节数也会被加到变长字段长度列表<br><strong>在COMPACT行格式中，把所有的变长字段的真实数据占用的字节长度都存放在记录的开头部位，从而形成一个变长字段长度列表，按逆序排放</strong><br>2.NULL值列表：处理过程是这样的，先统计表中哪些列允许存储NULL值(主键列、被NOT NULL修饰的列都是不可以存储NULL值的)，所以在统计的时候不会把这些列算进去，接着如果有的列可以存储NULL值，那么就需要NULL值列表，将每个允许存储NULL的列对应一个二进制位（为1代表该列值为NULL，为0代表不为NULL），其次MySQL规定NULL值列表必须用整数个字节的位表示，如果使用的二进制位个数不是整数个字节，则在字节的高位补0<br>3.记录头信息：它是由固定的5个字节组成，不同位代表不同意思<br><img src=\"/images/5_2.jpg\" alt=\"QQ截图20221205161836.png\"></p>\n</li>\n<li><p>记录的真实数据<br>MySQL会为每个记录默认的添加一些列（也称为隐藏列），具体的列如下：<br><img src=\"/images/5_3.jpg\" alt=\"QQ截图20221205162406.png\"><br>InnoDB表对主键的生成策略:优先使用用户自定义主键作为主键，如果用户没有定义主键，则选取一个Unique键作为主键，如果表中连Unique键都没有定义的化，则InnoDB会为表默认添加一个名为row_id的隐藏列作为主键</p>\n</li>\n</ul>\n<h3 id=\"Redundant行格式\"><a href=\"#Redundant行格式\" class=\"headerlink\" title=\"Redundant行格式\"></a>Redundant行格式</h3><p><img src=\"/images/5_4.jpg\" alt=\"QQ截图20221207112201.png\"></p>\n<ul>\n<li><p>记录的额外信息<br>1.字段长度偏移列表：与compact行格式相比，没有了变长两个字，多了偏移两个字，Redundant的行格式会把该条记录中所有（包括隐藏列）的长度信息都按照逆序存储到字段长度偏移列表。同时Redundant的行格式是按照两个相邻数值的差值来计算各个列值的长度。<br><img src=\"/images/5_5/jpg\" alt=\"QQ截图20221207115628.png\"></p>\n</li>\n<li><p>记录头信息<br><img src=\"/images/5_6.jpg\" alt=\"QQ截图20221207113712.png\"><br><img src=\"/images/5_7.jpg\" alt=\"QQ截图20221207113735.png\"></p>\n</li>\n</ul>\n<p>对于Compact和Reduntant行格式来说，如果某一列中的数据非常多的话，在本记录的真实数据处只会存储该列的前768个字节的数据和一个指向其它页的地址，然后把剩下的数据存放到其它页中，这个过程叫做<strong>行溢出，存储超出768字节的那些页也被称为溢出页</strong></p>\n"},{"title":"6.InnoDB数据页结构","date":"2023-05-27T18:18:38.000Z","_content":"## 数据页结构图\n![QQ截图20221212140703.png](images/6_1.jpg)\n\n>每当我们插入一条记录，都会从Free Space部分，也就是尚未使用的存储空间中申请一个记录大小的空间划分到User Records部分，当Free Space部分的空间全部被User Records部分替代掉之后，也就意味着这个页使用完了，如果还有新的记录插入的话，就需要去申请新的页了\n\n>为了更好的管理在User Records中的这些记录，行格式中的记录头信息至关重要，以下为compact行格式中的记录头信息\n\n![QQ截图20221216113033.png](images/6_2.jpg)\n\n## 页目录（Page Directory)\n1.将所有正常的记录（包括最大和最小记录，不包括标记为已删除的记录）划分为几个组。\n2.每个组的最后一条记录（也就是组内最大的那条记录）的头信息中的n_owned属性表示该记录拥有多少条记录，也就是该组内共有几条记录。\n3.将每个组的最后一条记录的地址偏移量单独提取出来按顺序存储到靠近页的尾部的地方，这个地方就是所谓的Page Directory，也就是页目录（此时应该返回头看看页面各个部分的图）。页面目录中的这些地址偏移量被称为槽（英文名：Slot），所以这个页面目录就是由槽组成的。\n\n![QQ截图20221216113857.png](images/6_3.jpg)\n\n>对于最小记录所在的分组只能有 1 条记录，最大记录所在的分组拥有的记录条数只能在 1~8 条之间，剩下的分组中记录的条数范围只能在是 4~8 条之间。所以分组是按照下面的步骤进行的：\n\n- 初始情况下一个数据页里只有最小记录和最大记录两条记录，它们分属于两个分组。\n- 之后每插入一条记录，都会从页目录中找到主键值比本记录的主键值大并且差值最小的槽，然后把该槽对应的记录的n_owned值加1，表示本组内又添加了一条记录，直到该组中的记录数等于8个\n- 在一个组中的记录数等于8个后再插入一条记录时，会将组中的记录拆分成两个组，一个组中4条记录，另一个5条记录。这个过程会在页目录中新增一个槽来记录这个新增分组中最大的那条记录的偏移量。\n\n在一个数据页中查找指定主键值的记录的过程分为两步：\n1.通过二分法确定该记录所在的槽，并找到该槽中主键值最小的那条记录。\n2.通过记录的next_record属性遍历该槽所在的组中的各个记录。\n\n## 页面头部(Page Header)\n![QQ截图20221216114601.png](images/6_4.jpg)\n\n## 文件头部（File Header)\n![QQ截图20221216114854.png](images/6_5.jpg)\n- FIL_PAGE_TYPE 页的类型\n![QQ截图20221216115011.png](images/6_6.jpg)\n- FIL_PAGE_PREV和FIL_PAGE_NEXT\nInnoDB都是以页为单位存放数据的，有时候我们存放某种类型的数据占用的空间非常大（比方说一张表中可以有成千上万条记录），InnoDB可能不可以一次性为这么多数据分配一个非常大的存储空间，如果分散到多个不连续的页中存储的话需要把这些页关联起来，FIL_PAGE_PREV和FIL_PAGE_NEXT就分别代表本页的上一个和下一个页的页号。\n\n## FILE TAILER\n\nInnoDB会把数据存储到磁盘上，操作数据时，需要以页为单位将数据移动到内存中，如果该页中的数据在内存中被修改了，那么在修改后的某个时间需要把数据同步到磁盘中。但是在同步了一半的时候中断电了咋办?\n-  前4个字节代表页的校验和\n>这个部分是和File Header中的校验和相对应的。每当一个页面在内存中修改了，在同步之前就要把它的校验和算出来，因为File Header在页面的前面，所以校验和会被首先同步到磁盘，当完全写完时，校验和也会被写到页的尾部，如果完全同步成功，则页的首部和尾部的校验和应该是一致的。如果写了一半儿断电了，那么在File Header中的校验和就代表着已经修改过的页，而在File Trialer中的校验和代表着原先的页，二者不同则意味着同步中间出了错。\n- 后4个字节代表页面被最后修改时对应的日志序列位置（LSN）\n> 这个部分也是为了校验页的完整性的，只不过我们目前还没说LSN是个什么意思，所以大家可以先不用管这个属性。这个File Trailer与File Header类似，都是所有类型的页通用的。","source":"_posts/6-InnoDB数据页结构.md","raw":"---\ntitle: 6.InnoDB数据页结构\ndate: 2023-05-27 14:18:38\ntags: [MySQL,MySQL是怎样运行的]\ncategories: 数据库\n---\n## 数据页结构图\n![QQ截图20221212140703.png](images/6_1.jpg)\n\n>每当我们插入一条记录，都会从Free Space部分，也就是尚未使用的存储空间中申请一个记录大小的空间划分到User Records部分，当Free Space部分的空间全部被User Records部分替代掉之后，也就意味着这个页使用完了，如果还有新的记录插入的话，就需要去申请新的页了\n\n>为了更好的管理在User Records中的这些记录，行格式中的记录头信息至关重要，以下为compact行格式中的记录头信息\n\n![QQ截图20221216113033.png](images/6_2.jpg)\n\n## 页目录（Page Directory)\n1.将所有正常的记录（包括最大和最小记录，不包括标记为已删除的记录）划分为几个组。\n2.每个组的最后一条记录（也就是组内最大的那条记录）的头信息中的n_owned属性表示该记录拥有多少条记录，也就是该组内共有几条记录。\n3.将每个组的最后一条记录的地址偏移量单独提取出来按顺序存储到靠近页的尾部的地方，这个地方就是所谓的Page Directory，也就是页目录（此时应该返回头看看页面各个部分的图）。页面目录中的这些地址偏移量被称为槽（英文名：Slot），所以这个页面目录就是由槽组成的。\n\n![QQ截图20221216113857.png](images/6_3.jpg)\n\n>对于最小记录所在的分组只能有 1 条记录，最大记录所在的分组拥有的记录条数只能在 1~8 条之间，剩下的分组中记录的条数范围只能在是 4~8 条之间。所以分组是按照下面的步骤进行的：\n\n- 初始情况下一个数据页里只有最小记录和最大记录两条记录，它们分属于两个分组。\n- 之后每插入一条记录，都会从页目录中找到主键值比本记录的主键值大并且差值最小的槽，然后把该槽对应的记录的n_owned值加1，表示本组内又添加了一条记录，直到该组中的记录数等于8个\n- 在一个组中的记录数等于8个后再插入一条记录时，会将组中的记录拆分成两个组，一个组中4条记录，另一个5条记录。这个过程会在页目录中新增一个槽来记录这个新增分组中最大的那条记录的偏移量。\n\n在一个数据页中查找指定主键值的记录的过程分为两步：\n1.通过二分法确定该记录所在的槽，并找到该槽中主键值最小的那条记录。\n2.通过记录的next_record属性遍历该槽所在的组中的各个记录。\n\n## 页面头部(Page Header)\n![QQ截图20221216114601.png](images/6_4.jpg)\n\n## 文件头部（File Header)\n![QQ截图20221216114854.png](images/6_5.jpg)\n- FIL_PAGE_TYPE 页的类型\n![QQ截图20221216115011.png](images/6_6.jpg)\n- FIL_PAGE_PREV和FIL_PAGE_NEXT\nInnoDB都是以页为单位存放数据的，有时候我们存放某种类型的数据占用的空间非常大（比方说一张表中可以有成千上万条记录），InnoDB可能不可以一次性为这么多数据分配一个非常大的存储空间，如果分散到多个不连续的页中存储的话需要把这些页关联起来，FIL_PAGE_PREV和FIL_PAGE_NEXT就分别代表本页的上一个和下一个页的页号。\n\n## FILE TAILER\n\nInnoDB会把数据存储到磁盘上，操作数据时，需要以页为单位将数据移动到内存中，如果该页中的数据在内存中被修改了，那么在修改后的某个时间需要把数据同步到磁盘中。但是在同步了一半的时候中断电了咋办?\n-  前4个字节代表页的校验和\n>这个部分是和File Header中的校验和相对应的。每当一个页面在内存中修改了，在同步之前就要把它的校验和算出来，因为File Header在页面的前面，所以校验和会被首先同步到磁盘，当完全写完时，校验和也会被写到页的尾部，如果完全同步成功，则页的首部和尾部的校验和应该是一致的。如果写了一半儿断电了，那么在File Header中的校验和就代表着已经修改过的页，而在File Trialer中的校验和代表着原先的页，二者不同则意味着同步中间出了错。\n- 后4个字节代表页面被最后修改时对应的日志序列位置（LSN）\n> 这个部分也是为了校验页的完整性的，只不过我们目前还没说LSN是个什么意思，所以大家可以先不用管这个属性。这个File Trailer与File Header类似，都是所有类型的页通用的。","slug":"6-InnoDB数据页结构","published":1,"updated":"2023-10-01T02:55:45.143Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cln6ws35y000x5gi5f4v6h4hw","content":"<h2 id=\"数据页结构图\"><a href=\"#数据页结构图\" class=\"headerlink\" title=\"数据页结构图\"></a>数据页结构图</h2><p><img src=\"/images/6_1.jpg\" alt=\"QQ截图20221212140703.png\"></p>\n<blockquote>\n<p>每当我们插入一条记录，都会从Free Space部分，也就是尚未使用的存储空间中申请一个记录大小的空间划分到User Records部分，当Free Space部分的空间全部被User Records部分替代掉之后，也就意味着这个页使用完了，如果还有新的记录插入的话，就需要去申请新的页了</p>\n</blockquote>\n<blockquote>\n<p>为了更好的管理在User Records中的这些记录，行格式中的记录头信息至关重要，以下为compact行格式中的记录头信息</p>\n</blockquote>\n<p><img src=\"/images/6_2.jpg\" alt=\"QQ截图20221216113033.png\"></p>\n<h2 id=\"页目录（Page-Directory\"><a href=\"#页目录（Page-Directory\" class=\"headerlink\" title=\"页目录（Page Directory)\"></a>页目录（Page Directory)</h2><p>1.将所有正常的记录（包括最大和最小记录，不包括标记为已删除的记录）划分为几个组。<br>2.每个组的最后一条记录（也就是组内最大的那条记录）的头信息中的n_owned属性表示该记录拥有多少条记录，也就是该组内共有几条记录。<br>3.将每个组的最后一条记录的地址偏移量单独提取出来按顺序存储到靠近页的尾部的地方，这个地方就是所谓的Page Directory，也就是页目录（此时应该返回头看看页面各个部分的图）。页面目录中的这些地址偏移量被称为槽（英文名：Slot），所以这个页面目录就是由槽组成的。</p>\n<p><img src=\"/images/6_3.jpg\" alt=\"QQ截图20221216113857.png\"></p>\n<blockquote>\n<p>对于最小记录所在的分组只能有 1 条记录，最大记录所在的分组拥有的记录条数只能在 1<del>8 条之间，剩下的分组中记录的条数范围只能在是 4</del>8 条之间。所以分组是按照下面的步骤进行的：</p>\n</blockquote>\n<ul>\n<li>初始情况下一个数据页里只有最小记录和最大记录两条记录，它们分属于两个分组。</li>\n<li>之后每插入一条记录，都会从页目录中找到主键值比本记录的主键值大并且差值最小的槽，然后把该槽对应的记录的n_owned值加1，表示本组内又添加了一条记录，直到该组中的记录数等于8个</li>\n<li>在一个组中的记录数等于8个后再插入一条记录时，会将组中的记录拆分成两个组，一个组中4条记录，另一个5条记录。这个过程会在页目录中新增一个槽来记录这个新增分组中最大的那条记录的偏移量。</li>\n</ul>\n<p>在一个数据页中查找指定主键值的记录的过程分为两步：<br>1.通过二分法确定该记录所在的槽，并找到该槽中主键值最小的那条记录。<br>2.通过记录的next_record属性遍历该槽所在的组中的各个记录。</p>\n<h2 id=\"页面头部-Page-Header\"><a href=\"#页面头部-Page-Header\" class=\"headerlink\" title=\"页面头部(Page Header)\"></a>页面头部(Page Header)</h2><p><img src=\"/images/6_4.jpg\" alt=\"QQ截图20221216114601.png\"></p>\n<h2 id=\"文件头部（File-Header\"><a href=\"#文件头部（File-Header\" class=\"headerlink\" title=\"文件头部（File Header)\"></a>文件头部（File Header)</h2><p><img src=\"/images/6_5.jpg\" alt=\"QQ截图20221216114854.png\"></p>\n<ul>\n<li>FIL_PAGE_TYPE 页的类型<br><img src=\"/images/6_6.jpg\" alt=\"QQ截图20221216115011.png\"></li>\n<li>FIL_PAGE_PREV和FIL_PAGE_NEXT<br>InnoDB都是以页为单位存放数据的，有时候我们存放某种类型的数据占用的空间非常大（比方说一张表中可以有成千上万条记录），InnoDB可能不可以一次性为这么多数据分配一个非常大的存储空间，如果分散到多个不连续的页中存储的话需要把这些页关联起来，FIL_PAGE_PREV和FIL_PAGE_NEXT就分别代表本页的上一个和下一个页的页号。</li>\n</ul>\n<h2 id=\"FILE-TAILER\"><a href=\"#FILE-TAILER\" class=\"headerlink\" title=\"FILE TAILER\"></a>FILE TAILER</h2><p>InnoDB会把数据存储到磁盘上，操作数据时，需要以页为单位将数据移动到内存中，如果该页中的数据在内存中被修改了，那么在修改后的某个时间需要把数据同步到磁盘中。但是在同步了一半的时候中断电了咋办?</p>\n<ul>\n<li>前4个字节代表页的校验和<blockquote>\n<p>这个部分是和File Header中的校验和相对应的。每当一个页面在内存中修改了，在同步之前就要把它的校验和算出来，因为File Header在页面的前面，所以校验和会被首先同步到磁盘，当完全写完时，校验和也会被写到页的尾部，如果完全同步成功，则页的首部和尾部的校验和应该是一致的。如果写了一半儿断电了，那么在File Header中的校验和就代表着已经修改过的页，而在File Trialer中的校验和代表着原先的页，二者不同则意味着同步中间出了错。</p>\n</blockquote>\n</li>\n<li>后4个字节代表页面被最后修改时对应的日志序列位置（LSN）<blockquote>\n<p>这个部分也是为了校验页的完整性的，只不过我们目前还没说LSN是个什么意思，所以大家可以先不用管这个属性。这个File Trailer与File Header类似，都是所有类型的页通用的。</p>\n</blockquote>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"数据页结构图\"><a href=\"#数据页结构图\" class=\"headerlink\" title=\"数据页结构图\"></a>数据页结构图</h2><p><img src=\"/images/6_1.jpg\" alt=\"QQ截图20221212140703.png\"></p>\n<blockquote>\n<p>每当我们插入一条记录，都会从Free Space部分，也就是尚未使用的存储空间中申请一个记录大小的空间划分到User Records部分，当Free Space部分的空间全部被User Records部分替代掉之后，也就意味着这个页使用完了，如果还有新的记录插入的话，就需要去申请新的页了</p>\n</blockquote>\n<blockquote>\n<p>为了更好的管理在User Records中的这些记录，行格式中的记录头信息至关重要，以下为compact行格式中的记录头信息</p>\n</blockquote>\n<p><img src=\"/images/6_2.jpg\" alt=\"QQ截图20221216113033.png\"></p>\n<h2 id=\"页目录（Page-Directory\"><a href=\"#页目录（Page-Directory\" class=\"headerlink\" title=\"页目录（Page Directory)\"></a>页目录（Page Directory)</h2><p>1.将所有正常的记录（包括最大和最小记录，不包括标记为已删除的记录）划分为几个组。<br>2.每个组的最后一条记录（也就是组内最大的那条记录）的头信息中的n_owned属性表示该记录拥有多少条记录，也就是该组内共有几条记录。<br>3.将每个组的最后一条记录的地址偏移量单独提取出来按顺序存储到靠近页的尾部的地方，这个地方就是所谓的Page Directory，也就是页目录（此时应该返回头看看页面各个部分的图）。页面目录中的这些地址偏移量被称为槽（英文名：Slot），所以这个页面目录就是由槽组成的。</p>\n<p><img src=\"/images/6_3.jpg\" alt=\"QQ截图20221216113857.png\"></p>\n<blockquote>\n<p>对于最小记录所在的分组只能有 1 条记录，最大记录所在的分组拥有的记录条数只能在 1<del>8 条之间，剩下的分组中记录的条数范围只能在是 4</del>8 条之间。所以分组是按照下面的步骤进行的：</p>\n</blockquote>\n<ul>\n<li>初始情况下一个数据页里只有最小记录和最大记录两条记录，它们分属于两个分组。</li>\n<li>之后每插入一条记录，都会从页目录中找到主键值比本记录的主键值大并且差值最小的槽，然后把该槽对应的记录的n_owned值加1，表示本组内又添加了一条记录，直到该组中的记录数等于8个</li>\n<li>在一个组中的记录数等于8个后再插入一条记录时，会将组中的记录拆分成两个组，一个组中4条记录，另一个5条记录。这个过程会在页目录中新增一个槽来记录这个新增分组中最大的那条记录的偏移量。</li>\n</ul>\n<p>在一个数据页中查找指定主键值的记录的过程分为两步：<br>1.通过二分法确定该记录所在的槽，并找到该槽中主键值最小的那条记录。<br>2.通过记录的next_record属性遍历该槽所在的组中的各个记录。</p>\n<h2 id=\"页面头部-Page-Header\"><a href=\"#页面头部-Page-Header\" class=\"headerlink\" title=\"页面头部(Page Header)\"></a>页面头部(Page Header)</h2><p><img src=\"/images/6_4.jpg\" alt=\"QQ截图20221216114601.png\"></p>\n<h2 id=\"文件头部（File-Header\"><a href=\"#文件头部（File-Header\" class=\"headerlink\" title=\"文件头部（File Header)\"></a>文件头部（File Header)</h2><p><img src=\"/images/6_5.jpg\" alt=\"QQ截图20221216114854.png\"></p>\n<ul>\n<li>FIL_PAGE_TYPE 页的类型<br><img src=\"/images/6_6.jpg\" alt=\"QQ截图20221216115011.png\"></li>\n<li>FIL_PAGE_PREV和FIL_PAGE_NEXT<br>InnoDB都是以页为单位存放数据的，有时候我们存放某种类型的数据占用的空间非常大（比方说一张表中可以有成千上万条记录），InnoDB可能不可以一次性为这么多数据分配一个非常大的存储空间，如果分散到多个不连续的页中存储的话需要把这些页关联起来，FIL_PAGE_PREV和FIL_PAGE_NEXT就分别代表本页的上一个和下一个页的页号。</li>\n</ul>\n<h2 id=\"FILE-TAILER\"><a href=\"#FILE-TAILER\" class=\"headerlink\" title=\"FILE TAILER\"></a>FILE TAILER</h2><p>InnoDB会把数据存储到磁盘上，操作数据时，需要以页为单位将数据移动到内存中，如果该页中的数据在内存中被修改了，那么在修改后的某个时间需要把数据同步到磁盘中。但是在同步了一半的时候中断电了咋办?</p>\n<ul>\n<li>前4个字节代表页的校验和<blockquote>\n<p>这个部分是和File Header中的校验和相对应的。每当一个页面在内存中修改了，在同步之前就要把它的校验和算出来，因为File Header在页面的前面，所以校验和会被首先同步到磁盘，当完全写完时，校验和也会被写到页的尾部，如果完全同步成功，则页的首部和尾部的校验和应该是一致的。如果写了一半儿断电了，那么在File Header中的校验和就代表着已经修改过的页，而在File Trialer中的校验和代表着原先的页，二者不同则意味着同步中间出了错。</p>\n</blockquote>\n</li>\n<li>后4个字节代表页面被最后修改时对应的日志序列位置（LSN）<blockquote>\n<p>这个部分也是为了校验页的完整性的，只不过我们目前还没说LSN是个什么意思，所以大家可以先不用管这个属性。这个File Trailer与File Header类似，都是所有类型的页通用的。</p>\n</blockquote>\n</li>\n</ul>\n"},{"title":"7.B+树索引","date":"2023-05-27T18:19:18.000Z","_content":"\n# 在没有索引的请况下：\n### 在一个页中查找\n- 以主键为搜索条件\n  可以在页目录中使用二分法快速定位到对应的槽，然后再遍历该槽对应分组中的记录即可快速找到指定的记录。\n- 以其它列为搜索条件\n  这种情况下只能从最小记录开始依次遍历单链表中的每条记录，然后对比每条记录是不是符合搜索条件。\n###在很多个页中查找\n>分为两个步骤：\n1.定位到记录所在的页\n2.从所在的页内中查找相应的记录\n\n由于我们并不能快速的定位到记录所在的页，所以只能从第一个页沿着双向链表一直往下找，在每一个页中根据我们刚刚介绍过的查找方式去查找指定的记录,当然这种方法是非常耗时的\n\n# 索引查找\n\n一个简单的索引方案\n- 下一个数据页中用户记录的主键值必须大于上一个页中用户记录的主键值\n- 给所有页建立一个目录项，每个页对应一个目录项，每个目录项包括下面两个部分（页的用户记录中最小的主键值，我们用key来表示。页号，我们用page_no表示。）\n\nInnoDB中的索引方案\n- InnoDB是使用页来作为管理存储空间的基本单位，也就是最多能保证16KB的连续存储空间，而随着表中记录数量的增多，需要非常大的连续的存储空间才能把所有的目录项都放下，这对记录数量非常多的表是不现实的。\n- 我们时常会对记录进行增删，假设我们把页28中的记录都删除了，页28也就没有存在的必要了，那意味着目录项2也就没有存在的必要了，这就需要把目录项2后的目录项都向前移动一下，这种牵一发而动全身的设计不是什么好主意～\n\n所以InnoDB复用了之前存储用户记录的数据页来存储目录项，为了和用户记录做一下区分，我们把这些用来表示目录项的记录称为目录项记录。\nInnoDB就是通过记录头信息中的record_type来进行区分一条普通的记录是普通用户记录还是目录项记录\n\n当为这些存储目录项记录的页再生成一个更高级的目录，就像是一个多级目录一样，大目录里嵌套小目录，小目录里才是实际的数据，随着表中记录的增加，这个目录的层级会继续增加，如果简化一下，那么我们可以用下面这个图来描述它：\n![QQ截图20221216141803.png](images/7_1.jpg)\n一般情况下，我们用到的B+树都不会超过4层，那我们通过主键值去查找某条记录最多只需要做4个页面内的查找（查找3个目录项页和一个用户记录页），又因为在每个页面内有所谓的Page Directory（页目录），所以在页面内也可以通过二分法实现快速定位记录\n\n### 聚簇索引\n我们上面介绍的B+树本身就是一个目录，或者说本身就是一个索引。它有两个特点：\n\n1.使用记录主键值的大小进行记录和页的排序，这包括三个方面的含义：\n- 页内的记录是按照主键的大小顺序排成一个单向链表。\n- 各个存放用户记录的页也是根据页中用户记录的主键大小顺序排成一个双向链表。\n- 存放目录项记录的页分为不同的层次，在同一层次中的页也是根据页中目录项记录的主键大小顺序排成一个双向链表。\n\n2.B+树的叶子节点存储的是完整的用户记录。\n- 所谓完整的用户记录，就是指这个记录中存储了所有列的值（包括隐藏列）。\n\n具有以上两种特性的B+树称为聚簇索引，所有完整的用户记录都存放在这个聚簇索引的叶子节点处。这种索引不需要通过使用INDEX语句去创建。\n\n### 二级索引（辅助索引）\n上面介绍的聚簇索引只能在搜索条件是主键值时才能发挥作用，因为B+树中的数据都是按照主键进行排序的。如果想以别的列作为搜索条件，可以多建立几棵B+树\n在查找数据的过程中，查找完二级索引后只能获得主键值，仍然需要到聚簇索引中再查一遍，这个过程称为回表\n\n### 联合索引\n我们页可以同时以多个列的大小作为排序规则，也就是同时为多个列建立索引，联合索引的本质上也是一个二级索引。\n\n\n# B+树索引注意事项\n### 根页面万年不动窝\n- 每当为某个表创建一个B+树索引（聚簇索引不是人为创建的，默认就有）的时候，都会为这个索引创建一个根节点页面。最开始表中没有数据的时候，每个B+树索引对应的根节点中既没有用户记录，也没有目录项记录\n- 随后向表中插入用户记录时，先把用户记录存储到这个根节点中\n- 当根节点中的可用空间用完时继续插入记录，此时会将根节点中的所有记录复制到一个新的分配页，然后再对这个新页进行页分裂的操作，根节点升级为存储目录项记录的页。\n\n### 内节点中目录项记录的唯一性\n\n### 一个页面最少存储2条记录\n\n# MyISAM中的索引方案\n将索引和数据分开存储\n- 将表中的记录按照记录的插入顺序单独村粗在一个文件中，称之为数据文件。可以通过行号快速访问到一条记录\n- 会将索引信息另外存储到一个称为索引文件的另一个文件中。MyISAM会单独为表的主键创建一个索引，只不过在索引的叶子节点中存储的不是完整的用户记录，而是主键值 + 行号 的组合。先通过索引找到行号，再通过行号去找到对应的记录\n- 如果有需要的话，我们也可以对其它的列分别建立索引或者建立联合索引，原理和InnoDB中的索引差不多，不过在叶子节点处存储的是相应的列 + 行号。这些索引也全部都是二级索引。\n\n# MySQL中创建和删除索引的语句\n我们可以在创建表的时候指定需要建立索引的单个列或者建立联合索引的多个列：\n```\nCREATE TALBE 表名 (\n    各种列的信息 ··· , \n    [KEY|INDEX] 索引名 (需要被索引的单个列或多个列)\n)\n```\n```\nALTER TABLE 表名 ADD [INDEX|KEY] 索引名 (需要被索引的单个列或多个列);\nALTER TABLE 表名 DROP [INDEX|KEY] 索引名;\n```","source":"_posts/7-B-树索引.md","raw":"---\ntitle: 7.B+树索引\ndate: 2023-05-27 14:19:18\ntags: [MySQL,MySQL是怎样运行的]\ncategories: 数据库\n---\n\n# 在没有索引的请况下：\n### 在一个页中查找\n- 以主键为搜索条件\n  可以在页目录中使用二分法快速定位到对应的槽，然后再遍历该槽对应分组中的记录即可快速找到指定的记录。\n- 以其它列为搜索条件\n  这种情况下只能从最小记录开始依次遍历单链表中的每条记录，然后对比每条记录是不是符合搜索条件。\n###在很多个页中查找\n>分为两个步骤：\n1.定位到记录所在的页\n2.从所在的页内中查找相应的记录\n\n由于我们并不能快速的定位到记录所在的页，所以只能从第一个页沿着双向链表一直往下找，在每一个页中根据我们刚刚介绍过的查找方式去查找指定的记录,当然这种方法是非常耗时的\n\n# 索引查找\n\n一个简单的索引方案\n- 下一个数据页中用户记录的主键值必须大于上一个页中用户记录的主键值\n- 给所有页建立一个目录项，每个页对应一个目录项，每个目录项包括下面两个部分（页的用户记录中最小的主键值，我们用key来表示。页号，我们用page_no表示。）\n\nInnoDB中的索引方案\n- InnoDB是使用页来作为管理存储空间的基本单位，也就是最多能保证16KB的连续存储空间，而随着表中记录数量的增多，需要非常大的连续的存储空间才能把所有的目录项都放下，这对记录数量非常多的表是不现实的。\n- 我们时常会对记录进行增删，假设我们把页28中的记录都删除了，页28也就没有存在的必要了，那意味着目录项2也就没有存在的必要了，这就需要把目录项2后的目录项都向前移动一下，这种牵一发而动全身的设计不是什么好主意～\n\n所以InnoDB复用了之前存储用户记录的数据页来存储目录项，为了和用户记录做一下区分，我们把这些用来表示目录项的记录称为目录项记录。\nInnoDB就是通过记录头信息中的record_type来进行区分一条普通的记录是普通用户记录还是目录项记录\n\n当为这些存储目录项记录的页再生成一个更高级的目录，就像是一个多级目录一样，大目录里嵌套小目录，小目录里才是实际的数据，随着表中记录的增加，这个目录的层级会继续增加，如果简化一下，那么我们可以用下面这个图来描述它：\n![QQ截图20221216141803.png](images/7_1.jpg)\n一般情况下，我们用到的B+树都不会超过4层，那我们通过主键值去查找某条记录最多只需要做4个页面内的查找（查找3个目录项页和一个用户记录页），又因为在每个页面内有所谓的Page Directory（页目录），所以在页面内也可以通过二分法实现快速定位记录\n\n### 聚簇索引\n我们上面介绍的B+树本身就是一个目录，或者说本身就是一个索引。它有两个特点：\n\n1.使用记录主键值的大小进行记录和页的排序，这包括三个方面的含义：\n- 页内的记录是按照主键的大小顺序排成一个单向链表。\n- 各个存放用户记录的页也是根据页中用户记录的主键大小顺序排成一个双向链表。\n- 存放目录项记录的页分为不同的层次，在同一层次中的页也是根据页中目录项记录的主键大小顺序排成一个双向链表。\n\n2.B+树的叶子节点存储的是完整的用户记录。\n- 所谓完整的用户记录，就是指这个记录中存储了所有列的值（包括隐藏列）。\n\n具有以上两种特性的B+树称为聚簇索引，所有完整的用户记录都存放在这个聚簇索引的叶子节点处。这种索引不需要通过使用INDEX语句去创建。\n\n### 二级索引（辅助索引）\n上面介绍的聚簇索引只能在搜索条件是主键值时才能发挥作用，因为B+树中的数据都是按照主键进行排序的。如果想以别的列作为搜索条件，可以多建立几棵B+树\n在查找数据的过程中，查找完二级索引后只能获得主键值，仍然需要到聚簇索引中再查一遍，这个过程称为回表\n\n### 联合索引\n我们页可以同时以多个列的大小作为排序规则，也就是同时为多个列建立索引，联合索引的本质上也是一个二级索引。\n\n\n# B+树索引注意事项\n### 根页面万年不动窝\n- 每当为某个表创建一个B+树索引（聚簇索引不是人为创建的，默认就有）的时候，都会为这个索引创建一个根节点页面。最开始表中没有数据的时候，每个B+树索引对应的根节点中既没有用户记录，也没有目录项记录\n- 随后向表中插入用户记录时，先把用户记录存储到这个根节点中\n- 当根节点中的可用空间用完时继续插入记录，此时会将根节点中的所有记录复制到一个新的分配页，然后再对这个新页进行页分裂的操作，根节点升级为存储目录项记录的页。\n\n### 内节点中目录项记录的唯一性\n\n### 一个页面最少存储2条记录\n\n# MyISAM中的索引方案\n将索引和数据分开存储\n- 将表中的记录按照记录的插入顺序单独村粗在一个文件中，称之为数据文件。可以通过行号快速访问到一条记录\n- 会将索引信息另外存储到一个称为索引文件的另一个文件中。MyISAM会单独为表的主键创建一个索引，只不过在索引的叶子节点中存储的不是完整的用户记录，而是主键值 + 行号 的组合。先通过索引找到行号，再通过行号去找到对应的记录\n- 如果有需要的话，我们也可以对其它的列分别建立索引或者建立联合索引，原理和InnoDB中的索引差不多，不过在叶子节点处存储的是相应的列 + 行号。这些索引也全部都是二级索引。\n\n# MySQL中创建和删除索引的语句\n我们可以在创建表的时候指定需要建立索引的单个列或者建立联合索引的多个列：\n```\nCREATE TALBE 表名 (\n    各种列的信息 ··· , \n    [KEY|INDEX] 索引名 (需要被索引的单个列或多个列)\n)\n```\n```\nALTER TABLE 表名 ADD [INDEX|KEY] 索引名 (需要被索引的单个列或多个列);\nALTER TABLE 表名 DROP [INDEX|KEY] 索引名;\n```","slug":"7-B-树索引","published":1,"updated":"2023-10-01T02:55:45.143Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cln6ws35z00105gi57r9p6kq8","content":"<h1 id=\"在没有索引的请况下：\"><a href=\"#在没有索引的请况下：\" class=\"headerlink\" title=\"在没有索引的请况下：\"></a>在没有索引的请况下：</h1><h3 id=\"在一个页中查找\"><a href=\"#在一个页中查找\" class=\"headerlink\" title=\"在一个页中查找\"></a>在一个页中查找</h3><ul>\n<li>以主键为搜索条件<br>可以在页目录中使用二分法快速定位到对应的槽，然后再遍历该槽对应分组中的记录即可快速找到指定的记录。</li>\n<li>以其它列为搜索条件<br>这种情况下只能从最小记录开始依次遍历单链表中的每条记录，然后对比每条记录是不是符合搜索条件。</li>\n</ul>\n<p>###在很多个页中查找</p>\n<blockquote>\n<p>分为两个步骤：<br>1.定位到记录所在的页<br>2.从所在的页内中查找相应的记录</p>\n</blockquote>\n<p>由于我们并不能快速的定位到记录所在的页，所以只能从第一个页沿着双向链表一直往下找，在每一个页中根据我们刚刚介绍过的查找方式去查找指定的记录,当然这种方法是非常耗时的</p>\n<h1 id=\"索引查找\"><a href=\"#索引查找\" class=\"headerlink\" title=\"索引查找\"></a>索引查找</h1><p>一个简单的索引方案</p>\n<ul>\n<li>下一个数据页中用户记录的主键值必须大于上一个页中用户记录的主键值</li>\n<li>给所有页建立一个目录项，每个页对应一个目录项，每个目录项包括下面两个部分（页的用户记录中最小的主键值，我们用key来表示。页号，我们用page_no表示。）</li>\n</ul>\n<p>InnoDB中的索引方案</p>\n<ul>\n<li>InnoDB是使用页来作为管理存储空间的基本单位，也就是最多能保证16KB的连续存储空间，而随着表中记录数量的增多，需要非常大的连续的存储空间才能把所有的目录项都放下，这对记录数量非常多的表是不现实的。</li>\n<li>我们时常会对记录进行增删，假设我们把页28中的记录都删除了，页28也就没有存在的必要了，那意味着目录项2也就没有存在的必要了，这就需要把目录项2后的目录项都向前移动一下，这种牵一发而动全身的设计不是什么好主意～</li>\n</ul>\n<p>所以InnoDB复用了之前存储用户记录的数据页来存储目录项，为了和用户记录做一下区分，我们把这些用来表示目录项的记录称为目录项记录。<br>InnoDB就是通过记录头信息中的record_type来进行区分一条普通的记录是普通用户记录还是目录项记录</p>\n<p>当为这些存储目录项记录的页再生成一个更高级的目录，就像是一个多级目录一样，大目录里嵌套小目录，小目录里才是实际的数据，随着表中记录的增加，这个目录的层级会继续增加，如果简化一下，那么我们可以用下面这个图来描述它：<br><img src=\"/images/7_1.jpg\" alt=\"QQ截图20221216141803.png\"><br>一般情况下，我们用到的B+树都不会超过4层，那我们通过主键值去查找某条记录最多只需要做4个页面内的查找（查找3个目录项页和一个用户记录页），又因为在每个页面内有所谓的Page Directory（页目录），所以在页面内也可以通过二分法实现快速定位记录</p>\n<h3 id=\"聚簇索引\"><a href=\"#聚簇索引\" class=\"headerlink\" title=\"聚簇索引\"></a>聚簇索引</h3><p>我们上面介绍的B+树本身就是一个目录，或者说本身就是一个索引。它有两个特点：</p>\n<p>1.使用记录主键值的大小进行记录和页的排序，这包括三个方面的含义：</p>\n<ul>\n<li>页内的记录是按照主键的大小顺序排成一个单向链表。</li>\n<li>各个存放用户记录的页也是根据页中用户记录的主键大小顺序排成一个双向链表。</li>\n<li>存放目录项记录的页分为不同的层次，在同一层次中的页也是根据页中目录项记录的主键大小顺序排成一个双向链表。</li>\n</ul>\n<p>2.B+树的叶子节点存储的是完整的用户记录。</p>\n<ul>\n<li>所谓完整的用户记录，就是指这个记录中存储了所有列的值（包括隐藏列）。</li>\n</ul>\n<p>具有以上两种特性的B+树称为聚簇索引，所有完整的用户记录都存放在这个聚簇索引的叶子节点处。这种索引不需要通过使用INDEX语句去创建。</p>\n<h3 id=\"二级索引（辅助索引）\"><a href=\"#二级索引（辅助索引）\" class=\"headerlink\" title=\"二级索引（辅助索引）\"></a>二级索引（辅助索引）</h3><p>上面介绍的聚簇索引只能在搜索条件是主键值时才能发挥作用，因为B+树中的数据都是按照主键进行排序的。如果想以别的列作为搜索条件，可以多建立几棵B+树<br>在查找数据的过程中，查找完二级索引后只能获得主键值，仍然需要到聚簇索引中再查一遍，这个过程称为回表</p>\n<h3 id=\"联合索引\"><a href=\"#联合索引\" class=\"headerlink\" title=\"联合索引\"></a>联合索引</h3><p>我们页可以同时以多个列的大小作为排序规则，也就是同时为多个列建立索引，联合索引的本质上也是一个二级索引。</p>\n<h1 id=\"B-树索引注意事项\"><a href=\"#B-树索引注意事项\" class=\"headerlink\" title=\"B+树索引注意事项\"></a>B+树索引注意事项</h1><h3 id=\"根页面万年不动窝\"><a href=\"#根页面万年不动窝\" class=\"headerlink\" title=\"根页面万年不动窝\"></a>根页面万年不动窝</h3><ul>\n<li>每当为某个表创建一个B+树索引（聚簇索引不是人为创建的，默认就有）的时候，都会为这个索引创建一个根节点页面。最开始表中没有数据的时候，每个B+树索引对应的根节点中既没有用户记录，也没有目录项记录</li>\n<li>随后向表中插入用户记录时，先把用户记录存储到这个根节点中</li>\n<li>当根节点中的可用空间用完时继续插入记录，此时会将根节点中的所有记录复制到一个新的分配页，然后再对这个新页进行页分裂的操作，根节点升级为存储目录项记录的页。</li>\n</ul>\n<h3 id=\"内节点中目录项记录的唯一性\"><a href=\"#内节点中目录项记录的唯一性\" class=\"headerlink\" title=\"内节点中目录项记录的唯一性\"></a>内节点中目录项记录的唯一性</h3><h3 id=\"一个页面最少存储2条记录\"><a href=\"#一个页面最少存储2条记录\" class=\"headerlink\" title=\"一个页面最少存储2条记录\"></a>一个页面最少存储2条记录</h3><h1 id=\"MyISAM中的索引方案\"><a href=\"#MyISAM中的索引方案\" class=\"headerlink\" title=\"MyISAM中的索引方案\"></a>MyISAM中的索引方案</h1><p>将索引和数据分开存储</p>\n<ul>\n<li>将表中的记录按照记录的插入顺序单独村粗在一个文件中，称之为数据文件。可以通过行号快速访问到一条记录</li>\n<li>会将索引信息另外存储到一个称为索引文件的另一个文件中。MyISAM会单独为表的主键创建一个索引，只不过在索引的叶子节点中存储的不是完整的用户记录，而是主键值 + 行号 的组合。先通过索引找到行号，再通过行号去找到对应的记录</li>\n<li>如果有需要的话，我们也可以对其它的列分别建立索引或者建立联合索引，原理和InnoDB中的索引差不多，不过在叶子节点处存储的是相应的列 + 行号。这些索引也全部都是二级索引。</li>\n</ul>\n<h1 id=\"MySQL中创建和删除索引的语句\"><a href=\"#MySQL中创建和删除索引的语句\" class=\"headerlink\" title=\"MySQL中创建和删除索引的语句\"></a>MySQL中创建和删除索引的语句</h1><p>我们可以在创建表的时候指定需要建立索引的单个列或者建立联合索引的多个列：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TALBE 表名 (</span><br><span class=\"line\">    各种列的信息 ··· , </span><br><span class=\"line\">    [KEY|INDEX] 索引名 (需要被索引的单个列或多个列)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE 表名 ADD [INDEX|KEY] 索引名 (需要被索引的单个列或多个列);</span><br><span class=\"line\">ALTER TABLE 表名 DROP [INDEX|KEY] 索引名;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"在没有索引的请况下：\"><a href=\"#在没有索引的请况下：\" class=\"headerlink\" title=\"在没有索引的请况下：\"></a>在没有索引的请况下：</h1><h3 id=\"在一个页中查找\"><a href=\"#在一个页中查找\" class=\"headerlink\" title=\"在一个页中查找\"></a>在一个页中查找</h3><ul>\n<li>以主键为搜索条件<br>可以在页目录中使用二分法快速定位到对应的槽，然后再遍历该槽对应分组中的记录即可快速找到指定的记录。</li>\n<li>以其它列为搜索条件<br>这种情况下只能从最小记录开始依次遍历单链表中的每条记录，然后对比每条记录是不是符合搜索条件。</li>\n</ul>\n<p>###在很多个页中查找</p>\n<blockquote>\n<p>分为两个步骤：<br>1.定位到记录所在的页<br>2.从所在的页内中查找相应的记录</p>\n</blockquote>\n<p>由于我们并不能快速的定位到记录所在的页，所以只能从第一个页沿着双向链表一直往下找，在每一个页中根据我们刚刚介绍过的查找方式去查找指定的记录,当然这种方法是非常耗时的</p>\n<h1 id=\"索引查找\"><a href=\"#索引查找\" class=\"headerlink\" title=\"索引查找\"></a>索引查找</h1><p>一个简单的索引方案</p>\n<ul>\n<li>下一个数据页中用户记录的主键值必须大于上一个页中用户记录的主键值</li>\n<li>给所有页建立一个目录项，每个页对应一个目录项，每个目录项包括下面两个部分（页的用户记录中最小的主键值，我们用key来表示。页号，我们用page_no表示。）</li>\n</ul>\n<p>InnoDB中的索引方案</p>\n<ul>\n<li>InnoDB是使用页来作为管理存储空间的基本单位，也就是最多能保证16KB的连续存储空间，而随着表中记录数量的增多，需要非常大的连续的存储空间才能把所有的目录项都放下，这对记录数量非常多的表是不现实的。</li>\n<li>我们时常会对记录进行增删，假设我们把页28中的记录都删除了，页28也就没有存在的必要了，那意味着目录项2也就没有存在的必要了，这就需要把目录项2后的目录项都向前移动一下，这种牵一发而动全身的设计不是什么好主意～</li>\n</ul>\n<p>所以InnoDB复用了之前存储用户记录的数据页来存储目录项，为了和用户记录做一下区分，我们把这些用来表示目录项的记录称为目录项记录。<br>InnoDB就是通过记录头信息中的record_type来进行区分一条普通的记录是普通用户记录还是目录项记录</p>\n<p>当为这些存储目录项记录的页再生成一个更高级的目录，就像是一个多级目录一样，大目录里嵌套小目录，小目录里才是实际的数据，随着表中记录的增加，这个目录的层级会继续增加，如果简化一下，那么我们可以用下面这个图来描述它：<br><img src=\"/images/7_1.jpg\" alt=\"QQ截图20221216141803.png\"><br>一般情况下，我们用到的B+树都不会超过4层，那我们通过主键值去查找某条记录最多只需要做4个页面内的查找（查找3个目录项页和一个用户记录页），又因为在每个页面内有所谓的Page Directory（页目录），所以在页面内也可以通过二分法实现快速定位记录</p>\n<h3 id=\"聚簇索引\"><a href=\"#聚簇索引\" class=\"headerlink\" title=\"聚簇索引\"></a>聚簇索引</h3><p>我们上面介绍的B+树本身就是一个目录，或者说本身就是一个索引。它有两个特点：</p>\n<p>1.使用记录主键值的大小进行记录和页的排序，这包括三个方面的含义：</p>\n<ul>\n<li>页内的记录是按照主键的大小顺序排成一个单向链表。</li>\n<li>各个存放用户记录的页也是根据页中用户记录的主键大小顺序排成一个双向链表。</li>\n<li>存放目录项记录的页分为不同的层次，在同一层次中的页也是根据页中目录项记录的主键大小顺序排成一个双向链表。</li>\n</ul>\n<p>2.B+树的叶子节点存储的是完整的用户记录。</p>\n<ul>\n<li>所谓完整的用户记录，就是指这个记录中存储了所有列的值（包括隐藏列）。</li>\n</ul>\n<p>具有以上两种特性的B+树称为聚簇索引，所有完整的用户记录都存放在这个聚簇索引的叶子节点处。这种索引不需要通过使用INDEX语句去创建。</p>\n<h3 id=\"二级索引（辅助索引）\"><a href=\"#二级索引（辅助索引）\" class=\"headerlink\" title=\"二级索引（辅助索引）\"></a>二级索引（辅助索引）</h3><p>上面介绍的聚簇索引只能在搜索条件是主键值时才能发挥作用，因为B+树中的数据都是按照主键进行排序的。如果想以别的列作为搜索条件，可以多建立几棵B+树<br>在查找数据的过程中，查找完二级索引后只能获得主键值，仍然需要到聚簇索引中再查一遍，这个过程称为回表</p>\n<h3 id=\"联合索引\"><a href=\"#联合索引\" class=\"headerlink\" title=\"联合索引\"></a>联合索引</h3><p>我们页可以同时以多个列的大小作为排序规则，也就是同时为多个列建立索引，联合索引的本质上也是一个二级索引。</p>\n<h1 id=\"B-树索引注意事项\"><a href=\"#B-树索引注意事项\" class=\"headerlink\" title=\"B+树索引注意事项\"></a>B+树索引注意事项</h1><h3 id=\"根页面万年不动窝\"><a href=\"#根页面万年不动窝\" class=\"headerlink\" title=\"根页面万年不动窝\"></a>根页面万年不动窝</h3><ul>\n<li>每当为某个表创建一个B+树索引（聚簇索引不是人为创建的，默认就有）的时候，都会为这个索引创建一个根节点页面。最开始表中没有数据的时候，每个B+树索引对应的根节点中既没有用户记录，也没有目录项记录</li>\n<li>随后向表中插入用户记录时，先把用户记录存储到这个根节点中</li>\n<li>当根节点中的可用空间用完时继续插入记录，此时会将根节点中的所有记录复制到一个新的分配页，然后再对这个新页进行页分裂的操作，根节点升级为存储目录项记录的页。</li>\n</ul>\n<h3 id=\"内节点中目录项记录的唯一性\"><a href=\"#内节点中目录项记录的唯一性\" class=\"headerlink\" title=\"内节点中目录项记录的唯一性\"></a>内节点中目录项记录的唯一性</h3><h3 id=\"一个页面最少存储2条记录\"><a href=\"#一个页面最少存储2条记录\" class=\"headerlink\" title=\"一个页面最少存储2条记录\"></a>一个页面最少存储2条记录</h3><h1 id=\"MyISAM中的索引方案\"><a href=\"#MyISAM中的索引方案\" class=\"headerlink\" title=\"MyISAM中的索引方案\"></a>MyISAM中的索引方案</h1><p>将索引和数据分开存储</p>\n<ul>\n<li>将表中的记录按照记录的插入顺序单独村粗在一个文件中，称之为数据文件。可以通过行号快速访问到一条记录</li>\n<li>会将索引信息另外存储到一个称为索引文件的另一个文件中。MyISAM会单独为表的主键创建一个索引，只不过在索引的叶子节点中存储的不是完整的用户记录，而是主键值 + 行号 的组合。先通过索引找到行号，再通过行号去找到对应的记录</li>\n<li>如果有需要的话，我们也可以对其它的列分别建立索引或者建立联合索引，原理和InnoDB中的索引差不多，不过在叶子节点处存储的是相应的列 + 行号。这些索引也全部都是二级索引。</li>\n</ul>\n<h1 id=\"MySQL中创建和删除索引的语句\"><a href=\"#MySQL中创建和删除索引的语句\" class=\"headerlink\" title=\"MySQL中创建和删除索引的语句\"></a>MySQL中创建和删除索引的语句</h1><p>我们可以在创建表的时候指定需要建立索引的单个列或者建立联合索引的多个列：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TALBE 表名 (</span><br><span class=\"line\">    各种列的信息 ··· , </span><br><span class=\"line\">    [KEY|INDEX] 索引名 (需要被索引的单个列或多个列)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE 表名 ADD [INDEX|KEY] 索引名 (需要被索引的单个列或多个列);</span><br><span class=\"line\">ALTER TABLE 表名 DROP [INDEX|KEY] 索引名;</span><br></pre></td></tr></table></figure>"},{"title":"8.单表访问方法","date":"2023-05-27T18:19:50.000Z","_content":"\n\n> const:\n1.直接利用主键值在聚簇索引中定位对应的用户记录\n2.根据唯一二级索引列来定位一条记录\n\n> ref:\n1.对某个普通的二级索引列与常数进行等值比较\n2.无论是普通二级索引还是唯一二级索引，索引列值为NULL\n3.对于某个包含多个索引列的二级索引来说，只要是最左边的连续索引列是与常数的等值比较\n\n> ref_of_null:\n1.当我们不仅想找出某个二级索引列的值等于某个常数的记录，还想把列的值为NULL的记录也找出来\n\n> range:\n1.利用索引进行范围匹配\n\n> index:\n1.直接遍历二级索引记录\n\n> all:\n1.全表扫描\n\n优化","source":"_posts/8-单表访问方法.md","raw":"---\ntitle: 8.单表访问方法\ndate: 2023-05-27 14:19:50\ntags: [MySQL,MySQL是怎样运行的]\ncategories: 数据库\n---\n\n\n> const:\n1.直接利用主键值在聚簇索引中定位对应的用户记录\n2.根据唯一二级索引列来定位一条记录\n\n> ref:\n1.对某个普通的二级索引列与常数进行等值比较\n2.无论是普通二级索引还是唯一二级索引，索引列值为NULL\n3.对于某个包含多个索引列的二级索引来说，只要是最左边的连续索引列是与常数的等值比较\n\n> ref_of_null:\n1.当我们不仅想找出某个二级索引列的值等于某个常数的记录，还想把列的值为NULL的记录也找出来\n\n> range:\n1.利用索引进行范围匹配\n\n> index:\n1.直接遍历二级索引记录\n\n> all:\n1.全表扫描\n\n优化","slug":"8-单表访问方法","published":1,"updated":"2023-10-01T02:55:45.143Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cln6ws36000145gi57l5ac8yo","content":"<blockquote>\n<p>const:<br>1.直接利用主键值在聚簇索引中定位对应的用户记录<br>2.根据唯一二级索引列来定位一条记录</p>\n</blockquote>\n<blockquote>\n<p>ref:<br>1.对某个普通的二级索引列与常数进行等值比较<br>2.无论是普通二级索引还是唯一二级索引，索引列值为NULL<br>3.对于某个包含多个索引列的二级索引来说，只要是最左边的连续索引列是与常数的等值比较</p>\n</blockquote>\n<blockquote>\n<p>ref_of_null:<br>1.当我们不仅想找出某个二级索引列的值等于某个常数的记录，还想把列的值为NULL的记录也找出来</p>\n</blockquote>\n<blockquote>\n<p>range:<br>1.利用索引进行范围匹配</p>\n</blockquote>\n<blockquote>\n<p>index:<br>1.直接遍历二级索引记录</p>\n</blockquote>\n<blockquote>\n<p>all:<br>1.全表扫描</p>\n</blockquote>\n<p>优化</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>const:<br>1.直接利用主键值在聚簇索引中定位对应的用户记录<br>2.根据唯一二级索引列来定位一条记录</p>\n</blockquote>\n<blockquote>\n<p>ref:<br>1.对某个普通的二级索引列与常数进行等值比较<br>2.无论是普通二级索引还是唯一二级索引，索引列值为NULL<br>3.对于某个包含多个索引列的二级索引来说，只要是最左边的连续索引列是与常数的等值比较</p>\n</blockquote>\n<blockquote>\n<p>ref_of_null:<br>1.当我们不仅想找出某个二级索引列的值等于某个常数的记录，还想把列的值为NULL的记录也找出来</p>\n</blockquote>\n<blockquote>\n<p>range:<br>1.利用索引进行范围匹配</p>\n</blockquote>\n<blockquote>\n<p>index:<br>1.直接遍历二级索引记录</p>\n</blockquote>\n<blockquote>\n<p>all:<br>1.全表扫描</p>\n</blockquote>\n<p>优化</p>\n"},{"title":"9.连接的原理","date":"2023-05-27T18:20:17.000Z","_content":"\n\n### 连接过程简介\n- 涉及单表的条件\n- 涉及两表的条件\n\n1.嵌套循环连接\n2.使用索引加快连接速度\n3.基于块的嵌套循环连接\n","source":"_posts/9-连接的原理.md","raw":"---\ntitle: 9.连接的原理\ndate: 2023-05-27 14:20:17\ntags: [MySQL,MySQL是怎样运行的]\ncategories: 数据库\n---\n\n\n### 连接过程简介\n- 涉及单表的条件\n- 涉及两表的条件\n\n1.嵌套循环连接\n2.使用索引加快连接速度\n3.基于块的嵌套循环连接\n","slug":"9-连接的原理","published":1,"updated":"2023-10-01T02:55:45.143Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cln6ws36100175gi5fhek5d3v","content":"<h3 id=\"连接过程简介\"><a href=\"#连接过程简介\" class=\"headerlink\" title=\"连接过程简介\"></a>连接过程简介</h3><ul>\n<li>涉及单表的条件</li>\n<li>涉及两表的条件</li>\n</ul>\n<p>1.嵌套循环连接<br>2.使用索引加快连接速度<br>3.基于块的嵌套循环连接</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"连接过程简介\"><a href=\"#连接过程简介\" class=\"headerlink\" title=\"连接过程简介\"></a>连接过程简介</h3><ul>\n<li>涉及单表的条件</li>\n<li>涉及两表的条件</li>\n</ul>\n<p>1.嵌套循环连接<br>2.使用索引加快连接速度<br>3.基于块的嵌套循环连接</p>\n"},{"title":"cmake学习","date":"2023-05-28T15:02:55.000Z","_content":"\n语法手册：cmake语法手册及教程_可克的博客-CSDN博客_cmake语法\n\n[哔哩哔哩视频](https://www.bilibili.com/video/BV1vR4y1u77h?spm_id_from=333.337.search-card.all.click)\n\n视频下方有笔记\n\n![图片](images/cmake学习/1.jpg)\n\n\nadd_definitions()添加编译选项\n\n\n\ninclude_directories()将指定目录添加到编译器的头文件搜索路径下\n\n[参考](https://www.jianshu.com/p/e7de3de1b0fa)\n\nadd_library()生成静态库（STATIC)或者动态库（SHARED）\n\nadd_executable()生成可执行文件\n\naux_source_directory(dir VAR) 发现一个目录(dir)下所有的源代码文件并将列表存储在一个变量(VAR)中\n\ntarget_link_libraries( # 目标库 demo # 目标库需要链接的库 ${log-lib} )","source":"_posts/cmake学习.md","raw":"---\ntitle: cmake学习\ndate: 2023-05-28 11:02:55\ntags: cmake\ncategories: cmake\n---\n\n语法手册：cmake语法手册及教程_可克的博客-CSDN博客_cmake语法\n\n[哔哩哔哩视频](https://www.bilibili.com/video/BV1vR4y1u77h?spm_id_from=333.337.search-card.all.click)\n\n视频下方有笔记\n\n![图片](images/cmake学习/1.jpg)\n\n\nadd_definitions()添加编译选项\n\n\n\ninclude_directories()将指定目录添加到编译器的头文件搜索路径下\n\n[参考](https://www.jianshu.com/p/e7de3de1b0fa)\n\nadd_library()生成静态库（STATIC)或者动态库（SHARED）\n\nadd_executable()生成可执行文件\n\naux_source_directory(dir VAR) 发现一个目录(dir)下所有的源代码文件并将列表存储在一个变量(VAR)中\n\ntarget_link_libraries( # 目标库 demo # 目标库需要链接的库 ${log-lib} )","slug":"cmake学习","published":1,"updated":"2023-10-01T02:55:45.143Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cln6ws363001b5gi54r188p0u","content":"<p>语法手册：cmake语法手册及教程_可克的博客-CSDN博客_cmake语法</p>\n<p><a href=\"https://www.bilibili.com/video/BV1vR4y1u77h?spm_id_from=333.337.search-card.all.click\">哔哩哔哩视频</a></p>\n<p>视频下方有笔记</p>\n<p><img src=\"/images/cmake%E5%AD%A6%E4%B9%A0/1.jpg\" alt=\"图片\"></p>\n<p>add_definitions()添加编译选项</p>\n<p>include_directories()将指定目录添加到编译器的头文件搜索路径下</p>\n<p><a href=\"https://www.jianshu.com/p/e7de3de1b0fa\">参考</a></p>\n<p>add_library()生成静态库（STATIC)或者动态库（SHARED）</p>\n<p>add_executable()生成可执行文件</p>\n<p>aux_source_directory(dir VAR) 发现一个目录(dir)下所有的源代码文件并将列表存储在一个变量(VAR)中</p>\n<p>target_link_libraries( # 目标库 demo # 目标库需要链接的库 ${log-lib} )</p>\n","site":{"data":{}},"excerpt":"","more":"<p>语法手册：cmake语法手册及教程_可克的博客-CSDN博客_cmake语法</p>\n<p><a href=\"https://www.bilibili.com/video/BV1vR4y1u77h?spm_id_from=333.337.search-card.all.click\">哔哩哔哩视频</a></p>\n<p>视频下方有笔记</p>\n<p><img src=\"/images/cmake%E5%AD%A6%E4%B9%A0/1.jpg\" alt=\"图片\"></p>\n<p>add_definitions()添加编译选项</p>\n<p>include_directories()将指定目录添加到编译器的头文件搜索路径下</p>\n<p><a href=\"https://www.jianshu.com/p/e7de3de1b0fa\">参考</a></p>\n<p>add_library()生成静态库（STATIC)或者动态库（SHARED）</p>\n<p>add_executable()生成可执行文件</p>\n<p>aux_source_directory(dir VAR) 发现一个目录(dir)下所有的源代码文件并将列表存储在一个变量(VAR)中</p>\n<p>target_link_libraries( # 目标库 demo # 目标库需要链接的库 ${log-lib} )</p>\n"},{"title":"configure命令","date":"2023-05-28T15:06:04.000Z","_content":"\n[参考](https://blog.csdn.net/qq_40941932/article/details/109992151)\n","source":"_posts/configure命令.md","raw":"---\ntitle: configure命令\ndate: 2023-05-28 11:06:04\ntags: configure\ncategories: 随笔\n---\n\n[参考](https://blog.csdn.net/qq_40941932/article/details/109992151)\n","slug":"configure命令","published":1,"updated":"2023-10-01T02:55:45.143Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cln6ws364001e5gi5bikja71v","content":"<p><a href=\"https://blog.csdn.net/qq_40941932/article/details/109992151\">参考</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://blog.csdn.net/qq_40941932/article/details/109992151\">参考</a></p>\n"},{"title":"linux下目录各个文件夹详解","date":"2023-05-28T14:58:33.000Z","_content":"\n[参考](https://blog.csdn.net/qq_39652397/article/details/123794887)\n","source":"_posts/linux下目录各个文件夹详解.md","raw":"---\ntitle: linux下目录各个文件夹详解\ndate: 2023-05-28 10:58:33\ntags: [Linux不同目录详解]\ncategories: Linux\n---\n\n[参考](https://blog.csdn.net/qq_39652397/article/details/123794887)\n","slug":"linux下目录各个文件夹详解","published":1,"updated":"2023-10-01T02:55:45.143Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cln6ws365001j5gi5egpta3x8","content":"<p><a href=\"https://blog.csdn.net/qq_39652397/article/details/123794887\">参考</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://blog.csdn.net/qq_39652397/article/details/123794887\">参考</a></p>\n"},{"title":"linux文件权限和属性","date":"2023-05-28T14:56:48.000Z","_content":"\n如果一个文件被设置了SUID或SGID位，会分别表现在所有者或同组用户的权限的可执行位上。例如：\n\n1、-rwsr-xr-x 表示SUID和所有者权限中可执行位被设置\n\n2、-rwSr–r– 表示SUID被设置，但所有者权限中可执行位没有被设置\n\n3、-rwxr-sr-x 表示SGID和同组用户权限中可执行位被设置\n\n4、-rw-r-Sr– 表示SGID被设置，但同组用户权限中可执行位没有被设置\n\n给文件加SUID和SUID的命令如下：\n\nchmod u+s filename 设置SUID位\n\nchmod u-s filename 去掉SUID设置\n\nchmod g+s filename 设置SGID位\n\nchmod g-s filename 去掉SGID设置\n\n\nSUID属性\n例如/usr/bin/passwd  带有SUID属性 属于root用户 root用户主\n其它用户只有/usr/bin/passwd的可执行权限，在执行这个命令时会暂时获取root权限\n\nSGID属性\n和SUID属性十分相似\n不同的是其它用户在执行有SGID属性的命令时，会暂时获取该程序群组的支持","source":"_posts/linux文件权限和属性.md","raw":"---\ntitle: linux文件权限和属性\ndate: 2023-05-28 10:56:48\ntags: [Linux文件权限]\ncategories: Linux\n---\n\n如果一个文件被设置了SUID或SGID位，会分别表现在所有者或同组用户的权限的可执行位上。例如：\n\n1、-rwsr-xr-x 表示SUID和所有者权限中可执行位被设置\n\n2、-rwSr–r– 表示SUID被设置，但所有者权限中可执行位没有被设置\n\n3、-rwxr-sr-x 表示SGID和同组用户权限中可执行位被设置\n\n4、-rw-r-Sr– 表示SGID被设置，但同组用户权限中可执行位没有被设置\n\n给文件加SUID和SUID的命令如下：\n\nchmod u+s filename 设置SUID位\n\nchmod u-s filename 去掉SUID设置\n\nchmod g+s filename 设置SGID位\n\nchmod g-s filename 去掉SGID设置\n\n\nSUID属性\n例如/usr/bin/passwd  带有SUID属性 属于root用户 root用户主\n其它用户只有/usr/bin/passwd的可执行权限，在执行这个命令时会暂时获取root权限\n\nSGID属性\n和SUID属性十分相似\n不同的是其它用户在执行有SGID属性的命令时，会暂时获取该程序群组的支持","slug":"linux文件权限和属性","published":1,"updated":"2023-10-01T02:55:45.143Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cln6ws366001m5gi54plc52ru","content":"<p>如果一个文件被设置了SUID或SGID位，会分别表现在所有者或同组用户的权限的可执行位上。例如：</p>\n<p>1、-rwsr-xr-x 表示SUID和所有者权限中可执行位被设置</p>\n<p>2、-rwSr–r– 表示SUID被设置，但所有者权限中可执行位没有被设置</p>\n<p>3、-rwxr-sr-x 表示SGID和同组用户权限中可执行位被设置</p>\n<p>4、-rw-r-Sr– 表示SGID被设置，但同组用户权限中可执行位没有被设置</p>\n<p>给文件加SUID和SUID的命令如下：</p>\n<p>chmod u+s filename 设置SUID位</p>\n<p>chmod u-s filename 去掉SUID设置</p>\n<p>chmod g+s filename 设置SGID位</p>\n<p>chmod g-s filename 去掉SGID设置</p>\n<p>SUID属性<br>例如&#x2F;usr&#x2F;bin&#x2F;passwd  带有SUID属性 属于root用户 root用户主<br>其它用户只有&#x2F;usr&#x2F;bin&#x2F;passwd的可执行权限，在执行这个命令时会暂时获取root权限</p>\n<p>SGID属性<br>和SUID属性十分相似<br>不同的是其它用户在执行有SGID属性的命令时，会暂时获取该程序群组的支持</p>\n","site":{"data":{}},"excerpt":"","more":"<p>如果一个文件被设置了SUID或SGID位，会分别表现在所有者或同组用户的权限的可执行位上。例如：</p>\n<p>1、-rwsr-xr-x 表示SUID和所有者权限中可执行位被设置</p>\n<p>2、-rwSr–r– 表示SUID被设置，但所有者权限中可执行位没有被设置</p>\n<p>3、-rwxr-sr-x 表示SGID和同组用户权限中可执行位被设置</p>\n<p>4、-rw-r-Sr– 表示SGID被设置，但同组用户权限中可执行位没有被设置</p>\n<p>给文件加SUID和SUID的命令如下：</p>\n<p>chmod u+s filename 设置SUID位</p>\n<p>chmod u-s filename 去掉SUID设置</p>\n<p>chmod g+s filename 设置SGID位</p>\n<p>chmod g-s filename 去掉SGID设置</p>\n<p>SUID属性<br>例如&#x2F;usr&#x2F;bin&#x2F;passwd  带有SUID属性 属于root用户 root用户主<br>其它用户只有&#x2F;usr&#x2F;bin&#x2F;passwd的可执行权限，在执行这个命令时会暂时获取root权限</p>\n<p>SGID属性<br>和SUID属性十分相似<br>不同的是其它用户在执行有SGID属性的命令时，会暂时获取该程序群组的支持</p>\n"},{"title":"linux配置环境变量","date":"2023-05-28T15:00:18.000Z","_content":"\n[参考](https://blog.csdn.net/an520_/article/details/125220048)\n","source":"_posts/linux配置环境变量.md","raw":"---\ntitle: linux配置环境变量\ndate: 2023-05-28 11:00:18\ntags: [Linux环境变量配置]\ncategories: Linux\n---\n\n[参考](https://blog.csdn.net/an520_/article/details/125220048)\n","slug":"linux配置环境变量","published":1,"updated":"2023-10-01T02:55:45.143Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cln6ws36c001q5gi52aba9dix","content":"<p><a href=\"https://blog.csdn.net/an520_/article/details/125220048\">参考</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://blog.csdn.net/an520_/article/details/125220048\">参考</a></p>\n"},{"title":"动态链接","date":"2023-05-28T15:09:30.000Z","_content":"\n\n### 静态链接浪费内存和磁盘空间并且更新困难。动态链接的基本思想： 把链接过程推迟到运行时进行。\n\n-shared\n>生成动态链接模块时只使用-shared，由于装载时重定位的方法需要修改指令，没有办法做到同一份指令被多个进程共享，因为指令被重定位之后对于每个进程来讲是不同的。\n\n-fPIC 地址无关代码\n>实现的基本思想就是把指令中那些需要被修改的部分分离出来，跟数据部分放在一起，这样指令部分可以保持不变，而数据部分在每个进程中拥有一个副本。这种方案就是地址无关技术\n\nGOT全局偏移表\n>对于动态链接模块中,对于外部符号（数据）的访问的机制，当指令需要访问某个外部变量时，程序会先找到GOT，然后根据GOT中变量所对应的项找到变量的目标地址。每个变量都对应一个4个字节的地址，链接器在装载模块的时候会查找每个变量所在的地址，然后填充GOT中的各个项。由于GOT表本身是放在数据段的，所以它可以在模块装载时被修改，并且每个进程都可以有独立的副本。\n\n-fPIE\n>地址无关代码技术除了可以用在动态链接模块上，它也可以用于可执行文件\n\n共享模块（动态链接模块）的全局变量问题\n>当一个模块引用了定义在共享对象的全局变量的时候，由于可执行文件在之前链接时就必须确定该全局变量的地址，所以连接器会在创建可执行文件时，在它的.bss段创建一个global变量的副本。导致同一变量同时存在于多个位置\n>于是解决的办法只有一个，那就是所有的使用这个变量的指令都指向位于可执行文件中的那个副本。ELF共享库在编译时，默认都把定义在模块内部的全局变量当作定义在其他模块的全局变量，也就是说当作前面的类型四，通过GOT来实现变量的访问。当共享模块被装载时，如果某个全局变量在可执行文件中拥有副本，那么动态链接器就会把GOT中的相应地址指向该副本，这样该变量在运行时实际上最终就只有一个实例。如果变量在共享模块中被初始化，那么动态链接器还需要将该初始化值复制到程序主模块中的变量副本；如果该全局变量在程序主模块中没有副本，那么GOT中的相应地址就指向模块内部的该变量副本。\n\n** 默认情况下，如果可执行文件是动态链接的，那么GCC会使用PIC的方法来产生可执行文件的代码段部分，以便于不同的进程能够共享代码段，节省内存。所以动态链接的可执行文件中存在.got段**\n\n延迟绑定\n>由于动态链接下对于全局数据的访问和跨模块的调用都要进行复杂的GOT定位，然后间接寻址或调用，导致程序的运行速度减慢大概1%~%5。又因为动态链接的链接工作在运行时完成，导致程序的启动速度减慢。\n程序运行过程中，会有很多函数没有用到（错误处理函数，没有使用的功能模块等），所以没有必要一开始就把所有函数都链接好，ELF采用延迟绑定的方法，基本思想是当函数第一次被用到时才由动态链接器进行绑定（符号查找，重定位等），没用到的不绑定。这提高了程序的启动速度。\nELF使用PLT（Procedure Linkage Table）来实现延迟绑定,它使用了一些很精巧的指令序列来完成\n\nELF将GOT拆分成了两个表.got和.got.plt，其中.got用来保存全局变量引用的地址，.got.plt用来保存函数引用的地址\nPLT在ELF文件中以独立的段存放，段名通常叫做.plt，因为它本身是一些地址无关代码，所以可以跟代码段合并成同一个可读可写可执行的“Segment\"被载入内存\n[参考链接](https://markrepo.github.io/kernel/2018/08/19/dynamic-link/)","source":"_posts/动态链接.md","raw":"---\ntitle: 动态链接\ndate: 2023-05-28 11:09:30\ntags: 链接、装载与库\ncategories: 随笔\n---\n\n\n### 静态链接浪费内存和磁盘空间并且更新困难。动态链接的基本思想： 把链接过程推迟到运行时进行。\n\n-shared\n>生成动态链接模块时只使用-shared，由于装载时重定位的方法需要修改指令，没有办法做到同一份指令被多个进程共享，因为指令被重定位之后对于每个进程来讲是不同的。\n\n-fPIC 地址无关代码\n>实现的基本思想就是把指令中那些需要被修改的部分分离出来，跟数据部分放在一起，这样指令部分可以保持不变，而数据部分在每个进程中拥有一个副本。这种方案就是地址无关技术\n\nGOT全局偏移表\n>对于动态链接模块中,对于外部符号（数据）的访问的机制，当指令需要访问某个外部变量时，程序会先找到GOT，然后根据GOT中变量所对应的项找到变量的目标地址。每个变量都对应一个4个字节的地址，链接器在装载模块的时候会查找每个变量所在的地址，然后填充GOT中的各个项。由于GOT表本身是放在数据段的，所以它可以在模块装载时被修改，并且每个进程都可以有独立的副本。\n\n-fPIE\n>地址无关代码技术除了可以用在动态链接模块上，它也可以用于可执行文件\n\n共享模块（动态链接模块）的全局变量问题\n>当一个模块引用了定义在共享对象的全局变量的时候，由于可执行文件在之前链接时就必须确定该全局变量的地址，所以连接器会在创建可执行文件时，在它的.bss段创建一个global变量的副本。导致同一变量同时存在于多个位置\n>于是解决的办法只有一个，那就是所有的使用这个变量的指令都指向位于可执行文件中的那个副本。ELF共享库在编译时，默认都把定义在模块内部的全局变量当作定义在其他模块的全局变量，也就是说当作前面的类型四，通过GOT来实现变量的访问。当共享模块被装载时，如果某个全局变量在可执行文件中拥有副本，那么动态链接器就会把GOT中的相应地址指向该副本，这样该变量在运行时实际上最终就只有一个实例。如果变量在共享模块中被初始化，那么动态链接器还需要将该初始化值复制到程序主模块中的变量副本；如果该全局变量在程序主模块中没有副本，那么GOT中的相应地址就指向模块内部的该变量副本。\n\n** 默认情况下，如果可执行文件是动态链接的，那么GCC会使用PIC的方法来产生可执行文件的代码段部分，以便于不同的进程能够共享代码段，节省内存。所以动态链接的可执行文件中存在.got段**\n\n延迟绑定\n>由于动态链接下对于全局数据的访问和跨模块的调用都要进行复杂的GOT定位，然后间接寻址或调用，导致程序的运行速度减慢大概1%~%5。又因为动态链接的链接工作在运行时完成，导致程序的启动速度减慢。\n程序运行过程中，会有很多函数没有用到（错误处理函数，没有使用的功能模块等），所以没有必要一开始就把所有函数都链接好，ELF采用延迟绑定的方法，基本思想是当函数第一次被用到时才由动态链接器进行绑定（符号查找，重定位等），没用到的不绑定。这提高了程序的启动速度。\nELF使用PLT（Procedure Linkage Table）来实现延迟绑定,它使用了一些很精巧的指令序列来完成\n\nELF将GOT拆分成了两个表.got和.got.plt，其中.got用来保存全局变量引用的地址，.got.plt用来保存函数引用的地址\nPLT在ELF文件中以独立的段存放，段名通常叫做.plt，因为它本身是一些地址无关代码，所以可以跟代码段合并成同一个可读可写可执行的“Segment\"被载入内存\n[参考链接](https://markrepo.github.io/kernel/2018/08/19/dynamic-link/)","slug":"动态链接","published":1,"updated":"2023-10-01T02:55:45.143Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cln6ws36h001u5gi5684t7waz","content":"<h3 id=\"静态链接浪费内存和磁盘空间并且更新困难。动态链接的基本思想：-把链接过程推迟到运行时进行。\"><a href=\"#静态链接浪费内存和磁盘空间并且更新困难。动态链接的基本思想：-把链接过程推迟到运行时进行。\" class=\"headerlink\" title=\"静态链接浪费内存和磁盘空间并且更新困难。动态链接的基本思想： 把链接过程推迟到运行时进行。\"></a>静态链接浪费内存和磁盘空间并且更新困难。动态链接的基本思想： 把链接过程推迟到运行时进行。</h3><p>-shared</p>\n<blockquote>\n<p>生成动态链接模块时只使用-shared，由于装载时重定位的方法需要修改指令，没有办法做到同一份指令被多个进程共享，因为指令被重定位之后对于每个进程来讲是不同的。</p>\n</blockquote>\n<p>-fPIC 地址无关代码</p>\n<blockquote>\n<p>实现的基本思想就是把指令中那些需要被修改的部分分离出来，跟数据部分放在一起，这样指令部分可以保持不变，而数据部分在每个进程中拥有一个副本。这种方案就是地址无关技术</p>\n</blockquote>\n<p>GOT全局偏移表</p>\n<blockquote>\n<p>对于动态链接模块中,对于外部符号（数据）的访问的机制，当指令需要访问某个外部变量时，程序会先找到GOT，然后根据GOT中变量所对应的项找到变量的目标地址。每个变量都对应一个4个字节的地址，链接器在装载模块的时候会查找每个变量所在的地址，然后填充GOT中的各个项。由于GOT表本身是放在数据段的，所以它可以在模块装载时被修改，并且每个进程都可以有独立的副本。</p>\n</blockquote>\n<p>-fPIE</p>\n<blockquote>\n<p>地址无关代码技术除了可以用在动态链接模块上，它也可以用于可执行文件</p>\n</blockquote>\n<p>共享模块（动态链接模块）的全局变量问题</p>\n<blockquote>\n<p>当一个模块引用了定义在共享对象的全局变量的时候，由于可执行文件在之前链接时就必须确定该全局变量的地址，所以连接器会在创建可执行文件时，在它的.bss段创建一个global变量的副本。导致同一变量同时存在于多个位置<br>于是解决的办法只有一个，那就是所有的使用这个变量的指令都指向位于可执行文件中的那个副本。ELF共享库在编译时，默认都把定义在模块内部的全局变量当作定义在其他模块的全局变量，也就是说当作前面的类型四，通过GOT来实现变量的访问。当共享模块被装载时，如果某个全局变量在可执行文件中拥有副本，那么动态链接器就会把GOT中的相应地址指向该副本，这样该变量在运行时实际上最终就只有一个实例。如果变量在共享模块中被初始化，那么动态链接器还需要将该初始化值复制到程序主模块中的变量副本；如果该全局变量在程序主模块中没有副本，那么GOT中的相应地址就指向模块内部的该变量副本。</p>\n</blockquote>\n<p>** 默认情况下，如果可执行文件是动态链接的，那么GCC会使用PIC的方法来产生可执行文件的代码段部分，以便于不同的进程能够共享代码段，节省内存。所以动态链接的可执行文件中存在.got段**</p>\n<p>延迟绑定</p>\n<blockquote>\n<p>由于动态链接下对于全局数据的访问和跨模块的调用都要进行复杂的GOT定位，然后间接寻址或调用，导致程序的运行速度减慢大概1%~%5。又因为动态链接的链接工作在运行时完成，导致程序的启动速度减慢。<br>程序运行过程中，会有很多函数没有用到（错误处理函数，没有使用的功能模块等），所以没有必要一开始就把所有函数都链接好，ELF采用延迟绑定的方法，基本思想是当函数第一次被用到时才由动态链接器进行绑定（符号查找，重定位等），没用到的不绑定。这提高了程序的启动速度。<br>ELF使用PLT（Procedure Linkage Table）来实现延迟绑定,它使用了一些很精巧的指令序列来完成</p>\n</blockquote>\n<p>ELF将GOT拆分成了两个表.got和.got.plt，其中.got用来保存全局变量引用的地址，.got.plt用来保存函数引用的地址<br>PLT在ELF文件中以独立的段存放，段名通常叫做.plt，因为它本身是一些地址无关代码，所以可以跟代码段合并成同一个可读可写可执行的“Segment”被载入内存<br><a href=\"https://markrepo.github.io/kernel/2018/08/19/dynamic-link/\">参考链接</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"静态链接浪费内存和磁盘空间并且更新困难。动态链接的基本思想：-把链接过程推迟到运行时进行。\"><a href=\"#静态链接浪费内存和磁盘空间并且更新困难。动态链接的基本思想：-把链接过程推迟到运行时进行。\" class=\"headerlink\" title=\"静态链接浪费内存和磁盘空间并且更新困难。动态链接的基本思想： 把链接过程推迟到运行时进行。\"></a>静态链接浪费内存和磁盘空间并且更新困难。动态链接的基本思想： 把链接过程推迟到运行时进行。</h3><p>-shared</p>\n<blockquote>\n<p>生成动态链接模块时只使用-shared，由于装载时重定位的方法需要修改指令，没有办法做到同一份指令被多个进程共享，因为指令被重定位之后对于每个进程来讲是不同的。</p>\n</blockquote>\n<p>-fPIC 地址无关代码</p>\n<blockquote>\n<p>实现的基本思想就是把指令中那些需要被修改的部分分离出来，跟数据部分放在一起，这样指令部分可以保持不变，而数据部分在每个进程中拥有一个副本。这种方案就是地址无关技术</p>\n</blockquote>\n<p>GOT全局偏移表</p>\n<blockquote>\n<p>对于动态链接模块中,对于外部符号（数据）的访问的机制，当指令需要访问某个外部变量时，程序会先找到GOT，然后根据GOT中变量所对应的项找到变量的目标地址。每个变量都对应一个4个字节的地址，链接器在装载模块的时候会查找每个变量所在的地址，然后填充GOT中的各个项。由于GOT表本身是放在数据段的，所以它可以在模块装载时被修改，并且每个进程都可以有独立的副本。</p>\n</blockquote>\n<p>-fPIE</p>\n<blockquote>\n<p>地址无关代码技术除了可以用在动态链接模块上，它也可以用于可执行文件</p>\n</blockquote>\n<p>共享模块（动态链接模块）的全局变量问题</p>\n<blockquote>\n<p>当一个模块引用了定义在共享对象的全局变量的时候，由于可执行文件在之前链接时就必须确定该全局变量的地址，所以连接器会在创建可执行文件时，在它的.bss段创建一个global变量的副本。导致同一变量同时存在于多个位置<br>于是解决的办法只有一个，那就是所有的使用这个变量的指令都指向位于可执行文件中的那个副本。ELF共享库在编译时，默认都把定义在模块内部的全局变量当作定义在其他模块的全局变量，也就是说当作前面的类型四，通过GOT来实现变量的访问。当共享模块被装载时，如果某个全局变量在可执行文件中拥有副本，那么动态链接器就会把GOT中的相应地址指向该副本，这样该变量在运行时实际上最终就只有一个实例。如果变量在共享模块中被初始化，那么动态链接器还需要将该初始化值复制到程序主模块中的变量副本；如果该全局变量在程序主模块中没有副本，那么GOT中的相应地址就指向模块内部的该变量副本。</p>\n</blockquote>\n<p>** 默认情况下，如果可执行文件是动态链接的，那么GCC会使用PIC的方法来产生可执行文件的代码段部分，以便于不同的进程能够共享代码段，节省内存。所以动态链接的可执行文件中存在.got段**</p>\n<p>延迟绑定</p>\n<blockquote>\n<p>由于动态链接下对于全局数据的访问和跨模块的调用都要进行复杂的GOT定位，然后间接寻址或调用，导致程序的运行速度减慢大概1%~%5。又因为动态链接的链接工作在运行时完成，导致程序的启动速度减慢。<br>程序运行过程中，会有很多函数没有用到（错误处理函数，没有使用的功能模块等），所以没有必要一开始就把所有函数都链接好，ELF采用延迟绑定的方法，基本思想是当函数第一次被用到时才由动态链接器进行绑定（符号查找，重定位等），没用到的不绑定。这提高了程序的启动速度。<br>ELF使用PLT（Procedure Linkage Table）来实现延迟绑定,它使用了一些很精巧的指令序列来完成</p>\n</blockquote>\n<p>ELF将GOT拆分成了两个表.got和.got.plt，其中.got用来保存全局变量引用的地址，.got.plt用来保存函数引用的地址<br>PLT在ELF文件中以独立的段存放，段名通常叫做.plt，因为它本身是一些地址无关代码，所以可以跟代码段合并成同一个可读可写可执行的“Segment”被载入内存<br><a href=\"https://markrepo.github.io/kernel/2018/08/19/dynamic-link/\">参考链接</a></p>\n"},{"title":"动手深度学习","date":"2023-05-28T14:20:36.000Z","_content":"\n## 正规方程\n\n正规方程是通过求解下面的方程来找出使得代价最小的函数![](images/动手深度学习/1.jpg)\n只适用于线性模型，不适合逻辑回归模型等其它模型\n\n## 过拟合、欠拟合、权重衰退\n### 训练误差和泛化误差\n训练误差：模型在训练数据集上计算得到的误差\n泛化误差：模型应用在同样从原始样本的分布中抽取的无限多数据样本时，模型误差的期望\n>我们永远不能准确地计算出泛化误差。这是因为无限多地数据样本是一个虚构的对象。在实际中，我们只能通过将模型应用于一个独立的测试集来估计泛化误差，该测试集由随机选取的、未曾在训练集中出现的数据样本构成\n\n### 模型复杂度\n几个倾向于影响模型泛化的因素\n1.可调整参数的数量。当可调整参数的数量（自由度）很大时，模型往往更容易过拟合\n2.参数采用的值。当权重的取值范围较大时，模型可能更容易过拟合\n3.训练样本的数量。即使模型很简单，也很容易过拟合只包含一两个样本的数据集。而过拟合一个有数百万个样本的数据集则需要一个极其灵活的模型\n\n\n>正则化是处理过拟合的常用方法：在训练集的损失函数中加入惩罚项，以降低学习到的模型的复杂度\n\n## Unet网络\n[Unet](https://www.jianshu.com/p/14641b79a672)","source":"_posts/动手深度学习.md","raw":"---\ntitle: 动手深度学习\ndate: 2023-05-28 10:20:36\ntags: 深度学习\ncategories: 随笔\n---\n\n## 正规方程\n\n正规方程是通过求解下面的方程来找出使得代价最小的函数![](images/动手深度学习/1.jpg)\n只适用于线性模型，不适合逻辑回归模型等其它模型\n\n## 过拟合、欠拟合、权重衰退\n### 训练误差和泛化误差\n训练误差：模型在训练数据集上计算得到的误差\n泛化误差：模型应用在同样从原始样本的分布中抽取的无限多数据样本时，模型误差的期望\n>我们永远不能准确地计算出泛化误差。这是因为无限多地数据样本是一个虚构的对象。在实际中，我们只能通过将模型应用于一个独立的测试集来估计泛化误差，该测试集由随机选取的、未曾在训练集中出现的数据样本构成\n\n### 模型复杂度\n几个倾向于影响模型泛化的因素\n1.可调整参数的数量。当可调整参数的数量（自由度）很大时，模型往往更容易过拟合\n2.参数采用的值。当权重的取值范围较大时，模型可能更容易过拟合\n3.训练样本的数量。即使模型很简单，也很容易过拟合只包含一两个样本的数据集。而过拟合一个有数百万个样本的数据集则需要一个极其灵活的模型\n\n\n>正则化是处理过拟合的常用方法：在训练集的损失函数中加入惩罚项，以降低学习到的模型的复杂度\n\n## Unet网络\n[Unet](https://www.jianshu.com/p/14641b79a672)","slug":"动手深度学习","published":1,"updated":"2023-10-01T02:55:45.143Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cln6ws36j001y5gi550uw5kg3","content":"<h2 id=\"正规方程\"><a href=\"#正规方程\" class=\"headerlink\" title=\"正规方程\"></a>正规方程</h2><p>正规方程是通过求解下面的方程来找出使得代价最小的函数<img src=\"/images/%E5%8A%A8%E6%89%8B%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/1.jpg\"><br>只适用于线性模型，不适合逻辑回归模型等其它模型</p>\n<h2 id=\"过拟合、欠拟合、权重衰退\"><a href=\"#过拟合、欠拟合、权重衰退\" class=\"headerlink\" title=\"过拟合、欠拟合、权重衰退\"></a>过拟合、欠拟合、权重衰退</h2><h3 id=\"训练误差和泛化误差\"><a href=\"#训练误差和泛化误差\" class=\"headerlink\" title=\"训练误差和泛化误差\"></a>训练误差和泛化误差</h3><p>训练误差：模型在训练数据集上计算得到的误差<br>泛化误差：模型应用在同样从原始样本的分布中抽取的无限多数据样本时，模型误差的期望</p>\n<blockquote>\n<p>我们永远不能准确地计算出泛化误差。这是因为无限多地数据样本是一个虚构的对象。在实际中，我们只能通过将模型应用于一个独立的测试集来估计泛化误差，该测试集由随机选取的、未曾在训练集中出现的数据样本构成</p>\n</blockquote>\n<h3 id=\"模型复杂度\"><a href=\"#模型复杂度\" class=\"headerlink\" title=\"模型复杂度\"></a>模型复杂度</h3><p>几个倾向于影响模型泛化的因素<br>1.可调整参数的数量。当可调整参数的数量（自由度）很大时，模型往往更容易过拟合<br>2.参数采用的值。当权重的取值范围较大时，模型可能更容易过拟合<br>3.训练样本的数量。即使模型很简单，也很容易过拟合只包含一两个样本的数据集。而过拟合一个有数百万个样本的数据集则需要一个极其灵活的模型</p>\n<blockquote>\n<p>正则化是处理过拟合的常用方法：在训练集的损失函数中加入惩罚项，以降低学习到的模型的复杂度</p>\n</blockquote>\n<h2 id=\"Unet网络\"><a href=\"#Unet网络\" class=\"headerlink\" title=\"Unet网络\"></a>Unet网络</h2><p><a href=\"https://www.jianshu.com/p/14641b79a672\">Unet</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"正规方程\"><a href=\"#正规方程\" class=\"headerlink\" title=\"正规方程\"></a>正规方程</h2><p>正规方程是通过求解下面的方程来找出使得代价最小的函数<img src=\"/images/%E5%8A%A8%E6%89%8B%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/1.jpg\"><br>只适用于线性模型，不适合逻辑回归模型等其它模型</p>\n<h2 id=\"过拟合、欠拟合、权重衰退\"><a href=\"#过拟合、欠拟合、权重衰退\" class=\"headerlink\" title=\"过拟合、欠拟合、权重衰退\"></a>过拟合、欠拟合、权重衰退</h2><h3 id=\"训练误差和泛化误差\"><a href=\"#训练误差和泛化误差\" class=\"headerlink\" title=\"训练误差和泛化误差\"></a>训练误差和泛化误差</h3><p>训练误差：模型在训练数据集上计算得到的误差<br>泛化误差：模型应用在同样从原始样本的分布中抽取的无限多数据样本时，模型误差的期望</p>\n<blockquote>\n<p>我们永远不能准确地计算出泛化误差。这是因为无限多地数据样本是一个虚构的对象。在实际中，我们只能通过将模型应用于一个独立的测试集来估计泛化误差，该测试集由随机选取的、未曾在训练集中出现的数据样本构成</p>\n</blockquote>\n<h3 id=\"模型复杂度\"><a href=\"#模型复杂度\" class=\"headerlink\" title=\"模型复杂度\"></a>模型复杂度</h3><p>几个倾向于影响模型泛化的因素<br>1.可调整参数的数量。当可调整参数的数量（自由度）很大时，模型往往更容易过拟合<br>2.参数采用的值。当权重的取值范围较大时，模型可能更容易过拟合<br>3.训练样本的数量。即使模型很简单，也很容易过拟合只包含一两个样本的数据集。而过拟合一个有数百万个样本的数据集则需要一个极其灵活的模型</p>\n<blockquote>\n<p>正则化是处理过拟合的常用方法：在训练集的损失函数中加入惩罚项，以降低学习到的模型的复杂度</p>\n</blockquote>\n<h2 id=\"Unet网络\"><a href=\"#Unet网络\" class=\"headerlink\" title=\"Unet网络\"></a>Unet网络</h2><p><a href=\"https://www.jianshu.com/p/14641b79a672\">Unet</a></p>\n"},{"title":"静态链接","date":"2023-05-28T15:07:37.000Z","_content":">连接器采用“两部链接”的方法，将链接过程分为两部：\n\n1.空间和地址分配：扫描所有的输入目标文件，获得各个节的长度、属性、位置并将它们合并，计算合并后各个段的长度与位置，建立映射关系。收集所有输入目标文件中符号表中所有的符号定义和符号引用，统一放到全局符号表中\n2.符号解析与重定位：使用第一步中收集到的所有信息，读取输入文件中节的数据、重定位信息，并且进行符号解析与重定位、调整代码中的地址等。\n\n**重定位过程是链接过程的核心**\n\n## 符号解析与重定位\n#### 符号解析\n>重定位的过程伴随着符号解析过程，每个目标文件都可能定义一些符号，也可能引用到定义在其他目标文件的符号。重定位过程中，每个重定位的入口都是一个外部符号的引用，当链接器需要对某个符号的引用进行重定位时，他就要确定这个符号的目标地址。这时候链接器会去查找有所有输入目标文件的符号表组成的全局符号表，找到相应的符号后进行重定位，如果没有找到，就会报符号未定义的错误。\n\n#### 重定位\n>对于32位 x86平台下的ELF文件的重定位入口所修正的指令寻址方式只有两种：\n\n1.绝对近址32位寻址\n2.相对近址32为寻址\n>这两种重定位指令修正方式每个被修正的位置的长度都为32位，即4字节。而且都是近址寻址，不用考虑Intel的段间远址寻址。\n\nX86基本重定位类型：\n![QQ截图20221203153333.png](images/静态链接/1.jpg)\n","source":"_posts/静态链接.md","raw":"---\ntitle: 静态链接\ndate: 2023-05-28 11:07:37\ntags: 链接、装载与库\ncategories: 随笔\n---\n>连接器采用“两部链接”的方法，将链接过程分为两部：\n\n1.空间和地址分配：扫描所有的输入目标文件，获得各个节的长度、属性、位置并将它们合并，计算合并后各个段的长度与位置，建立映射关系。收集所有输入目标文件中符号表中所有的符号定义和符号引用，统一放到全局符号表中\n2.符号解析与重定位：使用第一步中收集到的所有信息，读取输入文件中节的数据、重定位信息，并且进行符号解析与重定位、调整代码中的地址等。\n\n**重定位过程是链接过程的核心**\n\n## 符号解析与重定位\n#### 符号解析\n>重定位的过程伴随着符号解析过程，每个目标文件都可能定义一些符号，也可能引用到定义在其他目标文件的符号。重定位过程中，每个重定位的入口都是一个外部符号的引用，当链接器需要对某个符号的引用进行重定位时，他就要确定这个符号的目标地址。这时候链接器会去查找有所有输入目标文件的符号表组成的全局符号表，找到相应的符号后进行重定位，如果没有找到，就会报符号未定义的错误。\n\n#### 重定位\n>对于32位 x86平台下的ELF文件的重定位入口所修正的指令寻址方式只有两种：\n\n1.绝对近址32位寻址\n2.相对近址32为寻址\n>这两种重定位指令修正方式每个被修正的位置的长度都为32位，即4字节。而且都是近址寻址，不用考虑Intel的段间远址寻址。\n\nX86基本重定位类型：\n![QQ截图20221203153333.png](images/静态链接/1.jpg)\n","slug":"静态链接","published":1,"updated":"2023-10-01T02:55:45.143Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cln6ws36j00225gi52ygl6qer","content":"<blockquote>\n<p>连接器采用“两部链接”的方法，将链接过程分为两部：</p>\n</blockquote>\n<p>1.空间和地址分配：扫描所有的输入目标文件，获得各个节的长度、属性、位置并将它们合并，计算合并后各个段的长度与位置，建立映射关系。收集所有输入目标文件中符号表中所有的符号定义和符号引用，统一放到全局符号表中<br>2.符号解析与重定位：使用第一步中收集到的所有信息，读取输入文件中节的数据、重定位信息，并且进行符号解析与重定位、调整代码中的地址等。</p>\n<p><strong>重定位过程是链接过程的核心</strong></p>\n<h2 id=\"符号解析与重定位\"><a href=\"#符号解析与重定位\" class=\"headerlink\" title=\"符号解析与重定位\"></a>符号解析与重定位</h2><h4 id=\"符号解析\"><a href=\"#符号解析\" class=\"headerlink\" title=\"符号解析\"></a>符号解析</h4><blockquote>\n<p>重定位的过程伴随着符号解析过程，每个目标文件都可能定义一些符号，也可能引用到定义在其他目标文件的符号。重定位过程中，每个重定位的入口都是一个外部符号的引用，当链接器需要对某个符号的引用进行重定位时，他就要确定这个符号的目标地址。这时候链接器会去查找有所有输入目标文件的符号表组成的全局符号表，找到相应的符号后进行重定位，如果没有找到，就会报符号未定义的错误。</p>\n</blockquote>\n<h4 id=\"重定位\"><a href=\"#重定位\" class=\"headerlink\" title=\"重定位\"></a>重定位</h4><blockquote>\n<p>对于32位 x86平台下的ELF文件的重定位入口所修正的指令寻址方式只有两种：</p>\n</blockquote>\n<p>1.绝对近址32位寻址<br>2.相对近址32为寻址</p>\n<blockquote>\n<p>这两种重定位指令修正方式每个被修正的位置的长度都为32位，即4字节。而且都是近址寻址，不用考虑Intel的段间远址寻址。</p>\n</blockquote>\n<p>X86基本重定位类型：<br><img src=\"/images/%E9%9D%99%E6%80%81%E9%93%BE%E6%8E%A5/1.jpg\" alt=\"QQ截图20221203153333.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>连接器采用“两部链接”的方法，将链接过程分为两部：</p>\n</blockquote>\n<p>1.空间和地址分配：扫描所有的输入目标文件，获得各个节的长度、属性、位置并将它们合并，计算合并后各个段的长度与位置，建立映射关系。收集所有输入目标文件中符号表中所有的符号定义和符号引用，统一放到全局符号表中<br>2.符号解析与重定位：使用第一步中收集到的所有信息，读取输入文件中节的数据、重定位信息，并且进行符号解析与重定位、调整代码中的地址等。</p>\n<p><strong>重定位过程是链接过程的核心</strong></p>\n<h2 id=\"符号解析与重定位\"><a href=\"#符号解析与重定位\" class=\"headerlink\" title=\"符号解析与重定位\"></a>符号解析与重定位</h2><h4 id=\"符号解析\"><a href=\"#符号解析\" class=\"headerlink\" title=\"符号解析\"></a>符号解析</h4><blockquote>\n<p>重定位的过程伴随着符号解析过程，每个目标文件都可能定义一些符号，也可能引用到定义在其他目标文件的符号。重定位过程中，每个重定位的入口都是一个外部符号的引用，当链接器需要对某个符号的引用进行重定位时，他就要确定这个符号的目标地址。这时候链接器会去查找有所有输入目标文件的符号表组成的全局符号表，找到相应的符号后进行重定位，如果没有找到，就会报符号未定义的错误。</p>\n</blockquote>\n<h4 id=\"重定位\"><a href=\"#重定位\" class=\"headerlink\" title=\"重定位\"></a>重定位</h4><blockquote>\n<p>对于32位 x86平台下的ELF文件的重定位入口所修正的指令寻址方式只有两种：</p>\n</blockquote>\n<p>1.绝对近址32位寻址<br>2.相对近址32为寻址</p>\n<blockquote>\n<p>这两种重定位指令修正方式每个被修正的位置的长度都为32位，即4字节。而且都是近址寻址，不用考虑Intel的段间远址寻址。</p>\n</blockquote>\n<p>X86基本重定位类型：<br><img src=\"/images/%E9%9D%99%E6%80%81%E9%93%BE%E6%8E%A5/1.jpg\" alt=\"QQ截图20221203153333.png\"></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cln6ws35h00095gi5gz5xahk3","category_id":"cln6ws35d00045gi576jbbdc2","_id":"cln6ws35l000f5gi51ufnedey"},{"post_id":"cln6ws35600015gi54uq65v06","category_id":"cln6ws35d00045gi576jbbdc2","_id":"cln6ws35u000k5gi51ahp263e"},{"post_id":"cln6ws35i000a5gi567zcdubj","category_id":"cln6ws35d00045gi576jbbdc2","_id":"cln6ws35v000n5gi52who1j69"},{"post_id":"cln6ws35k000d5gi5gdfwfg8c","category_id":"cln6ws35d00045gi576jbbdc2","_id":"cln6ws35w000r5gi5gyoj146g"},{"post_id":"cln6ws35c00035gi58f3q21z8","category_id":"cln6ws35d00045gi576jbbdc2","_id":"cln6ws35x000u5gi5c9394l6h"},{"post_id":"cln6ws35l000e5gi54ihy0jl0","category_id":"cln6ws35d00045gi576jbbdc2","_id":"cln6ws35y000y5gi58w6ldt2u"},{"post_id":"cln6ws35n000j5gi592bgbuck","category_id":"cln6ws35d00045gi576jbbdc2","_id":"cln6ws35z00115gi5hqcvbnra"},{"post_id":"cln6ws35f00075gi531fkgxkr","category_id":"cln6ws35d00045gi576jbbdc2","_id":"cln6ws36000155gi53zmq3avl"},{"post_id":"cln6ws35u000m5gi56bnrenl6","category_id":"cln6ws35d00045gi576jbbdc2","_id":"cln6ws36200185gi57qe4cavx"},{"post_id":"cln6ws35w000q5gi535fb0dd8","category_id":"cln6ws35d00045gi576jbbdc2","_id":"cln6ws363001c5gi5a56g5kaq"},{"post_id":"cln6ws35x000t5gi58q7b8cy8","category_id":"cln6ws35d00045gi576jbbdc2","_id":"cln6ws364001f5gi5fe9r24ou"},{"post_id":"cln6ws35y000x5gi5f4v6h4hw","category_id":"cln6ws35d00045gi576jbbdc2","_id":"cln6ws366001k5gi5gxycdp8d"},{"post_id":"cln6ws35z00105gi57r9p6kq8","category_id":"cln6ws35d00045gi576jbbdc2","_id":"cln6ws366001n5gi5cek7dhk4"},{"post_id":"cln6ws36000145gi57l5ac8yo","category_id":"cln6ws35d00045gi576jbbdc2","_id":"cln6ws36h001s5gi599pv29p0"},{"post_id":"cln6ws36100175gi5fhek5d3v","category_id":"cln6ws35d00045gi576jbbdc2","_id":"cln6ws36i001v5gi5erpbeink"},{"post_id":"cln6ws363001b5gi54r188p0u","category_id":"cln6ws365001h5gi5evly8fye","_id":"cln6ws36j001z5gi54zpj49a1"},{"post_id":"cln6ws36h001u5gi5684t7waz","category_id":"cln6ws36h001r5gi5a51yhi59","_id":"cln6ws36l00255gi535pggtp0"},{"post_id":"cln6ws364001e5gi5bikja71v","category_id":"cln6ws36h001r5gi5a51yhi59","_id":"cln6ws36m00285gi55e2zgp4l"},{"post_id":"cln6ws36j001y5gi550uw5kg3","category_id":"cln6ws36h001r5gi5a51yhi59","_id":"cln6ws36m002a5gi59rjg2r6r"},{"post_id":"cln6ws36j00225gi52ygl6qer","category_id":"cln6ws36h001r5gi5a51yhi59","_id":"cln6ws36m002e5gi5e3wvecl1"},{"post_id":"cln6ws365001j5gi5egpta3x8","category_id":"cln6ws36j00205gi5f9c315bg","_id":"cln6ws36n002g5gi5h3asbfac"},{"post_id":"cln6ws366001m5gi54plc52ru","category_id":"cln6ws36j00205gi5f9c315bg","_id":"cln6ws36n002j5gi52fwq5y3o"},{"post_id":"cln6ws36c001q5gi52aba9dix","category_id":"cln6ws36j00205gi5f9c315bg","_id":"cln6ws36n002l5gi50wh83g23"}],"PostTag":[{"post_id":"cln6ws35k000d5gi5gdfwfg8c","tag_id":"cln6ws35e00055gi55x0i8k1h","_id":"cln6ws35n000i5gi53so42dil"},{"post_id":"cln6ws35k000d5gi5gdfwfg8c","tag_id":"cln6ws35i000c5gi5dqxyearg","_id":"cln6ws35u000l5gi5105l1yxt"},{"post_id":"cln6ws35600015gi54uq65v06","tag_id":"cln6ws35e00055gi55x0i8k1h","_id":"cln6ws35w000p5gi50p1hd5d0"},{"post_id":"cln6ws35600015gi54uq65v06","tag_id":"cln6ws35i000c5gi5dqxyearg","_id":"cln6ws35x000s5gi52rap1ubv"},{"post_id":"cln6ws35l000e5gi54ihy0jl0","tag_id":"cln6ws35e00055gi55x0i8k1h","_id":"cln6ws35y000w5gi552ef6twz"},{"post_id":"cln6ws35l000e5gi54ihy0jl0","tag_id":"cln6ws35i000c5gi5dqxyearg","_id":"cln6ws35z000z5gi52xu41ciz"},{"post_id":"cln6ws35n000j5gi592bgbuck","tag_id":"cln6ws35e00055gi55x0i8k1h","_id":"cln6ws36000135gi5a4heeio8"},{"post_id":"cln6ws35n000j5gi592bgbuck","tag_id":"cln6ws35i000c5gi5dqxyearg","_id":"cln6ws36100165gi52ogj9d21"},{"post_id":"cln6ws35u000m5gi56bnrenl6","tag_id":"cln6ws35e00055gi55x0i8k1h","_id":"cln6ws362001a5gi505mu7rw8"},{"post_id":"cln6ws35u000m5gi56bnrenl6","tag_id":"cln6ws35i000c5gi5dqxyearg","_id":"cln6ws363001d5gi56r956sms"},{"post_id":"cln6ws35w000q5gi535fb0dd8","tag_id":"cln6ws35e00055gi55x0i8k1h","_id":"cln6ws365001i5gi5gtsrd64w"},{"post_id":"cln6ws35w000q5gi535fb0dd8","tag_id":"cln6ws35i000c5gi5dqxyearg","_id":"cln6ws366001l5gi58luugg48"},{"post_id":"cln6ws35c00035gi58f3q21z8","tag_id":"cln6ws35e00055gi55x0i8k1h","_id":"cln6ws36c001p5gi53cii1s4s"},{"post_id":"cln6ws35c00035gi58f3q21z8","tag_id":"cln6ws35i000c5gi5dqxyearg","_id":"cln6ws36h001t5gi5emgo74gu"},{"post_id":"cln6ws35x000t5gi58q7b8cy8","tag_id":"cln6ws35e00055gi55x0i8k1h","_id":"cln6ws36i001x5gi5bwpy8tg9"},{"post_id":"cln6ws35x000t5gi58q7b8cy8","tag_id":"cln6ws35i000c5gi5dqxyearg","_id":"cln6ws36j00215gi5gqhig45x"},{"post_id":"cln6ws35y000x5gi5f4v6h4hw","tag_id":"cln6ws35e00055gi55x0i8k1h","_id":"cln6ws36l00235gi5f0508yq1"},{"post_id":"cln6ws35y000x5gi5f4v6h4hw","tag_id":"cln6ws35i000c5gi5dqxyearg","_id":"cln6ws36m00275gi56aib69cb"},{"post_id":"cln6ws35z00105gi57r9p6kq8","tag_id":"cln6ws35e00055gi55x0i8k1h","_id":"cln6ws36m00295gi5dlvu37d4"},{"post_id":"cln6ws35z00105gi57r9p6kq8","tag_id":"cln6ws35i000c5gi5dqxyearg","_id":"cln6ws36m002d5gi5f7gu3yiq"},{"post_id":"cln6ws36000145gi57l5ac8yo","tag_id":"cln6ws35e00055gi55x0i8k1h","_id":"cln6ws36n002f5gi58v9u57sc"},{"post_id":"cln6ws36000145gi57l5ac8yo","tag_id":"cln6ws35i000c5gi5dqxyearg","_id":"cln6ws36n002i5gi54t4c1xuw"},{"post_id":"cln6ws35f00075gi531fkgxkr","tag_id":"cln6ws35e00055gi55x0i8k1h","_id":"cln6ws36n002k5gi51qrt3d92"},{"post_id":"cln6ws35f00075gi531fkgxkr","tag_id":"cln6ws35i000c5gi5dqxyearg","_id":"cln6ws36n002n5gi5c1ymgspd"},{"post_id":"cln6ws36100175gi5fhek5d3v","tag_id":"cln6ws35e00055gi55x0i8k1h","_id":"cln6ws36n002o5gi598bn1euf"},{"post_id":"cln6ws36100175gi5fhek5d3v","tag_id":"cln6ws35i000c5gi5dqxyearg","_id":"cln6ws36n002p5gi5hq6n3x8r"},{"post_id":"cln6ws35h00095gi5gz5xahk3","tag_id":"cln6ws35e00055gi55x0i8k1h","_id":"cln6ws36o002r5gi55w83cggx"},{"post_id":"cln6ws35h00095gi5gz5xahk3","tag_id":"cln6ws35i000c5gi5dqxyearg","_id":"cln6ws36o002s5gi5hlz3b9lw"},{"post_id":"cln6ws35i000a5gi567zcdubj","tag_id":"cln6ws35e00055gi55x0i8k1h","_id":"cln6ws36o002u5gi57rke9dom"},{"post_id":"cln6ws35i000a5gi567zcdubj","tag_id":"cln6ws35i000c5gi5dqxyearg","_id":"cln6ws36o002v5gi54me57uyp"},{"post_id":"cln6ws363001b5gi54r188p0u","tag_id":"cln6ws366001o5gi54z9r77gt","_id":"cln6ws36o002w5gi526g9h250"},{"post_id":"cln6ws364001e5gi5bikja71v","tag_id":"cln6ws36i001w5gi55axk0zg9","_id":"cln6ws36o002x5gi5dtokczn4"},{"post_id":"cln6ws365001j5gi5egpta3x8","tag_id":"cln6ws36l00245gi55cblfjl5","_id":"cln6ws36o002y5gi56t8x8q2d"},{"post_id":"cln6ws366001m5gi54plc52ru","tag_id":"cln6ws36m002b5gi5dhgyagpv","_id":"cln6ws36o002z5gi57v6lgaf2"},{"post_id":"cln6ws36c001q5gi52aba9dix","tag_id":"cln6ws36n002h5gi54oyl2cs9","_id":"cln6ws36o00305gi5fhhz9jif"},{"post_id":"cln6ws36h001u5gi5684t7waz","tag_id":"cln6ws36n002m5gi5h8ca977w","_id":"cln6ws36o00315gi52m3z9fle"},{"post_id":"cln6ws36j001y5gi550uw5kg3","tag_id":"cln6ws36n002q5gi5fveqaaip","_id":"cln6ws36o00325gi5g6571bj0"},{"post_id":"cln6ws36j00225gi52ygl6qer","tag_id":"cln6ws36n002m5gi5h8ca977w","_id":"cln6ws36o00335gi5f8ath2wi"}],"Tag":[{"name":"MySQL","_id":"cln6ws35e00055gi55x0i8k1h"},{"name":"MySQL是怎样运行的","_id":"cln6ws35i000c5gi5dqxyearg"},{"name":"cmake","_id":"cln6ws366001o5gi54z9r77gt"},{"name":"configure","_id":"cln6ws36i001w5gi55axk0zg9"},{"name":"Linux不同目录详解","_id":"cln6ws36l00245gi55cblfjl5"},{"name":"Linux文件权限","_id":"cln6ws36m002b5gi5dhgyagpv"},{"name":"Linux环境变量配置","_id":"cln6ws36n002h5gi54oyl2cs9"},{"name":"链接、装载与库","_id":"cln6ws36n002m5gi5h8ca977w"},{"name":"深度学习","_id":"cln6ws36n002q5gi5fveqaaip"}]}}